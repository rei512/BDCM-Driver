
BDCM_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003798  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08003858  08003858  00004858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003940  08003940  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003940  08003940  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003940  08003940  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003940  08003940  00004940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003944  08003944  00004944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003948  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000000c  08003954  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08003954  0000517c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df95  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002014  00000000  00000000  00012fc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  00014fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000baa  00000000  00000000  00015ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013fcb  00000000  00000000  00016a72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011573  00000000  00000000  0002aa3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008221b  00000000  00000000  0003bfb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000be1cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036cc  00000000  00000000  000be210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000c18dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003840 	.word	0x08003840

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003840 	.word	0x08003840

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fced 	bl	8000c02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f86e 	bl	8000308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 fa74 	bl	8000718 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000230:	f000 f8ae 	bl	8000390 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000234:	f000 f918 	bl	8000468 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000238:	f000 f956 	bl	80004e8 <MX_TIM1_Init>
  MX_TIM14_Init();
 800023c:	f000 fa20 	bl	8000680 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000240:	4b2f      	ldr	r3, [pc, #188]	@ (8000300 <main+0xe0>)
 8000242:	2100      	movs	r1, #0
 8000244:	0018      	movs	r0, r3
 8000246:	f002 fb21 	bl	800288c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800024a:	4b2d      	ldr	r3, [pc, #180]	@ (8000300 <main+0xe0>)
 800024c:	2104      	movs	r1, #4
 800024e:	0018      	movs	r0, r3
 8000250:	f002 fb1c 	bl	800288c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000254:	4b2a      	ldr	r3, [pc, #168]	@ (8000300 <main+0xe0>)
 8000256:	2108      	movs	r1, #8
 8000258:	0018      	movs	r0, r3
 800025a:	f002 fb17 	bl	800288c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800025e:	4b28      	ldr	r3, [pc, #160]	@ (8000300 <main+0xe0>)
 8000260:	210c      	movs	r1, #12
 8000262:	0018      	movs	r0, r3
 8000264:	f002 fb12 	bl	800288c <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 50);
 8000268:	4b25      	ldr	r3, [pc, #148]	@ (8000300 <main+0xe0>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	2232      	movs	r2, #50	@ 0x32
 800026e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 99);
 8000270:	4b23      	ldr	r3, [pc, #140]	@ (8000300 <main+0xe0>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2263      	movs	r2, #99	@ 0x63
 8000276:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 50);
 8000278:	4b21      	ldr	r3, [pc, #132]	@ (8000300 <main+0xe0>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2232      	movs	r2, #50	@ 0x32
 800027e:	63da      	str	r2, [r3, #60]	@ 0x3c
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 99);
 8000280:	4b1f      	ldr	r3, [pc, #124]	@ (8000300 <main+0xe0>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	2263      	movs	r2, #99	@ 0x63
 8000286:	641a      	str	r2, [r3, #64]	@ 0x40

  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 8000288:	2380      	movs	r3, #128	@ 0x80
 800028a:	01db      	lsls	r3, r3, #7
 800028c:	4a1d      	ldr	r2, [pc, #116]	@ (8000304 <main+0xe4>)
 800028e:	0019      	movs	r1, r3
 8000290:	0010      	movs	r0, r2
 8000292:	f001 fc36 	bl	8001b02 <HAL_GPIO_TogglePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 8000296:	2380      	movs	r3, #128	@ 0x80
 8000298:	01db      	lsls	r3, r3, #7
 800029a:	4a1a      	ldr	r2, [pc, #104]	@ (8000304 <main+0xe4>)
 800029c:	0019      	movs	r1, r3
 800029e:	0010      	movs	r0, r2
 80002a0:	f001 fc2f 	bl	8001b02 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 80002a4:	2380      	movs	r3, #128	@ 0x80
 80002a6:	021b      	lsls	r3, r3, #8
 80002a8:	4a16      	ldr	r2, [pc, #88]	@ (8000304 <main+0xe4>)
 80002aa:	0019      	movs	r1, r3
 80002ac:	0010      	movs	r0, r2
 80002ae:	f001 fc28 	bl	8001b02 <HAL_GPIO_TogglePin>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80002b2:	4b13      	ldr	r3, [pc, #76]	@ (8000300 <main+0xe0>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2200      	movs	r2, #0
 80002b8:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 99);
 80002ba:	4b11      	ldr	r3, [pc, #68]	@ (8000300 <main+0xe0>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	2263      	movs	r2, #99	@ 0x63
 80002c0:	639a      	str	r2, [r3, #56]	@ 0x38
	  HAL_Delay(100);
 80002c2:	2064      	movs	r0, #100	@ 0x64
 80002c4:	f000 fd1a 	bl	8000cfc <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 80002c8:	2380      	movs	r3, #128	@ 0x80
 80002ca:	01db      	lsls	r3, r3, #7
 80002cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000304 <main+0xe4>)
 80002ce:	0019      	movs	r1, r3
 80002d0:	0010      	movs	r0, r2
 80002d2:	f001 fc16 	bl	8001b02 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 80002d6:	2380      	movs	r3, #128	@ 0x80
 80002d8:	021b      	lsls	r3, r3, #8
 80002da:	4a0a      	ldr	r2, [pc, #40]	@ (8000304 <main+0xe4>)
 80002dc:	0019      	movs	r1, r3
 80002de:	0010      	movs	r0, r2
 80002e0:	f001 fc0f 	bl	8001b02 <HAL_GPIO_TogglePin>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 99);
 80002e4:	4b06      	ldr	r3, [pc, #24]	@ (8000300 <main+0xe0>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	2263      	movs	r2, #99	@ 0x63
 80002ea:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80002ec:	4b04      	ldr	r3, [pc, #16]	@ (8000300 <main+0xe0>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	2200      	movs	r2, #0
 80002f2:	639a      	str	r2, [r3, #56]	@ 0x38
	  HAL_Delay(100);
 80002f4:	2064      	movs	r0, #100	@ 0x64
 80002f6:	f000 fd01 	bl	8000cfc <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 80002fa:	46c0      	nop			@ (mov r8, r8)
 80002fc:	e7cb      	b.n	8000296 <main+0x76>
 80002fe:	46c0      	nop			@ (mov r8, r8)
 8000300:	200000e0 	.word	0x200000e0
 8000304:	50000800 	.word	0x50000800

08000308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000308:	b590      	push	{r4, r7, lr}
 800030a:	b08d      	sub	sp, #52	@ 0x34
 800030c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030e:	2414      	movs	r4, #20
 8000310:	193b      	adds	r3, r7, r4
 8000312:	0018      	movs	r0, r3
 8000314:	231c      	movs	r3, #28
 8000316:	001a      	movs	r2, r3
 8000318:	2100      	movs	r1, #0
 800031a:	f003 fa65 	bl	80037e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031e:	003b      	movs	r3, r7
 8000320:	0018      	movs	r0, r3
 8000322:	2314      	movs	r3, #20
 8000324:	001a      	movs	r2, r3
 8000326:	2100      	movs	r1, #0
 8000328:	f003 fa5e 	bl	80037e8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800032c:	193b      	adds	r3, r7, r4
 800032e:	2202      	movs	r2, #2
 8000330:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000332:	193b      	adds	r3, r7, r4
 8000334:	2280      	movs	r2, #128	@ 0x80
 8000336:	0052      	lsls	r2, r2, #1
 8000338:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800033a:	193b      	adds	r3, r7, r4
 800033c:	2200      	movs	r2, #0
 800033e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000340:	193b      	adds	r3, r7, r4
 8000342:	2240      	movs	r2, #64	@ 0x40
 8000344:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000346:	193b      	adds	r3, r7, r4
 8000348:	0018      	movs	r0, r3
 800034a:	f001 fd71 	bl	8001e30 <HAL_RCC_OscConfig>
 800034e:	1e03      	subs	r3, r0, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000352:	f000 fa6b 	bl	800082c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000356:	003b      	movs	r3, r7
 8000358:	2207      	movs	r2, #7
 800035a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800035c:	003b      	movs	r3, r7
 800035e:	2200      	movs	r2, #0
 8000360:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000362:	003b      	movs	r3, r7
 8000364:	2200      	movs	r2, #0
 8000366:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000368:	003b      	movs	r3, r7
 800036a:	2200      	movs	r2, #0
 800036c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800036e:	003b      	movs	r3, r7
 8000370:	2200      	movs	r2, #0
 8000372:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000374:	003b      	movs	r3, r7
 8000376:	2101      	movs	r1, #1
 8000378:	0018      	movs	r0, r3
 800037a:	f001 ff3d 	bl	80021f8 <HAL_RCC_ClockConfig>
 800037e:	1e03      	subs	r3, r0, #0
 8000380:	d001      	beq.n	8000386 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000382:	f000 fa53 	bl	800082c <Error_Handler>
  }
}
 8000386:	46c0      	nop			@ (mov r8, r8)
 8000388:	46bd      	mov	sp, r7
 800038a:	b00d      	add	sp, #52	@ 0x34
 800038c:	bd90      	pop	{r4, r7, pc}
	...

08000390 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b084      	sub	sp, #16
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	0018      	movs	r0, r3
 800039a:	230c      	movs	r3, #12
 800039c:	001a      	movs	r2, r3
 800039e:	2100      	movs	r1, #0
 80003a0:	f003 fa22 	bl	80037e8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80003a4:	4b2d      	ldr	r3, [pc, #180]	@ (800045c <MX_ADC1_Init+0xcc>)
 80003a6:	4a2e      	ldr	r2, [pc, #184]	@ (8000460 <MX_ADC1_Init+0xd0>)
 80003a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80003aa:	4b2c      	ldr	r3, [pc, #176]	@ (800045c <MX_ADC1_Init+0xcc>)
 80003ac:	2280      	movs	r2, #128	@ 0x80
 80003ae:	05d2      	lsls	r2, r2, #23
 80003b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003b2:	4b2a      	ldr	r3, [pc, #168]	@ (800045c <MX_ADC1_Init+0xcc>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003b8:	4b28      	ldr	r3, [pc, #160]	@ (800045c <MX_ADC1_Init+0xcc>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003be:	4b27      	ldr	r3, [pc, #156]	@ (800045c <MX_ADC1_Init+0xcc>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003c4:	4b25      	ldr	r3, [pc, #148]	@ (800045c <MX_ADC1_Init+0xcc>)
 80003c6:	2204      	movs	r2, #4
 80003c8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003ca:	4b24      	ldr	r3, [pc, #144]	@ (800045c <MX_ADC1_Init+0xcc>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80003d0:	4b22      	ldr	r3, [pc, #136]	@ (800045c <MX_ADC1_Init+0xcc>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003d6:	4b21      	ldr	r3, [pc, #132]	@ (800045c <MX_ADC1_Init+0xcc>)
 80003d8:	2200      	movs	r2, #0
 80003da:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80003dc:	4b1f      	ldr	r3, [pc, #124]	@ (800045c <MX_ADC1_Init+0xcc>)
 80003de:	2201      	movs	r2, #1
 80003e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003e2:	4b1e      	ldr	r3, [pc, #120]	@ (800045c <MX_ADC1_Init+0xcc>)
 80003e4:	2220      	movs	r2, #32
 80003e6:	2100      	movs	r1, #0
 80003e8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ea:	4b1c      	ldr	r3, [pc, #112]	@ (800045c <MX_ADC1_Init+0xcc>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003f0:	4b1a      	ldr	r3, [pc, #104]	@ (800045c <MX_ADC1_Init+0xcc>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003f6:	4b19      	ldr	r3, [pc, #100]	@ (800045c <MX_ADC1_Init+0xcc>)
 80003f8:	222c      	movs	r2, #44	@ 0x2c
 80003fa:	2100      	movs	r1, #0
 80003fc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003fe:	4b17      	ldr	r3, [pc, #92]	@ (800045c <MX_ADC1_Init+0xcc>)
 8000400:	2200      	movs	r2, #0
 8000402:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000404:	4b15      	ldr	r3, [pc, #84]	@ (800045c <MX_ADC1_Init+0xcc>)
 8000406:	2200      	movs	r2, #0
 8000408:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800040a:	4b14      	ldr	r3, [pc, #80]	@ (800045c <MX_ADC1_Init+0xcc>)
 800040c:	2200      	movs	r2, #0
 800040e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000410:	4b12      	ldr	r3, [pc, #72]	@ (800045c <MX_ADC1_Init+0xcc>)
 8000412:	223c      	movs	r2, #60	@ 0x3c
 8000414:	2100      	movs	r1, #0
 8000416:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000418:	4b10      	ldr	r3, [pc, #64]	@ (800045c <MX_ADC1_Init+0xcc>)
 800041a:	2200      	movs	r2, #0
 800041c:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800041e:	4b0f      	ldr	r3, [pc, #60]	@ (800045c <MX_ADC1_Init+0xcc>)
 8000420:	0018      	movs	r0, r3
 8000422:	f000 fd8d 	bl	8000f40 <HAL_ADC_Init>
 8000426:	1e03      	subs	r3, r0, #0
 8000428:	d001      	beq.n	800042e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800042a:	f000 f9ff 	bl	800082c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	4a0c      	ldr	r2, [pc, #48]	@ (8000464 <MX_ADC1_Init+0xd4>)
 8000432:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	2200      	movs	r2, #0
 8000438:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	2200      	movs	r2, #0
 800043e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000440:	1d3a      	adds	r2, r7, #4
 8000442:	4b06      	ldr	r3, [pc, #24]	@ (800045c <MX_ADC1_Init+0xcc>)
 8000444:	0011      	movs	r1, r2
 8000446:	0018      	movs	r0, r3
 8000448:	f000 ff20 	bl	800128c <HAL_ADC_ConfigChannel>
 800044c:	1e03      	subs	r3, r0, #0
 800044e:	d001      	beq.n	8000454 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000450:	f000 f9ec 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000454:	46c0      	nop			@ (mov r8, r8)
 8000456:	46bd      	mov	sp, r7
 8000458:	b004      	add	sp, #16
 800045a:	bd80      	pop	{r7, pc}
 800045c:	20000028 	.word	0x20000028
 8000460:	40012400 	.word	0x40012400
 8000464:	a4000200 	.word	0xa4000200

08000468 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800046c:	4b1b      	ldr	r3, [pc, #108]	@ (80004dc <MX_I2C1_Init+0x74>)
 800046e:	4a1c      	ldr	r2, [pc, #112]	@ (80004e0 <MX_I2C1_Init+0x78>)
 8000470:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000472:	4b1a      	ldr	r3, [pc, #104]	@ (80004dc <MX_I2C1_Init+0x74>)
 8000474:	4a1b      	ldr	r2, [pc, #108]	@ (80004e4 <MX_I2C1_Init+0x7c>)
 8000476:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000478:	4b18      	ldr	r3, [pc, #96]	@ (80004dc <MX_I2C1_Init+0x74>)
 800047a:	2200      	movs	r2, #0
 800047c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800047e:	4b17      	ldr	r3, [pc, #92]	@ (80004dc <MX_I2C1_Init+0x74>)
 8000480:	2201      	movs	r2, #1
 8000482:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000484:	4b15      	ldr	r3, [pc, #84]	@ (80004dc <MX_I2C1_Init+0x74>)
 8000486:	2200      	movs	r2, #0
 8000488:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800048a:	4b14      	ldr	r3, [pc, #80]	@ (80004dc <MX_I2C1_Init+0x74>)
 800048c:	2200      	movs	r2, #0
 800048e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000490:	4b12      	ldr	r3, [pc, #72]	@ (80004dc <MX_I2C1_Init+0x74>)
 8000492:	2200      	movs	r2, #0
 8000494:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000496:	4b11      	ldr	r3, [pc, #68]	@ (80004dc <MX_I2C1_Init+0x74>)
 8000498:	2200      	movs	r2, #0
 800049a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800049c:	4b0f      	ldr	r3, [pc, #60]	@ (80004dc <MX_I2C1_Init+0x74>)
 800049e:	2200      	movs	r2, #0
 80004a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004a2:	4b0e      	ldr	r3, [pc, #56]	@ (80004dc <MX_I2C1_Init+0x74>)
 80004a4:	0018      	movs	r0, r3
 80004a6:	f001 fb85 	bl	8001bb4 <HAL_I2C_Init>
 80004aa:	1e03      	subs	r3, r0, #0
 80004ac:	d001      	beq.n	80004b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004ae:	f000 f9bd 	bl	800082c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004b2:	4b0a      	ldr	r3, [pc, #40]	@ (80004dc <MX_I2C1_Init+0x74>)
 80004b4:	2100      	movs	r1, #0
 80004b6:	0018      	movs	r0, r3
 80004b8:	f001 fc22 	bl	8001d00 <HAL_I2CEx_ConfigAnalogFilter>
 80004bc:	1e03      	subs	r3, r0, #0
 80004be:	d001      	beq.n	80004c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004c0:	f000 f9b4 	bl	800082c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004c4:	4b05      	ldr	r3, [pc, #20]	@ (80004dc <MX_I2C1_Init+0x74>)
 80004c6:	2100      	movs	r1, #0
 80004c8:	0018      	movs	r0, r3
 80004ca:	f001 fc65 	bl	8001d98 <HAL_I2CEx_ConfigDigitalFilter>
 80004ce:	1e03      	subs	r3, r0, #0
 80004d0:	d001      	beq.n	80004d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004d2:	f000 f9ab 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004d6:	46c0      	nop			@ (mov r8, r8)
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	2000008c 	.word	0x2000008c
 80004e0:	40005400 	.word	0x40005400
 80004e4:	20303e5d 	.word	0x20303e5d

080004e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b098      	sub	sp, #96	@ 0x60
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ee:	2354      	movs	r3, #84	@ 0x54
 80004f0:	18fb      	adds	r3, r7, r3
 80004f2:	0018      	movs	r0, r3
 80004f4:	230c      	movs	r3, #12
 80004f6:	001a      	movs	r2, r3
 80004f8:	2100      	movs	r1, #0
 80004fa:	f003 f975 	bl	80037e8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004fe:	2338      	movs	r3, #56	@ 0x38
 8000500:	18fb      	adds	r3, r7, r3
 8000502:	0018      	movs	r0, r3
 8000504:	231c      	movs	r3, #28
 8000506:	001a      	movs	r2, r3
 8000508:	2100      	movs	r1, #0
 800050a:	f003 f96d 	bl	80037e8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	0018      	movs	r0, r3
 8000512:	2334      	movs	r3, #52	@ 0x34
 8000514:	001a      	movs	r2, r3
 8000516:	2100      	movs	r1, #0
 8000518:	f003 f966 	bl	80037e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800051c:	4b56      	ldr	r3, [pc, #344]	@ (8000678 <MX_TIM1_Init+0x190>)
 800051e:	4a57      	ldr	r2, [pc, #348]	@ (800067c <MX_TIM1_Init+0x194>)
 8000520:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24-1;
 8000522:	4b55      	ldr	r3, [pc, #340]	@ (8000678 <MX_TIM1_Init+0x190>)
 8000524:	2217      	movs	r2, #23
 8000526:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000528:	4b53      	ldr	r3, [pc, #332]	@ (8000678 <MX_TIM1_Init+0x190>)
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800052e:	4b52      	ldr	r3, [pc, #328]	@ (8000678 <MX_TIM1_Init+0x190>)
 8000530:	2263      	movs	r2, #99	@ 0x63
 8000532:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000534:	4b50      	ldr	r3, [pc, #320]	@ (8000678 <MX_TIM1_Init+0x190>)
 8000536:	2200      	movs	r2, #0
 8000538:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800053a:	4b4f      	ldr	r3, [pc, #316]	@ (8000678 <MX_TIM1_Init+0x190>)
 800053c:	2200      	movs	r2, #0
 800053e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000540:	4b4d      	ldr	r3, [pc, #308]	@ (8000678 <MX_TIM1_Init+0x190>)
 8000542:	2200      	movs	r2, #0
 8000544:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000546:	4b4c      	ldr	r3, [pc, #304]	@ (8000678 <MX_TIM1_Init+0x190>)
 8000548:	0018      	movs	r0, r3
 800054a:	f002 f947 	bl	80027dc <HAL_TIM_PWM_Init>
 800054e:	1e03      	subs	r3, r0, #0
 8000550:	d001      	beq.n	8000556 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000552:	f000 f96b 	bl	800082c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000556:	2154      	movs	r1, #84	@ 0x54
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2200      	movs	r2, #0
 8000562:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800056a:	187a      	adds	r2, r7, r1
 800056c:	4b42      	ldr	r3, [pc, #264]	@ (8000678 <MX_TIM1_Init+0x190>)
 800056e:	0011      	movs	r1, r2
 8000570:	0018      	movs	r0, r3
 8000572:	f003 f819 	bl	80035a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000576:	1e03      	subs	r3, r0, #0
 8000578:	d001      	beq.n	800057e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800057a:	f000 f957 	bl	800082c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800057e:	2138      	movs	r1, #56	@ 0x38
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2260      	movs	r2, #96	@ 0x60
 8000584:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2200      	movs	r2, #0
 800058a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2200      	movs	r2, #0
 8000596:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2200      	movs	r2, #0
 800059c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2200      	movs	r2, #0
 80005a2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2200      	movs	r2, #0
 80005a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005aa:	1879      	adds	r1, r7, r1
 80005ac:	4b32      	ldr	r3, [pc, #200]	@ (8000678 <MX_TIM1_Init+0x190>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	0018      	movs	r0, r3
 80005b2:	f002 fba5 	bl	8002d00 <HAL_TIM_PWM_ConfigChannel>
 80005b6:	1e03      	subs	r3, r0, #0
 80005b8:	d001      	beq.n	80005be <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80005ba:	f000 f937 	bl	800082c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005be:	2338      	movs	r3, #56	@ 0x38
 80005c0:	18f9      	adds	r1, r7, r3
 80005c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000678 <MX_TIM1_Init+0x190>)
 80005c4:	2204      	movs	r2, #4
 80005c6:	0018      	movs	r0, r3
 80005c8:	f002 fb9a 	bl	8002d00 <HAL_TIM_PWM_ConfigChannel>
 80005cc:	1e03      	subs	r3, r0, #0
 80005ce:	d001      	beq.n	80005d4 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80005d0:	f000 f92c 	bl	800082c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005d4:	2338      	movs	r3, #56	@ 0x38
 80005d6:	18f9      	adds	r1, r7, r3
 80005d8:	4b27      	ldr	r3, [pc, #156]	@ (8000678 <MX_TIM1_Init+0x190>)
 80005da:	2208      	movs	r2, #8
 80005dc:	0018      	movs	r0, r3
 80005de:	f002 fb8f 	bl	8002d00 <HAL_TIM_PWM_ConfigChannel>
 80005e2:	1e03      	subs	r3, r0, #0
 80005e4:	d001      	beq.n	80005ea <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 80005e6:	f000 f921 	bl	800082c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80005ea:	2338      	movs	r3, #56	@ 0x38
 80005ec:	18f9      	adds	r1, r7, r3
 80005ee:	4b22      	ldr	r3, [pc, #136]	@ (8000678 <MX_TIM1_Init+0x190>)
 80005f0:	220c      	movs	r2, #12
 80005f2:	0018      	movs	r0, r3
 80005f4:	f002 fb84 	bl	8002d00 <HAL_TIM_PWM_ConfigChannel>
 80005f8:	1e03      	subs	r3, r0, #0
 80005fa:	d001      	beq.n	8000600 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80005fc:	f000 f916 	bl	800082c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	2200      	movs	r2, #0
 800060a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	2200      	movs	r2, #0
 8000616:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2280      	movs	r2, #128	@ 0x80
 8000622:	0192      	lsls	r2, r2, #6
 8000624:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	2200      	movs	r2, #0
 8000636:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2280      	movs	r2, #128	@ 0x80
 800063c:	0492      	lsls	r2, r2, #18
 800063e:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2200      	movs	r2, #0
 8000644:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	2200      	movs	r2, #0
 800064a:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2200      	movs	r2, #0
 8000650:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000652:	1d3a      	adds	r2, r7, #4
 8000654:	4b08      	ldr	r3, [pc, #32]	@ (8000678 <MX_TIM1_Init+0x190>)
 8000656:	0011      	movs	r1, r2
 8000658:	0018      	movs	r0, r3
 800065a:	f003 f807 	bl	800366c <HAL_TIMEx_ConfigBreakDeadTime>
 800065e:	1e03      	subs	r3, r0, #0
 8000660:	d001      	beq.n	8000666 <MX_TIM1_Init+0x17e>
  {
    Error_Handler();
 8000662:	f000 f8e3 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000666:	4b04      	ldr	r3, [pc, #16]	@ (8000678 <MX_TIM1_Init+0x190>)
 8000668:	0018      	movs	r0, r3
 800066a:	f000 fa17 	bl	8000a9c <HAL_TIM_MspPostInit>

}
 800066e:	46c0      	nop			@ (mov r8, r8)
 8000670:	46bd      	mov	sp, r7
 8000672:	b018      	add	sp, #96	@ 0x60
 8000674:	bd80      	pop	{r7, pc}
 8000676:	46c0      	nop			@ (mov r8, r8)
 8000678:	200000e0 	.word	0x200000e0
 800067c:	40012c00 	.word	0x40012c00

08000680 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	0018      	movs	r0, r3
 800068a:	231c      	movs	r3, #28
 800068c:	001a      	movs	r2, r3
 800068e:	2100      	movs	r1, #0
 8000690:	f003 f8aa 	bl	80037e8 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000694:	4b1e      	ldr	r3, [pc, #120]	@ (8000710 <MX_TIM14_Init+0x90>)
 8000696:	4a1f      	ldr	r2, [pc, #124]	@ (8000714 <MX_TIM14_Init+0x94>)
 8000698:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 48-1;
 800069a:	4b1d      	ldr	r3, [pc, #116]	@ (8000710 <MX_TIM14_Init+0x90>)
 800069c:	222f      	movs	r2, #47	@ 0x2f
 800069e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000710 <MX_TIM14_Init+0x90>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000;
 80006a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000710 <MX_TIM14_Init+0x90>)
 80006a8:	22fa      	movs	r2, #250	@ 0xfa
 80006aa:	0092      	lsls	r2, r2, #2
 80006ac:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ae:	4b18      	ldr	r3, [pc, #96]	@ (8000710 <MX_TIM14_Init+0x90>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b4:	4b16      	ldr	r3, [pc, #88]	@ (8000710 <MX_TIM14_Init+0x90>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80006ba:	4b15      	ldr	r3, [pc, #84]	@ (8000710 <MX_TIM14_Init+0x90>)
 80006bc:	0018      	movs	r0, r3
 80006be:	f001 ffd5 	bl	800266c <HAL_TIM_Base_Init>
 80006c2:	1e03      	subs	r3, r0, #0
 80006c4:	d001      	beq.n	80006ca <MX_TIM14_Init+0x4a>
  {
    Error_Handler();
 80006c6:	f000 f8b1 	bl	800082c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 80006ca:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <MX_TIM14_Init+0x90>)
 80006cc:	0018      	movs	r0, r3
 80006ce:	f002 f825 	bl	800271c <HAL_TIM_OC_Init>
 80006d2:	1e03      	subs	r3, r0, #0
 80006d4:	d001      	beq.n	80006da <MX_TIM14_Init+0x5a>
  {
    Error_Handler();
 80006d6:	f000 f8a9 	bl	800082c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	2200      	movs	r2, #0
 80006e4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006f2:	1d39      	adds	r1, r7, #4
 80006f4:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <MX_TIM14_Init+0x90>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	0018      	movs	r0, r3
 80006fa:	f002 faa1 	bl	8002c40 <HAL_TIM_OC_ConfigChannel>
 80006fe:	1e03      	subs	r3, r0, #0
 8000700:	d001      	beq.n	8000706 <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 8000702:	f000 f893 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000706:	46c0      	nop			@ (mov r8, r8)
 8000708:	46bd      	mov	sp, r7
 800070a:	b008      	add	sp, #32
 800070c:	bd80      	pop	{r7, pc}
 800070e:	46c0      	nop			@ (mov r8, r8)
 8000710:	2000012c 	.word	0x2000012c
 8000714:	40002000 	.word	0x40002000

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b08b      	sub	sp, #44	@ 0x2c
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	2414      	movs	r4, #20
 8000720:	193b      	adds	r3, r7, r4
 8000722:	0018      	movs	r0, r3
 8000724:	2314      	movs	r3, #20
 8000726:	001a      	movs	r2, r3
 8000728:	2100      	movs	r1, #0
 800072a:	f003 f85d 	bl	80037e8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	4b3b      	ldr	r3, [pc, #236]	@ (800081c <MX_GPIO_Init+0x104>)
 8000730:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000732:	4b3a      	ldr	r3, [pc, #232]	@ (800081c <MX_GPIO_Init+0x104>)
 8000734:	2102      	movs	r1, #2
 8000736:	430a      	orrs	r2, r1
 8000738:	635a      	str	r2, [r3, #52]	@ 0x34
 800073a:	4b38      	ldr	r3, [pc, #224]	@ (800081c <MX_GPIO_Init+0x104>)
 800073c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800073e:	2202      	movs	r2, #2
 8000740:	4013      	ands	r3, r2
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000746:	4b35      	ldr	r3, [pc, #212]	@ (800081c <MX_GPIO_Init+0x104>)
 8000748:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800074a:	4b34      	ldr	r3, [pc, #208]	@ (800081c <MX_GPIO_Init+0x104>)
 800074c:	2104      	movs	r1, #4
 800074e:	430a      	orrs	r2, r1
 8000750:	635a      	str	r2, [r3, #52]	@ 0x34
 8000752:	4b32      	ldr	r3, [pc, #200]	@ (800081c <MX_GPIO_Init+0x104>)
 8000754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000756:	2204      	movs	r2, #4
 8000758:	4013      	ands	r3, r2
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800075e:	4b2f      	ldr	r3, [pc, #188]	@ (800081c <MX_GPIO_Init+0x104>)
 8000760:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000762:	4b2e      	ldr	r3, [pc, #184]	@ (800081c <MX_GPIO_Init+0x104>)
 8000764:	2120      	movs	r1, #32
 8000766:	430a      	orrs	r2, r1
 8000768:	635a      	str	r2, [r3, #52]	@ 0x34
 800076a:	4b2c      	ldr	r3, [pc, #176]	@ (800081c <MX_GPIO_Init+0x104>)
 800076c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800076e:	2220      	movs	r2, #32
 8000770:	4013      	ands	r3, r2
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b29      	ldr	r3, [pc, #164]	@ (800081c <MX_GPIO_Init+0x104>)
 8000778:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800077a:	4b28      	ldr	r3, [pc, #160]	@ (800081c <MX_GPIO_Init+0x104>)
 800077c:	2101      	movs	r1, #1
 800077e:	430a      	orrs	r2, r1
 8000780:	635a      	str	r2, [r3, #52]	@ 0x34
 8000782:	4b26      	ldr	r3, [pc, #152]	@ (800081c <MX_GPIO_Init+0x104>)
 8000784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000786:	2201      	movs	r2, #1
 8000788:	4013      	ands	r3, r2
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800078e:	23c0      	movs	r3, #192	@ 0xc0
 8000790:	021b      	lsls	r3, r3, #8
 8000792:	4823      	ldr	r0, [pc, #140]	@ (8000820 <MX_GPIO_Init+0x108>)
 8000794:	2200      	movs	r2, #0
 8000796:	0019      	movs	r1, r3
 8000798:	f001 f996 	bl	8001ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800079c:	193b      	adds	r3, r7, r4
 800079e:	22c0      	movs	r2, #192	@ 0xc0
 80007a0:	0212      	lsls	r2, r2, #8
 80007a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	193b      	adds	r3, r7, r4
 80007a6:	2201      	movs	r2, #1
 80007a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	193b      	adds	r3, r7, r4
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	193b      	adds	r3, r7, r4
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b6:	193b      	adds	r3, r7, r4
 80007b8:	4a19      	ldr	r2, [pc, #100]	@ (8000820 <MX_GPIO_Init+0x108>)
 80007ba:	0019      	movs	r1, r3
 80007bc:	0010      	movs	r0, r2
 80007be:	f001 f819 	bl	80017f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007c2:	193b      	adds	r3, r7, r4
 80007c4:	2204      	movs	r2, #4
 80007c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c8:	193b      	adds	r3, r7, r4
 80007ca:	2203      	movs	r2, #3
 80007cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	193b      	adds	r3, r7, r4
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007d4:	193b      	adds	r3, r7, r4
 80007d6:	4a13      	ldr	r2, [pc, #76]	@ (8000824 <MX_GPIO_Init+0x10c>)
 80007d8:	0019      	movs	r1, r3
 80007da:	0010      	movs	r0, r2
 80007dc:	f001 f80a 	bl	80017f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80007e0:	0021      	movs	r1, r4
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	22f0      	movs	r2, #240	@ 0xf0
 80007e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000828 <MX_GPIO_Init+0x110>)
 80007ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	2201      	movs	r2, #1
 80007f2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f4:	187a      	adds	r2, r7, r1
 80007f6:	23a0      	movs	r3, #160	@ 0xa0
 80007f8:	05db      	lsls	r3, r3, #23
 80007fa:	0011      	movs	r1, r2
 80007fc:	0018      	movs	r0, r3
 80007fe:	f000 fff9 	bl	80017f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	2100      	movs	r1, #0
 8000806:	2007      	movs	r0, #7
 8000808:	f000 ffc2 	bl	8001790 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800080c:	2007      	movs	r0, #7
 800080e:	f000 ffd4 	bl	80017ba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000812:	46c0      	nop			@ (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	b00b      	add	sp, #44	@ 0x2c
 8000818:	bd90      	pop	{r4, r7, pc}
 800081a:	46c0      	nop			@ (mov r8, r8)
 800081c:	40021000 	.word	0x40021000
 8000820:	50000800 	.word	0x50000800
 8000824:	50001400 	.word	0x50001400
 8000828:	10310000 	.word	0x10310000

0800082c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000830:	b672      	cpsid	i
}
 8000832:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000834:	46c0      	nop			@ (mov r8, r8)
 8000836:	e7fd      	b.n	8000834 <Error_Handler+0x8>

08000838 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083e:	4b0f      	ldr	r3, [pc, #60]	@ (800087c <HAL_MspInit+0x44>)
 8000840:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000842:	4b0e      	ldr	r3, [pc, #56]	@ (800087c <HAL_MspInit+0x44>)
 8000844:	2101      	movs	r1, #1
 8000846:	430a      	orrs	r2, r1
 8000848:	641a      	str	r2, [r3, #64]	@ 0x40
 800084a:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <HAL_MspInit+0x44>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084e:	2201      	movs	r2, #1
 8000850:	4013      	ands	r3, r2
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	4b09      	ldr	r3, [pc, #36]	@ (800087c <HAL_MspInit+0x44>)
 8000858:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800085a:	4b08      	ldr	r3, [pc, #32]	@ (800087c <HAL_MspInit+0x44>)
 800085c:	2180      	movs	r1, #128	@ 0x80
 800085e:	0549      	lsls	r1, r1, #21
 8000860:	430a      	orrs	r2, r1
 8000862:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000864:	4b05      	ldr	r3, [pc, #20]	@ (800087c <HAL_MspInit+0x44>)
 8000866:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000868:	2380      	movs	r3, #128	@ 0x80
 800086a:	055b      	lsls	r3, r3, #21
 800086c:	4013      	ands	r3, r2
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000872:	46c0      	nop			@ (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	b002      	add	sp, #8
 8000878:	bd80      	pop	{r7, pc}
 800087a:	46c0      	nop			@ (mov r8, r8)
 800087c:	40021000 	.word	0x40021000

08000880 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000880:	b590      	push	{r4, r7, lr}
 8000882:	b091      	sub	sp, #68	@ 0x44
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	232c      	movs	r3, #44	@ 0x2c
 800088a:	18fb      	adds	r3, r7, r3
 800088c:	0018      	movs	r0, r3
 800088e:	2314      	movs	r3, #20
 8000890:	001a      	movs	r2, r3
 8000892:	2100      	movs	r1, #0
 8000894:	f002 ffa8 	bl	80037e8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000898:	2410      	movs	r4, #16
 800089a:	193b      	adds	r3, r7, r4
 800089c:	0018      	movs	r0, r3
 800089e:	231c      	movs	r3, #28
 80008a0:	001a      	movs	r2, r3
 80008a2:	2100      	movs	r1, #0
 80008a4:	f002 ffa0 	bl	80037e8 <memset>
  if(hadc->Instance==ADC1)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a20      	ldr	r2, [pc, #128]	@ (8000930 <HAL_ADC_MspInit+0xb0>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d13a      	bne.n	8000928 <HAL_ADC_MspInit+0xa8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008b2:	193b      	adds	r3, r7, r4
 80008b4:	2280      	movs	r2, #128	@ 0x80
 80008b6:	01d2      	lsls	r2, r2, #7
 80008b8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80008ba:	193b      	adds	r3, r7, r4
 80008bc:	2200      	movs	r2, #0
 80008be:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008c0:	193b      	adds	r3, r7, r4
 80008c2:	0018      	movs	r0, r3
 80008c4:	f001 fde4 	bl	8002490 <HAL_RCCEx_PeriphCLKConfig>
 80008c8:	1e03      	subs	r3, r0, #0
 80008ca:	d001      	beq.n	80008d0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80008cc:	f7ff ffae 	bl	800082c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80008d0:	4b18      	ldr	r3, [pc, #96]	@ (8000934 <HAL_ADC_MspInit+0xb4>)
 80008d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008d4:	4b17      	ldr	r3, [pc, #92]	@ (8000934 <HAL_ADC_MspInit+0xb4>)
 80008d6:	2180      	movs	r1, #128	@ 0x80
 80008d8:	0349      	lsls	r1, r1, #13
 80008da:	430a      	orrs	r2, r1
 80008dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80008de:	4b15      	ldr	r3, [pc, #84]	@ (8000934 <HAL_ADC_MspInit+0xb4>)
 80008e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008e2:	2380      	movs	r3, #128	@ 0x80
 80008e4:	035b      	lsls	r3, r3, #13
 80008e6:	4013      	ands	r3, r2
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ec:	4b11      	ldr	r3, [pc, #68]	@ (8000934 <HAL_ADC_MspInit+0xb4>)
 80008ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008f0:	4b10      	ldr	r3, [pc, #64]	@ (8000934 <HAL_ADC_MspInit+0xb4>)
 80008f2:	2101      	movs	r1, #1
 80008f4:	430a      	orrs	r2, r1
 80008f6:	635a      	str	r2, [r3, #52]	@ 0x34
 80008f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000934 <HAL_ADC_MspInit+0xb4>)
 80008fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008fc:	2201      	movs	r2, #1
 80008fe:	4013      	ands	r3, r2
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA8     ------> ADC1_IN8
    PA11 [PA9]     ------> ADC1_IN11
    PA12 [PA10]     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000904:	212c      	movs	r1, #44	@ 0x2c
 8000906:	187b      	adds	r3, r7, r1
 8000908:	22c8      	movs	r2, #200	@ 0xc8
 800090a:	0152      	lsls	r2, r2, #5
 800090c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2203      	movs	r2, #3
 8000912:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	187b      	adds	r3, r7, r1
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091a:	187a      	adds	r2, r7, r1
 800091c:	23a0      	movs	r3, #160	@ 0xa0
 800091e:	05db      	lsls	r3, r3, #23
 8000920:	0011      	movs	r1, r2
 8000922:	0018      	movs	r0, r3
 8000924:	f000 ff66 	bl	80017f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000928:	46c0      	nop			@ (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	b011      	add	sp, #68	@ 0x44
 800092e:	bd90      	pop	{r4, r7, pc}
 8000930:	40012400 	.word	0x40012400
 8000934:	40021000 	.word	0x40021000

08000938 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000938:	b590      	push	{r4, r7, lr}
 800093a:	b091      	sub	sp, #68	@ 0x44
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	232c      	movs	r3, #44	@ 0x2c
 8000942:	18fb      	adds	r3, r7, r3
 8000944:	0018      	movs	r0, r3
 8000946:	2314      	movs	r3, #20
 8000948:	001a      	movs	r2, r3
 800094a:	2100      	movs	r1, #0
 800094c:	f002 ff4c 	bl	80037e8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000950:	2410      	movs	r4, #16
 8000952:	193b      	adds	r3, r7, r4
 8000954:	0018      	movs	r0, r3
 8000956:	231c      	movs	r3, #28
 8000958:	001a      	movs	r2, r3
 800095a:	2100      	movs	r1, #0
 800095c:	f002 ff44 	bl	80037e8 <memset>
  if(hi2c->Instance==I2C1)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a22      	ldr	r2, [pc, #136]	@ (80009f0 <HAL_I2C_MspInit+0xb8>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d13d      	bne.n	80009e6 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800096a:	193b      	adds	r3, r7, r4
 800096c:	2240      	movs	r2, #64	@ 0x40
 800096e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000970:	193b      	adds	r3, r7, r4
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000976:	193b      	adds	r3, r7, r4
 8000978:	0018      	movs	r0, r3
 800097a:	f001 fd89 	bl	8002490 <HAL_RCCEx_PeriphCLKConfig>
 800097e:	1e03      	subs	r3, r0, #0
 8000980:	d001      	beq.n	8000986 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000982:	f7ff ff53 	bl	800082c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000986:	4b1b      	ldr	r3, [pc, #108]	@ (80009f4 <HAL_I2C_MspInit+0xbc>)
 8000988:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800098a:	4b1a      	ldr	r3, [pc, #104]	@ (80009f4 <HAL_I2C_MspInit+0xbc>)
 800098c:	2102      	movs	r1, #2
 800098e:	430a      	orrs	r2, r1
 8000990:	635a      	str	r2, [r3, #52]	@ 0x34
 8000992:	4b18      	ldr	r3, [pc, #96]	@ (80009f4 <HAL_I2C_MspInit+0xbc>)
 8000994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000996:	2202      	movs	r2, #2
 8000998:	4013      	ands	r3, r2
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800099e:	212c      	movs	r1, #44	@ 0x2c
 80009a0:	187b      	adds	r3, r7, r1
 80009a2:	22c0      	movs	r2, #192	@ 0xc0
 80009a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	2212      	movs	r2, #18
 80009aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	2201      	movs	r2, #1
 80009b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	2200      	movs	r2, #0
 80009b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	2206      	movs	r2, #6
 80009bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	4a0d      	ldr	r2, [pc, #52]	@ (80009f8 <HAL_I2C_MspInit+0xc0>)
 80009c2:	0019      	movs	r1, r3
 80009c4:	0010      	movs	r0, r2
 80009c6:	f000 ff15 	bl	80017f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009ca:	4b0a      	ldr	r3, [pc, #40]	@ (80009f4 <HAL_I2C_MspInit+0xbc>)
 80009cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009ce:	4b09      	ldr	r3, [pc, #36]	@ (80009f4 <HAL_I2C_MspInit+0xbc>)
 80009d0:	2180      	movs	r1, #128	@ 0x80
 80009d2:	0389      	lsls	r1, r1, #14
 80009d4:	430a      	orrs	r2, r1
 80009d6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009d8:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <HAL_I2C_MspInit+0xbc>)
 80009da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009dc:	2380      	movs	r3, #128	@ 0x80
 80009de:	039b      	lsls	r3, r3, #14
 80009e0:	4013      	ands	r3, r2
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009e6:	46c0      	nop			@ (mov r8, r8)
 80009e8:	46bd      	mov	sp, r7
 80009ea:	b011      	add	sp, #68	@ 0x44
 80009ec:	bd90      	pop	{r4, r7, pc}
 80009ee:	46c0      	nop			@ (mov r8, r8)
 80009f0:	40005400 	.word	0x40005400
 80009f4:	40021000 	.word	0x40021000
 80009f8:	50000400 	.word	0x50000400

080009fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a0e      	ldr	r2, [pc, #56]	@ (8000a44 <HAL_TIM_PWM_MspInit+0x48>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d115      	bne.n	8000a3a <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a48 <HAL_TIM_PWM_MspInit+0x4c>)
 8000a10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a12:	4b0d      	ldr	r3, [pc, #52]	@ (8000a48 <HAL_TIM_PWM_MspInit+0x4c>)
 8000a14:	2180      	movs	r1, #128	@ 0x80
 8000a16:	0109      	lsls	r1, r1, #4
 8000a18:	430a      	orrs	r2, r1
 8000a1a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a48 <HAL_TIM_PWM_MspInit+0x4c>)
 8000a1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a20:	2380      	movs	r3, #128	@ 0x80
 8000a22:	011b      	lsls	r3, r3, #4
 8000a24:	4013      	ands	r3, r2
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	200e      	movs	r0, #14
 8000a30:	f000 feae 	bl	8001790 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000a34:	200e      	movs	r0, #14
 8000a36:	f000 fec0 	bl	80017ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a3a:	46c0      	nop			@ (mov r8, r8)
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	b004      	add	sp, #16
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			@ (mov r8, r8)
 8000a44:	40012c00 	.word	0x40012c00
 8000a48:	40021000 	.word	0x40021000

08000a4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0e      	ldr	r2, [pc, #56]	@ (8000a94 <HAL_TIM_Base_MspInit+0x48>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d115      	bne.n	8000a8a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <HAL_TIM_Base_MspInit+0x4c>)
 8000a60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a62:	4b0d      	ldr	r3, [pc, #52]	@ (8000a98 <HAL_TIM_Base_MspInit+0x4c>)
 8000a64:	2180      	movs	r1, #128	@ 0x80
 8000a66:	0209      	lsls	r1, r1, #8
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a98 <HAL_TIM_Base_MspInit+0x4c>)
 8000a6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a70:	2380      	movs	r3, #128	@ 0x80
 8000a72:	021b      	lsls	r3, r3, #8
 8000a74:	4013      	ands	r3, r2
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2013      	movs	r0, #19
 8000a80:	f000 fe86 	bl	8001790 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000a84:	2013      	movs	r0, #19
 8000a86:	f000 fe98 	bl	80017ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000a8a:	46c0      	nop			@ (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	b004      	add	sp, #16
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	46c0      	nop			@ (mov r8, r8)
 8000a94:	40002000 	.word	0x40002000
 8000a98:	40021000 	.word	0x40021000

08000a9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a9c:	b590      	push	{r4, r7, lr}
 8000a9e:	b089      	sub	sp, #36	@ 0x24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	240c      	movs	r4, #12
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	2314      	movs	r3, #20
 8000aac:	001a      	movs	r2, r3
 8000aae:	2100      	movs	r1, #0
 8000ab0:	f002 fe9a 	bl	80037e8 <memset>
  if(htim->Instance==TIM1)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a14      	ldr	r2, [pc, #80]	@ (8000b0c <HAL_TIM_MspPostInit+0x70>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d122      	bne.n	8000b04 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	4b14      	ldr	r3, [pc, #80]	@ (8000b10 <HAL_TIM_MspPostInit+0x74>)
 8000ac0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ac2:	4b13      	ldr	r3, [pc, #76]	@ (8000b10 <HAL_TIM_MspPostInit+0x74>)
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	430a      	orrs	r2, r1
 8000ac8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000aca:	4b11      	ldr	r3, [pc, #68]	@ (8000b10 <HAL_TIM_MspPostInit+0x74>)
 8000acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ace:	2201      	movs	r2, #1
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> TIM1_CH1
    PA1     ------> TIM1_CH2
    PA2     ------> TIM1_CH3
    PA3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000ad6:	0021      	movs	r1, r4
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	220f      	movs	r2, #15
 8000adc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	2202      	movs	r2, #2
 8000ae2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	2200      	movs	r2, #0
 8000aee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM1;
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	2205      	movs	r2, #5
 8000af4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af6:	187a      	adds	r2, r7, r1
 8000af8:	23a0      	movs	r3, #160	@ 0xa0
 8000afa:	05db      	lsls	r3, r3, #23
 8000afc:	0011      	movs	r1, r2
 8000afe:	0018      	movs	r0, r3
 8000b00:	f000 fe78 	bl	80017f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b04:	46c0      	nop			@ (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	b009      	add	sp, #36	@ 0x24
 8000b0a:	bd90      	pop	{r4, r7, pc}
 8000b0c:	40012c00 	.word	0x40012c00
 8000b10:	40021000 	.word	0x40021000

08000b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b18:	46c0      	nop			@ (mov r8, r8)
 8000b1a:	e7fd      	b.n	8000b18 <NMI_Handler+0x4>

08000b1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b20:	46c0      	nop			@ (mov r8, r8)
 8000b22:	e7fd      	b.n	8000b20 <HardFault_Handler+0x4>

08000b24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b28:	46c0      	nop			@ (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b32:	46c0      	nop			@ (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b3c:	f000 f8c2 	bl	8000cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b40:	46c0      	nop			@ (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000b4a:	2010      	movs	r0, #16
 8000b4c:	f000 fff4 	bl	8001b38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000b50:	2020      	movs	r0, #32
 8000b52:	f000 fff1 	bl	8001b38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000b56:	2040      	movs	r0, #64	@ 0x40
 8000b58:	f000 ffee 	bl	8001b38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000b5c:	2080      	movs	r0, #128	@ 0x80
 8000b5e:	f000 ffeb 	bl	8001b38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b6c:	4b03      	ldr	r3, [pc, #12]	@ (8000b7c <TIM1_CC_IRQHandler+0x14>)
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f001 ff64 	bl	8002a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000b74:	46c0      	nop			@ (mov r8, r8)
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	46c0      	nop			@ (mov r8, r8)
 8000b7c:	200000e0 	.word	0x200000e0

08000b80 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000b84:	4b03      	ldr	r3, [pc, #12]	@ (8000b94 <TIM14_IRQHandler+0x14>)
 8000b86:	0018      	movs	r0, r3
 8000b88:	f001 ff58 	bl	8002a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000b8c:	46c0      	nop			@ (mov r8, r8)
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	46c0      	nop			@ (mov r8, r8)
 8000b94:	2000012c 	.word	0x2000012c

08000b98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b9c:	4b03      	ldr	r3, [pc, #12]	@ (8000bac <SystemInit+0x14>)
 8000b9e:	2280      	movs	r2, #128	@ 0x80
 8000ba0:	0512      	lsls	r2, r2, #20
 8000ba2:	609a      	str	r2, [r3, #8]
#endif
}
 8000ba4:	46c0      	nop			@ (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			@ (mov r8, r8)
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bb0:	480d      	ldr	r0, [pc, #52]	@ (8000be8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bb2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bb4:	f7ff fff0 	bl	8000b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000bb8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000bba:	e003      	b.n	8000bc4 <LoopCopyDataInit>

08000bbc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000bec <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000bbe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000bc0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000bc2:	3104      	adds	r1, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000bc4:	480a      	ldr	r0, [pc, #40]	@ (8000bf0 <LoopForever+0xa>)
  ldr r3, =_edata
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf4 <LoopForever+0xe>)
  adds r2, r0, r1
 8000bc8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000bca:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000bcc:	d3f6      	bcc.n	8000bbc <CopyDataInit>
  ldr r2, =_sbss
 8000bce:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf8 <LoopForever+0x12>)
  b LoopFillZerobss
 8000bd0:	e002      	b.n	8000bd8 <LoopFillZerobss>

08000bd2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  str  r3, [r2]
 8000bd4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd6:	3204      	adds	r2, #4

08000bd8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000bd8:	4b08      	ldr	r3, [pc, #32]	@ (8000bfc <LoopForever+0x16>)
  cmp r2, r3
 8000bda:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000bdc:	d3f9      	bcc.n	8000bd2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000bde:	f002 fe0b 	bl	80037f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000be2:	f7ff fb1d 	bl	8000220 <main>

08000be6 <LoopForever>:

LoopForever:
    b LoopForever
 8000be6:	e7fe      	b.n	8000be6 <LoopForever>
  ldr   r0, =_estack
 8000be8:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000bec:	08003948 	.word	0x08003948
  ldr r0, =_sdata
 8000bf0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000bf4:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000bf8:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000bfc:	2000017c 	.word	0x2000017c

08000c00 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c00:	e7fe      	b.n	8000c00 <ADC1_IRQHandler>

08000c02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c08:	1dfb      	adds	r3, r7, #7
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c0e:	2003      	movs	r0, #3
 8000c10:	f000 f80e 	bl	8000c30 <HAL_InitTick>
 8000c14:	1e03      	subs	r3, r0, #0
 8000c16:	d003      	beq.n	8000c20 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000c18:	1dfb      	adds	r3, r7, #7
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	701a      	strb	r2, [r3, #0]
 8000c1e:	e001      	b.n	8000c24 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c20:	f7ff fe0a 	bl	8000838 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c24:	1dfb      	adds	r3, r7, #7
 8000c26:	781b      	ldrb	r3, [r3, #0]
}
 8000c28:	0018      	movs	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b002      	add	sp, #8
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c38:	230f      	movs	r3, #15
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000c40:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb8 <HAL_InitTick+0x88>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d02b      	beq.n	8000ca0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000c48:	4b1c      	ldr	r3, [pc, #112]	@ (8000cbc <HAL_InitTick+0x8c>)
 8000c4a:	681c      	ldr	r4, [r3, #0]
 8000c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb8 <HAL_InitTick+0x88>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	0019      	movs	r1, r3
 8000c52:	23fa      	movs	r3, #250	@ 0xfa
 8000c54:	0098      	lsls	r0, r3, #2
 8000c56:	f7ff fa57 	bl	8000108 <__udivsi3>
 8000c5a:	0003      	movs	r3, r0
 8000c5c:	0019      	movs	r1, r3
 8000c5e:	0020      	movs	r0, r4
 8000c60:	f7ff fa52 	bl	8000108 <__udivsi3>
 8000c64:	0003      	movs	r3, r0
 8000c66:	0018      	movs	r0, r3
 8000c68:	f000 fdb7 	bl	80017da <HAL_SYSTICK_Config>
 8000c6c:	1e03      	subs	r3, r0, #0
 8000c6e:	d112      	bne.n	8000c96 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2b03      	cmp	r3, #3
 8000c74:	d80a      	bhi.n	8000c8c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	2301      	movs	r3, #1
 8000c7a:	425b      	negs	r3, r3
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f000 fd86 	bl	8001790 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c84:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc0 <HAL_InitTick+0x90>)
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	e00d      	b.n	8000ca8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c8c:	230f      	movs	r3, #15
 8000c8e:	18fb      	adds	r3, r7, r3
 8000c90:	2201      	movs	r2, #1
 8000c92:	701a      	strb	r2, [r3, #0]
 8000c94:	e008      	b.n	8000ca8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c96:	230f      	movs	r3, #15
 8000c98:	18fb      	adds	r3, r7, r3
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	701a      	strb	r2, [r3, #0]
 8000c9e:	e003      	b.n	8000ca8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ca0:	230f      	movs	r3, #15
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ca8:	230f      	movs	r3, #15
 8000caa:	18fb      	adds	r3, r7, r3
 8000cac:	781b      	ldrb	r3, [r3, #0]
}
 8000cae:	0018      	movs	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b005      	add	sp, #20
 8000cb4:	bd90      	pop	{r4, r7, pc}
 8000cb6:	46c0      	nop			@ (mov r8, r8)
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	20000004 	.word	0x20000004

08000cc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cc8:	4b05      	ldr	r3, [pc, #20]	@ (8000ce0 <HAL_IncTick+0x1c>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	001a      	movs	r2, r3
 8000cce:	4b05      	ldr	r3, [pc, #20]	@ (8000ce4 <HAL_IncTick+0x20>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	18d2      	adds	r2, r2, r3
 8000cd4:	4b03      	ldr	r3, [pc, #12]	@ (8000ce4 <HAL_IncTick+0x20>)
 8000cd6:	601a      	str	r2, [r3, #0]
}
 8000cd8:	46c0      	nop			@ (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			@ (mov r8, r8)
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	20000178 	.word	0x20000178

08000ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  return uwTick;
 8000cec:	4b02      	ldr	r3, [pc, #8]	@ (8000cf8 <HAL_GetTick+0x10>)
 8000cee:	681b      	ldr	r3, [r3, #0]
}
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			@ (mov r8, r8)
 8000cf8:	20000178 	.word	0x20000178

08000cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d04:	f7ff fff0 	bl	8000ce8 <HAL_GetTick>
 8000d08:	0003      	movs	r3, r0
 8000d0a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	3301      	adds	r3, #1
 8000d14:	d005      	beq.n	8000d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d16:	4b0a      	ldr	r3, [pc, #40]	@ (8000d40 <HAL_Delay+0x44>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	001a      	movs	r2, r3
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	189b      	adds	r3, r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d22:	46c0      	nop			@ (mov r8, r8)
 8000d24:	f7ff ffe0 	bl	8000ce8 <HAL_GetTick>
 8000d28:	0002      	movs	r2, r0
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d8f7      	bhi.n	8000d24 <HAL_Delay+0x28>
  {
  }
}
 8000d34:	46c0      	nop			@ (mov r8, r8)
 8000d36:	46c0      	nop			@ (mov r8, r8)
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	b004      	add	sp, #16
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	46c0      	nop			@ (mov r8, r8)
 8000d40:	20000008 	.word	0x20000008

08000d44 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a05      	ldr	r2, [pc, #20]	@ (8000d68 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000d54:	401a      	ands	r2, r3
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	431a      	orrs	r2, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	601a      	str	r2, [r3, #0]
}
 8000d5e:	46c0      	nop			@ (mov r8, r8)
 8000d60:	46bd      	mov	sp, r7
 8000d62:	b002      	add	sp, #8
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	46c0      	nop			@ (mov r8, r8)
 8000d68:	ff3fffff 	.word	0xff3fffff

08000d6c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	23c0      	movs	r3, #192	@ 0xc0
 8000d7a:	041b      	lsls	r3, r3, #16
 8000d7c:	4013      	ands	r3, r2
}
 8000d7e:	0018      	movs	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b002      	add	sp, #8
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b084      	sub	sp, #16
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	60f8      	str	r0, [r7, #12]
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	695b      	ldr	r3, [r3, #20]
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	2104      	movs	r1, #4
 8000d9a:	400a      	ands	r2, r1
 8000d9c:	2107      	movs	r1, #7
 8000d9e:	4091      	lsls	r1, r2
 8000da0:	000a      	movs	r2, r1
 8000da2:	43d2      	mvns	r2, r2
 8000da4:	401a      	ands	r2, r3
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	2104      	movs	r1, #4
 8000daa:	400b      	ands	r3, r1
 8000dac:	6879      	ldr	r1, [r7, #4]
 8000dae:	4099      	lsls	r1, r3
 8000db0:	000b      	movs	r3, r1
 8000db2:	431a      	orrs	r2, r3
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000db8:	46c0      	nop			@ (mov r8, r8)
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	b004      	add	sp, #16
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	683a      	ldr	r2, [r7, #0]
 8000dd0:	2104      	movs	r1, #4
 8000dd2:	400a      	ands	r2, r1
 8000dd4:	2107      	movs	r1, #7
 8000dd6:	4091      	lsls	r1, r2
 8000dd8:	000a      	movs	r2, r1
 8000dda:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	2104      	movs	r1, #4
 8000de0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000de2:	40da      	lsrs	r2, r3
 8000de4:	0013      	movs	r3, r2
}
 8000de6:	0018      	movs	r0, r3
 8000de8:	46bd      	mov	sp, r7
 8000dea:	b002      	add	sp, #8
 8000dec:	bd80      	pop	{r7, pc}

08000dee <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b084      	sub	sp, #16
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	60f8      	str	r0, [r7, #12]
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	211f      	movs	r1, #31
 8000e02:	400a      	ands	r2, r1
 8000e04:	210f      	movs	r1, #15
 8000e06:	4091      	lsls	r1, r2
 8000e08:	000a      	movs	r2, r1
 8000e0a:	43d2      	mvns	r2, r2
 8000e0c:	401a      	ands	r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	0e9b      	lsrs	r3, r3, #26
 8000e12:	210f      	movs	r1, #15
 8000e14:	4019      	ands	r1, r3
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	201f      	movs	r0, #31
 8000e1a:	4003      	ands	r3, r0
 8000e1c:	4099      	lsls	r1, r3
 8000e1e:	000b      	movs	r3, r1
 8000e20:	431a      	orrs	r2, r3
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e26:	46c0      	nop			@ (mov r8, r8)
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b004      	add	sp, #16
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
 8000e36:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	025b      	lsls	r3, r3, #9
 8000e40:	0a5b      	lsrs	r3, r3, #9
 8000e42:	431a      	orrs	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e48:	46c0      	nop			@ (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b002      	add	sp, #8
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e5e:	683a      	ldr	r2, [r7, #0]
 8000e60:	0252      	lsls	r2, r2, #9
 8000e62:	0a52      	lsrs	r2, r2, #9
 8000e64:	43d2      	mvns	r2, r2
 8000e66:	401a      	ands	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e6c:	46c0      	nop			@ (mov r8, r8)
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	b002      	add	sp, #8
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	695b      	ldr	r3, [r3, #20]
 8000e84:	68ba      	ldr	r2, [r7, #8]
 8000e86:	0212      	lsls	r2, r2, #8
 8000e88:	43d2      	mvns	r2, r2
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	021b      	lsls	r3, r3, #8
 8000e90:	6879      	ldr	r1, [r7, #4]
 8000e92:	400b      	ands	r3, r1
 8000e94:	4904      	ldr	r1, [pc, #16]	@ (8000ea8 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000e96:	400b      	ands	r3, r1
 8000e98:	431a      	orrs	r2, r3
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000e9e:	46c0      	nop			@ (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b004      	add	sp, #16
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	46c0      	nop			@ (mov r8, r8)
 8000ea8:	7fffff00 	.word	0x7fffff00

08000eac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	4a05      	ldr	r2, [pc, #20]	@ (8000ed0 <LL_ADC_EnableInternalRegulator+0x24>)
 8000eba:	4013      	ands	r3, r2
 8000ebc:	2280      	movs	r2, #128	@ 0x80
 8000ebe:	0552      	lsls	r2, r2, #21
 8000ec0:	431a      	orrs	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000ec6:	46c0      	nop			@ (mov r8, r8)
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b002      	add	sp, #8
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	46c0      	nop			@ (mov r8, r8)
 8000ed0:	6fffffe8 	.word	0x6fffffe8

08000ed4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689a      	ldr	r2, [r3, #8]
 8000ee0:	2380      	movs	r3, #128	@ 0x80
 8000ee2:	055b      	lsls	r3, r3, #21
 8000ee4:	401a      	ands	r2, r3
 8000ee6:	2380      	movs	r3, #128	@ 0x80
 8000ee8:	055b      	lsls	r3, r3, #21
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d101      	bne.n	8000ef2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e000      	b.n	8000ef4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	b002      	add	sp, #8
 8000efa:	bd80      	pop	{r7, pc}

08000efc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	2201      	movs	r2, #1
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d101      	bne.n	8000f14 <LL_ADC_IsEnabled+0x18>
 8000f10:	2301      	movs	r3, #1
 8000f12:	e000      	b.n	8000f16 <LL_ADC_IsEnabled+0x1a>
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	0018      	movs	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b002      	add	sp, #8
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	d101      	bne.n	8000f36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000f32:	2301      	movs	r3, #1
 8000f34:	e000      	b.n	8000f38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000f36:	2300      	movs	r3, #0
}
 8000f38:	0018      	movs	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	b002      	add	sp, #8
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f48:	231f      	movs	r3, #31
 8000f4a:	18fb      	adds	r3, r7, r3
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d101      	bne.n	8000f66 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e17e      	b.n	8001264 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d10a      	bne.n	8000f84 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	0018      	movs	r0, r3
 8000f72:	f7ff fc85 	bl	8000880 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2254      	movs	r2, #84	@ 0x54
 8000f80:	2100      	movs	r1, #0
 8000f82:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f7ff ffa3 	bl	8000ed4 <LL_ADC_IsInternalRegulatorEnabled>
 8000f8e:	1e03      	subs	r3, r0, #0
 8000f90:	d114      	bne.n	8000fbc <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	0018      	movs	r0, r3
 8000f98:	f7ff ff88 	bl	8000eac <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000f9c:	4bb3      	ldr	r3, [pc, #716]	@ (800126c <HAL_ADC_Init+0x32c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	49b3      	ldr	r1, [pc, #716]	@ (8001270 <HAL_ADC_Init+0x330>)
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f7ff f8b0 	bl	8000108 <__udivsi3>
 8000fa8:	0003      	movs	r3, r0
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000fae:	e002      	b.n	8000fb6 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d1f9      	bne.n	8000fb0 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f7ff ff87 	bl	8000ed4 <LL_ADC_IsInternalRegulatorEnabled>
 8000fc6:	1e03      	subs	r3, r0, #0
 8000fc8:	d10f      	bne.n	8000fea <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fce:	2210      	movs	r2, #16
 8000fd0:	431a      	orrs	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fda:	2201      	movs	r2, #1
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8000fe2:	231f      	movs	r3, #31
 8000fe4:	18fb      	adds	r3, r7, r3
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f7ff ff95 	bl	8000f1e <LL_ADC_REG_IsConversionOngoing>
 8000ff4:	0003      	movs	r3, r0
 8000ff6:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ffc:	2210      	movs	r2, #16
 8000ffe:	4013      	ands	r3, r2
 8001000:	d000      	beq.n	8001004 <HAL_ADC_Init+0xc4>
 8001002:	e122      	b.n	800124a <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d000      	beq.n	800100c <HAL_ADC_Init+0xcc>
 800100a:	e11e      	b.n	800124a <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001010:	4a98      	ldr	r2, [pc, #608]	@ (8001274 <HAL_ADC_Init+0x334>)
 8001012:	4013      	ands	r3, r2
 8001014:	2202      	movs	r2, #2
 8001016:	431a      	orrs	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	0018      	movs	r0, r3
 8001022:	f7ff ff6b 	bl	8000efc <LL_ADC_IsEnabled>
 8001026:	1e03      	subs	r3, r0, #0
 8001028:	d000      	beq.n	800102c <HAL_ADC_Init+0xec>
 800102a:	e0ad      	b.n	8001188 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	7e1b      	ldrb	r3, [r3, #24]
 8001034:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001036:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	7e5b      	ldrb	r3, [r3, #25]
 800103c:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800103e:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	7e9b      	ldrb	r3, [r3, #26]
 8001044:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001046:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104c:	2b00      	cmp	r3, #0
 800104e:	d002      	beq.n	8001056 <HAL_ADC_Init+0x116>
 8001050:	2380      	movs	r3, #128	@ 0x80
 8001052:	015b      	lsls	r3, r3, #5
 8001054:	e000      	b.n	8001058 <HAL_ADC_Init+0x118>
 8001056:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001058:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800105e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	691b      	ldr	r3, [r3, #16]
 8001064:	2b00      	cmp	r3, #0
 8001066:	da04      	bge.n	8001072 <HAL_ADC_Init+0x132>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	691b      	ldr	r3, [r3, #16]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	085b      	lsrs	r3, r3, #1
 8001070:	e001      	b.n	8001076 <HAL_ADC_Init+0x136>
 8001072:	2380      	movs	r3, #128	@ 0x80
 8001074:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001076:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	212c      	movs	r1, #44	@ 0x2c
 800107c:	5c5b      	ldrb	r3, [r3, r1]
 800107e:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001080:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2220      	movs	r2, #32
 800108c:	5c9b      	ldrb	r3, [r3, r2]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d115      	bne.n	80010be <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	7e9b      	ldrb	r3, [r3, #26]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d105      	bne.n	80010a6 <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	2280      	movs	r2, #128	@ 0x80
 800109e:	0252      	lsls	r2, r2, #9
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
 80010a4:	e00b      	b.n	80010be <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010aa:	2220      	movs	r2, #32
 80010ac:	431a      	orrs	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010b6:	2201      	movs	r2, #1
 80010b8:	431a      	orrs	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d00a      	beq.n	80010dc <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010ca:	23e0      	movs	r3, #224	@ 0xe0
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80010d4:	4313      	orrs	r3, r2
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	4a65      	ldr	r2, [pc, #404]	@ (8001278 <HAL_ADC_Init+0x338>)
 80010e4:	4013      	ands	r3, r2
 80010e6:	0019      	movs	r1, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	430a      	orrs	r2, r1
 80010f0:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	0f9b      	lsrs	r3, r3, #30
 80010f8:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80010fe:	4313      	orrs	r3, r2
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	4313      	orrs	r3, r2
 8001104:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	223c      	movs	r2, #60	@ 0x3c
 800110a:	5c9b      	ldrb	r3, [r3, r2]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d111      	bne.n	8001134 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	0f9b      	lsrs	r3, r3, #30
 8001116:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800111c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001122:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001128:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	4313      	orrs	r3, r2
 800112e:	2201      	movs	r2, #1
 8001130:	4313      	orrs	r3, r2
 8001132:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	4a50      	ldr	r2, [pc, #320]	@ (800127c <HAL_ADC_Init+0x33c>)
 800113c:	4013      	ands	r3, r2
 800113e:	0019      	movs	r1, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	430a      	orrs	r2, r1
 8001148:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685a      	ldr	r2, [r3, #4]
 800114e:	23c0      	movs	r3, #192	@ 0xc0
 8001150:	061b      	lsls	r3, r3, #24
 8001152:	429a      	cmp	r2, r3
 8001154:	d018      	beq.n	8001188 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800115a:	2380      	movs	r3, #128	@ 0x80
 800115c:	05db      	lsls	r3, r3, #23
 800115e:	429a      	cmp	r2, r3
 8001160:	d012      	beq.n	8001188 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001166:	2380      	movs	r3, #128	@ 0x80
 8001168:	061b      	lsls	r3, r3, #24
 800116a:	429a      	cmp	r2, r3
 800116c:	d00c      	beq.n	8001188 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800116e:	4b44      	ldr	r3, [pc, #272]	@ (8001280 <HAL_ADC_Init+0x340>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a44      	ldr	r2, [pc, #272]	@ (8001284 <HAL_ADC_Init+0x344>)
 8001174:	4013      	ands	r3, r2
 8001176:	0019      	movs	r1, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	23f0      	movs	r3, #240	@ 0xf0
 800117e:	039b      	lsls	r3, r3, #14
 8001180:	401a      	ands	r2, r3
 8001182:	4b3f      	ldr	r3, [pc, #252]	@ (8001280 <HAL_ADC_Init+0x340>)
 8001184:	430a      	orrs	r2, r1
 8001186:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6818      	ldr	r0, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001190:	001a      	movs	r2, r3
 8001192:	2100      	movs	r1, #0
 8001194:	f7ff fdf7 	bl	8000d86 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011a0:	4939      	ldr	r1, [pc, #228]	@ (8001288 <HAL_ADC_Init+0x348>)
 80011a2:	001a      	movs	r2, r3
 80011a4:	f7ff fdef 	bl	8000d86 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d109      	bne.n	80011c4 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2110      	movs	r1, #16
 80011bc:	4249      	negs	r1, r1
 80011be:	430a      	orrs	r2, r1
 80011c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80011c2:	e018      	b.n	80011f6 <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	691a      	ldr	r2, [r3, #16]
 80011c8:	2380      	movs	r3, #128	@ 0x80
 80011ca:	039b      	lsls	r3, r3, #14
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d112      	bne.n	80011f6 <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	3b01      	subs	r3, #1
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	221c      	movs	r2, #28
 80011e0:	4013      	ands	r3, r2
 80011e2:	2210      	movs	r2, #16
 80011e4:	4252      	negs	r2, r2
 80011e6:	409a      	lsls	r2, r3
 80011e8:	0011      	movs	r1, r2
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	430a      	orrs	r2, r1
 80011f4:	629a      	str	r2, [r3, #40]	@ 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2100      	movs	r1, #0
 80011fc:	0018      	movs	r0, r3
 80011fe:	f7ff fddf 	bl	8000dc0 <LL_ADC_GetSamplingTimeCommonChannels>
 8001202:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001208:	429a      	cmp	r2, r3
 800120a:	d10b      	bne.n	8001224 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001216:	2203      	movs	r2, #3
 8001218:	4393      	bics	r3, r2
 800121a:	2201      	movs	r2, #1
 800121c:	431a      	orrs	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001222:	e01c      	b.n	800125e <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001228:	2212      	movs	r2, #18
 800122a:	4393      	bics	r3, r2
 800122c:	2210      	movs	r2, #16
 800122e:	431a      	orrs	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001238:	2201      	movs	r2, #1
 800123a:	431a      	orrs	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001240:	231f      	movs	r3, #31
 8001242:	18fb      	adds	r3, r7, r3
 8001244:	2201      	movs	r2, #1
 8001246:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001248:	e009      	b.n	800125e <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800124e:	2210      	movs	r2, #16
 8001250:	431a      	orrs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001256:	231f      	movs	r3, #31
 8001258:	18fb      	adds	r3, r7, r3
 800125a:	2201      	movs	r2, #1
 800125c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800125e:	231f      	movs	r3, #31
 8001260:	18fb      	adds	r3, r7, r3
 8001262:	781b      	ldrb	r3, [r3, #0]
}
 8001264:	0018      	movs	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	b008      	add	sp, #32
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000000 	.word	0x20000000
 8001270:	00030d40 	.word	0x00030d40
 8001274:	fffffefd 	.word	0xfffffefd
 8001278:	ffde0201 	.word	0xffde0201
 800127c:	1ffffc02 	.word	0x1ffffc02
 8001280:	40012708 	.word	0x40012708
 8001284:	ffc3ffff 	.word	0xffc3ffff
 8001288:	7fffff04 	.word	0x7fffff04

0800128c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001296:	2317      	movs	r3, #23
 8001298:	18fb      	adds	r3, r7, r3
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2254      	movs	r2, #84	@ 0x54
 80012a6:	5c9b      	ldrb	r3, [r3, r2]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d101      	bne.n	80012b0 <HAL_ADC_ConfigChannel+0x24>
 80012ac:	2302      	movs	r3, #2
 80012ae:	e1be      	b.n	800162e <HAL_ADC_ConfigChannel+0x3a2>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2254      	movs	r2, #84	@ 0x54
 80012b4:	2101      	movs	r1, #1
 80012b6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	0018      	movs	r0, r3
 80012be:	f7ff fe2e 	bl	8000f1e <LL_ADC_REG_IsConversionOngoing>
 80012c2:	1e03      	subs	r3, r0, #0
 80012c4:	d000      	beq.n	80012c8 <HAL_ADC_ConfigChannel+0x3c>
 80012c6:	e1a1      	b.n	800160c <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d100      	bne.n	80012d2 <HAL_ADC_ConfigChannel+0x46>
 80012d0:	e152      	b.n	8001578 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	691a      	ldr	r2, [r3, #16]
 80012d6:	2380      	movs	r3, #128	@ 0x80
 80012d8:	061b      	lsls	r3, r3, #24
 80012da:	429a      	cmp	r2, r3
 80012dc:	d004      	beq.n	80012e8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80012e2:	4ac2      	ldr	r2, [pc, #776]	@ (80015ec <HAL_ADC_ConfigChannel+0x360>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d108      	bne.n	80012fa <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	0019      	movs	r1, r3
 80012f2:	0010      	movs	r0, r2
 80012f4:	f7ff fd9b 	bl	8000e2e <LL_ADC_REG_SetSequencerChAdd>
 80012f8:	e0ed      	b.n	80014d6 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	211f      	movs	r1, #31
 8001304:	400b      	ands	r3, r1
 8001306:	210f      	movs	r1, #15
 8001308:	4099      	lsls	r1, r3
 800130a:	000b      	movs	r3, r1
 800130c:	43db      	mvns	r3, r3
 800130e:	4013      	ands	r3, r2
 8001310:	0019      	movs	r1, r3
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	025b      	lsls	r3, r3, #9
 8001318:	0a5b      	lsrs	r3, r3, #9
 800131a:	d105      	bne.n	8001328 <HAL_ADC_ConfigChannel+0x9c>
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	0e9b      	lsrs	r3, r3, #26
 8001322:	221f      	movs	r2, #31
 8001324:	4013      	ands	r3, r2
 8001326:	e0bc      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x216>
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2201      	movs	r2, #1
 800132e:	4013      	ands	r3, r2
 8001330:	d000      	beq.n	8001334 <HAL_ADC_ConfigChannel+0xa8>
 8001332:	e0b5      	b.n	80014a0 <HAL_ADC_ConfigChannel+0x214>
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2202      	movs	r2, #2
 800133a:	4013      	ands	r3, r2
 800133c:	d000      	beq.n	8001340 <HAL_ADC_ConfigChannel+0xb4>
 800133e:	e0ad      	b.n	800149c <HAL_ADC_ConfigChannel+0x210>
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2204      	movs	r2, #4
 8001346:	4013      	ands	r3, r2
 8001348:	d000      	beq.n	800134c <HAL_ADC_ConfigChannel+0xc0>
 800134a:	e0a5      	b.n	8001498 <HAL_ADC_ConfigChannel+0x20c>
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2208      	movs	r2, #8
 8001352:	4013      	ands	r3, r2
 8001354:	d000      	beq.n	8001358 <HAL_ADC_ConfigChannel+0xcc>
 8001356:	e09d      	b.n	8001494 <HAL_ADC_ConfigChannel+0x208>
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2210      	movs	r2, #16
 800135e:	4013      	ands	r3, r2
 8001360:	d000      	beq.n	8001364 <HAL_ADC_ConfigChannel+0xd8>
 8001362:	e095      	b.n	8001490 <HAL_ADC_ConfigChannel+0x204>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2220      	movs	r2, #32
 800136a:	4013      	ands	r3, r2
 800136c:	d000      	beq.n	8001370 <HAL_ADC_ConfigChannel+0xe4>
 800136e:	e08d      	b.n	800148c <HAL_ADC_ConfigChannel+0x200>
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2240      	movs	r2, #64	@ 0x40
 8001376:	4013      	ands	r3, r2
 8001378:	d000      	beq.n	800137c <HAL_ADC_ConfigChannel+0xf0>
 800137a:	e085      	b.n	8001488 <HAL_ADC_ConfigChannel+0x1fc>
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2280      	movs	r2, #128	@ 0x80
 8001382:	4013      	ands	r3, r2
 8001384:	d000      	beq.n	8001388 <HAL_ADC_ConfigChannel+0xfc>
 8001386:	e07d      	b.n	8001484 <HAL_ADC_ConfigChannel+0x1f8>
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	2380      	movs	r3, #128	@ 0x80
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	4013      	ands	r3, r2
 8001392:	d000      	beq.n	8001396 <HAL_ADC_ConfigChannel+0x10a>
 8001394:	e074      	b.n	8001480 <HAL_ADC_ConfigChannel+0x1f4>
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	2380      	movs	r3, #128	@ 0x80
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4013      	ands	r3, r2
 80013a0:	d000      	beq.n	80013a4 <HAL_ADC_ConfigChannel+0x118>
 80013a2:	e06b      	b.n	800147c <HAL_ADC_ConfigChannel+0x1f0>
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	2380      	movs	r3, #128	@ 0x80
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	4013      	ands	r3, r2
 80013ae:	d000      	beq.n	80013b2 <HAL_ADC_ConfigChannel+0x126>
 80013b0:	e062      	b.n	8001478 <HAL_ADC_ConfigChannel+0x1ec>
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	2380      	movs	r3, #128	@ 0x80
 80013b8:	011b      	lsls	r3, r3, #4
 80013ba:	4013      	ands	r3, r2
 80013bc:	d000      	beq.n	80013c0 <HAL_ADC_ConfigChannel+0x134>
 80013be:	e059      	b.n	8001474 <HAL_ADC_ConfigChannel+0x1e8>
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	2380      	movs	r3, #128	@ 0x80
 80013c6:	015b      	lsls	r3, r3, #5
 80013c8:	4013      	ands	r3, r2
 80013ca:	d151      	bne.n	8001470 <HAL_ADC_ConfigChannel+0x1e4>
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	2380      	movs	r3, #128	@ 0x80
 80013d2:	019b      	lsls	r3, r3, #6
 80013d4:	4013      	ands	r3, r2
 80013d6:	d149      	bne.n	800146c <HAL_ADC_ConfigChannel+0x1e0>
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	2380      	movs	r3, #128	@ 0x80
 80013de:	01db      	lsls	r3, r3, #7
 80013e0:	4013      	ands	r3, r2
 80013e2:	d141      	bne.n	8001468 <HAL_ADC_ConfigChannel+0x1dc>
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	2380      	movs	r3, #128	@ 0x80
 80013ea:	021b      	lsls	r3, r3, #8
 80013ec:	4013      	ands	r3, r2
 80013ee:	d139      	bne.n	8001464 <HAL_ADC_ConfigChannel+0x1d8>
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	2380      	movs	r3, #128	@ 0x80
 80013f6:	025b      	lsls	r3, r3, #9
 80013f8:	4013      	ands	r3, r2
 80013fa:	d131      	bne.n	8001460 <HAL_ADC_ConfigChannel+0x1d4>
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	2380      	movs	r3, #128	@ 0x80
 8001402:	029b      	lsls	r3, r3, #10
 8001404:	4013      	ands	r3, r2
 8001406:	d129      	bne.n	800145c <HAL_ADC_ConfigChannel+0x1d0>
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	2380      	movs	r3, #128	@ 0x80
 800140e:	02db      	lsls	r3, r3, #11
 8001410:	4013      	ands	r3, r2
 8001412:	d121      	bne.n	8001458 <HAL_ADC_ConfigChannel+0x1cc>
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	2380      	movs	r3, #128	@ 0x80
 800141a:	031b      	lsls	r3, r3, #12
 800141c:	4013      	ands	r3, r2
 800141e:	d119      	bne.n	8001454 <HAL_ADC_ConfigChannel+0x1c8>
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	2380      	movs	r3, #128	@ 0x80
 8001426:	035b      	lsls	r3, r3, #13
 8001428:	4013      	ands	r3, r2
 800142a:	d111      	bne.n	8001450 <HAL_ADC_ConfigChannel+0x1c4>
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	2380      	movs	r3, #128	@ 0x80
 8001432:	039b      	lsls	r3, r3, #14
 8001434:	4013      	ands	r3, r2
 8001436:	d109      	bne.n	800144c <HAL_ADC_ConfigChannel+0x1c0>
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	2380      	movs	r3, #128	@ 0x80
 800143e:	03db      	lsls	r3, r3, #15
 8001440:	4013      	ands	r3, r2
 8001442:	d001      	beq.n	8001448 <HAL_ADC_ConfigChannel+0x1bc>
 8001444:	2316      	movs	r3, #22
 8001446:	e02c      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x216>
 8001448:	2300      	movs	r3, #0
 800144a:	e02a      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x216>
 800144c:	2315      	movs	r3, #21
 800144e:	e028      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x216>
 8001450:	2314      	movs	r3, #20
 8001452:	e026      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x216>
 8001454:	2313      	movs	r3, #19
 8001456:	e024      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x216>
 8001458:	2312      	movs	r3, #18
 800145a:	e022      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x216>
 800145c:	2311      	movs	r3, #17
 800145e:	e020      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x216>
 8001460:	2310      	movs	r3, #16
 8001462:	e01e      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x216>
 8001464:	230f      	movs	r3, #15
 8001466:	e01c      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x216>
 8001468:	230e      	movs	r3, #14
 800146a:	e01a      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x216>
 800146c:	230d      	movs	r3, #13
 800146e:	e018      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x216>
 8001470:	230c      	movs	r3, #12
 8001472:	e016      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x216>
 8001474:	230b      	movs	r3, #11
 8001476:	e014      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x216>
 8001478:	230a      	movs	r3, #10
 800147a:	e012      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x216>
 800147c:	2309      	movs	r3, #9
 800147e:	e010      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x216>
 8001480:	2308      	movs	r3, #8
 8001482:	e00e      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x216>
 8001484:	2307      	movs	r3, #7
 8001486:	e00c      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x216>
 8001488:	2306      	movs	r3, #6
 800148a:	e00a      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x216>
 800148c:	2305      	movs	r3, #5
 800148e:	e008      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x216>
 8001490:	2304      	movs	r3, #4
 8001492:	e006      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x216>
 8001494:	2303      	movs	r3, #3
 8001496:	e004      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x216>
 8001498:	2302      	movs	r3, #2
 800149a:	e002      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x216>
 800149c:	2301      	movs	r3, #1
 800149e:	e000      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x216>
 80014a0:	2300      	movs	r3, #0
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	6852      	ldr	r2, [r2, #4]
 80014a6:	201f      	movs	r0, #31
 80014a8:	4002      	ands	r2, r0
 80014aa:	4093      	lsls	r3, r2
 80014ac:	000a      	movs	r2, r1
 80014ae:	431a      	orrs	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	089b      	lsrs	r3, r3, #2
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	69db      	ldr	r3, [r3, #28]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d808      	bhi.n	80014d6 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6818      	ldr	r0, [r3, #0]
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	6859      	ldr	r1, [r3, #4]
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	001a      	movs	r2, r3
 80014d2:	f7ff fc8c 	bl	8000dee <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6818      	ldr	r0, [r3, #0]
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	6819      	ldr	r1, [r3, #0]
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	001a      	movs	r2, r3
 80014e4:	f7ff fcc6 	bl	8000e74 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	db00      	blt.n	80014f2 <HAL_ADC_ConfigChannel+0x266>
 80014f0:	e096      	b.n	8001620 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80014f2:	4b3f      	ldr	r3, [pc, #252]	@ (80015f0 <HAL_ADC_ConfigChannel+0x364>)
 80014f4:	0018      	movs	r0, r3
 80014f6:	f7ff fc39 	bl	8000d6c <LL_ADC_GetCommonPathInternalCh>
 80014fa:	0003      	movs	r3, r0
 80014fc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a3c      	ldr	r2, [pc, #240]	@ (80015f4 <HAL_ADC_ConfigChannel+0x368>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d123      	bne.n	8001550 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	2380      	movs	r3, #128	@ 0x80
 800150c:	041b      	lsls	r3, r3, #16
 800150e:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001510:	d11e      	bne.n	8001550 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	2280      	movs	r2, #128	@ 0x80
 8001516:	0412      	lsls	r2, r2, #16
 8001518:	4313      	orrs	r3, r2
 800151a:	4a35      	ldr	r2, [pc, #212]	@ (80015f0 <HAL_ADC_ConfigChannel+0x364>)
 800151c:	0019      	movs	r1, r3
 800151e:	0010      	movs	r0, r2
 8001520:	f7ff fc10 	bl	8000d44 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001524:	4b34      	ldr	r3, [pc, #208]	@ (80015f8 <HAL_ADC_ConfigChannel+0x36c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4934      	ldr	r1, [pc, #208]	@ (80015fc <HAL_ADC_ConfigChannel+0x370>)
 800152a:	0018      	movs	r0, r3
 800152c:	f7fe fdec 	bl	8000108 <__udivsi3>
 8001530:	0003      	movs	r3, r0
 8001532:	001a      	movs	r2, r3
 8001534:	0013      	movs	r3, r2
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	189b      	adds	r3, r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	3301      	adds	r3, #1
 800153e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001540:	e002      	b.n	8001548 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	3b01      	subs	r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f9      	bne.n	8001542 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800154e:	e067      	b.n	8001620 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a2a      	ldr	r2, [pc, #168]	@ (8001600 <HAL_ADC_ConfigChannel+0x374>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d162      	bne.n	8001620 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	2380      	movs	r3, #128	@ 0x80
 800155e:	03db      	lsls	r3, r3, #15
 8001560:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001562:	d15d      	bne.n	8001620 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	2280      	movs	r2, #128	@ 0x80
 8001568:	03d2      	lsls	r2, r2, #15
 800156a:	4313      	orrs	r3, r2
 800156c:	4a20      	ldr	r2, [pc, #128]	@ (80015f0 <HAL_ADC_ConfigChannel+0x364>)
 800156e:	0019      	movs	r1, r3
 8001570:	0010      	movs	r0, r2
 8001572:	f7ff fbe7 	bl	8000d44 <LL_ADC_SetCommonPathInternalCh>
 8001576:	e053      	b.n	8001620 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	691a      	ldr	r2, [r3, #16]
 800157c:	2380      	movs	r3, #128	@ 0x80
 800157e:	061b      	lsls	r3, r3, #24
 8001580:	429a      	cmp	r2, r3
 8001582:	d004      	beq.n	800158e <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001588:	4a18      	ldr	r2, [pc, #96]	@ (80015ec <HAL_ADC_ConfigChannel+0x360>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d107      	bne.n	800159e <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	0019      	movs	r1, r3
 8001598:	0010      	movs	r0, r2
 800159a:	f7ff fc59 	bl	8000e50 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	da3c      	bge.n	8001620 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015a6:	4b12      	ldr	r3, [pc, #72]	@ (80015f0 <HAL_ADC_ConfigChannel+0x364>)
 80015a8:	0018      	movs	r0, r3
 80015aa:	f7ff fbdf 	bl	8000d6c <LL_ADC_GetCommonPathInternalCh>
 80015ae:	0003      	movs	r3, r0
 80015b0:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a0f      	ldr	r2, [pc, #60]	@ (80015f4 <HAL_ADC_ConfigChannel+0x368>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d108      	bne.n	80015ce <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	4a11      	ldr	r2, [pc, #68]	@ (8001604 <HAL_ADC_ConfigChannel+0x378>)
 80015c0:	4013      	ands	r3, r2
 80015c2:	4a0b      	ldr	r2, [pc, #44]	@ (80015f0 <HAL_ADC_ConfigChannel+0x364>)
 80015c4:	0019      	movs	r1, r3
 80015c6:	0010      	movs	r0, r2
 80015c8:	f7ff fbbc 	bl	8000d44 <LL_ADC_SetCommonPathInternalCh>
 80015cc:	e028      	b.n	8001620 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001600 <HAL_ADC_ConfigChannel+0x374>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d123      	bne.n	8001620 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	4a0b      	ldr	r2, [pc, #44]	@ (8001608 <HAL_ADC_ConfigChannel+0x37c>)
 80015dc:	4013      	ands	r3, r2
 80015de:	4a04      	ldr	r2, [pc, #16]	@ (80015f0 <HAL_ADC_ConfigChannel+0x364>)
 80015e0:	0019      	movs	r1, r3
 80015e2:	0010      	movs	r0, r2
 80015e4:	f7ff fbae 	bl	8000d44 <LL_ADC_SetCommonPathInternalCh>
 80015e8:	e01a      	b.n	8001620 <HAL_ADC_ConfigChannel+0x394>
 80015ea:	46c0      	nop			@ (mov r8, r8)
 80015ec:	80000004 	.word	0x80000004
 80015f0:	40012708 	.word	0x40012708
 80015f4:	a4000200 	.word	0xa4000200
 80015f8:	20000000 	.word	0x20000000
 80015fc:	00030d40 	.word	0x00030d40
 8001600:	a8000400 	.word	0xa8000400
 8001604:	ff7fffff 	.word	0xff7fffff
 8001608:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001610:	2220      	movs	r2, #32
 8001612:	431a      	orrs	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001618:	2317      	movs	r3, #23
 800161a:	18fb      	adds	r3, r7, r3
 800161c:	2201      	movs	r2, #1
 800161e:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2254      	movs	r2, #84	@ 0x54
 8001624:	2100      	movs	r1, #0
 8001626:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001628:	2317      	movs	r3, #23
 800162a:	18fb      	adds	r3, r7, r3
 800162c:	781b      	ldrb	r3, [r3, #0]
}
 800162e:	0018      	movs	r0, r3
 8001630:	46bd      	mov	sp, r7
 8001632:	b006      	add	sp, #24
 8001634:	bd80      	pop	{r7, pc}
 8001636:	46c0      	nop			@ (mov r8, r8)

08001638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	0002      	movs	r2, r0
 8001640:	1dfb      	adds	r3, r7, #7
 8001642:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001644:	1dfb      	adds	r3, r7, #7
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b7f      	cmp	r3, #127	@ 0x7f
 800164a:	d809      	bhi.n	8001660 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800164c:	1dfb      	adds	r3, r7, #7
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	001a      	movs	r2, r3
 8001652:	231f      	movs	r3, #31
 8001654:	401a      	ands	r2, r3
 8001656:	4b04      	ldr	r3, [pc, #16]	@ (8001668 <__NVIC_EnableIRQ+0x30>)
 8001658:	2101      	movs	r1, #1
 800165a:	4091      	lsls	r1, r2
 800165c:	000a      	movs	r2, r1
 800165e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001660:	46c0      	nop			@ (mov r8, r8)
 8001662:	46bd      	mov	sp, r7
 8001664:	b002      	add	sp, #8
 8001666:	bd80      	pop	{r7, pc}
 8001668:	e000e100 	.word	0xe000e100

0800166c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	0002      	movs	r2, r0
 8001674:	6039      	str	r1, [r7, #0]
 8001676:	1dfb      	adds	r3, r7, #7
 8001678:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800167a:	1dfb      	adds	r3, r7, #7
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001680:	d828      	bhi.n	80016d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001682:	4a2f      	ldr	r2, [pc, #188]	@ (8001740 <__NVIC_SetPriority+0xd4>)
 8001684:	1dfb      	adds	r3, r7, #7
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	b25b      	sxtb	r3, r3
 800168a:	089b      	lsrs	r3, r3, #2
 800168c:	33c0      	adds	r3, #192	@ 0xc0
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	589b      	ldr	r3, [r3, r2]
 8001692:	1dfa      	adds	r2, r7, #7
 8001694:	7812      	ldrb	r2, [r2, #0]
 8001696:	0011      	movs	r1, r2
 8001698:	2203      	movs	r2, #3
 800169a:	400a      	ands	r2, r1
 800169c:	00d2      	lsls	r2, r2, #3
 800169e:	21ff      	movs	r1, #255	@ 0xff
 80016a0:	4091      	lsls	r1, r2
 80016a2:	000a      	movs	r2, r1
 80016a4:	43d2      	mvns	r2, r2
 80016a6:	401a      	ands	r2, r3
 80016a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	019b      	lsls	r3, r3, #6
 80016ae:	22ff      	movs	r2, #255	@ 0xff
 80016b0:	401a      	ands	r2, r3
 80016b2:	1dfb      	adds	r3, r7, #7
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	0018      	movs	r0, r3
 80016b8:	2303      	movs	r3, #3
 80016ba:	4003      	ands	r3, r0
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016c0:	481f      	ldr	r0, [pc, #124]	@ (8001740 <__NVIC_SetPriority+0xd4>)
 80016c2:	1dfb      	adds	r3, r7, #7
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	b25b      	sxtb	r3, r3
 80016c8:	089b      	lsrs	r3, r3, #2
 80016ca:	430a      	orrs	r2, r1
 80016cc:	33c0      	adds	r3, #192	@ 0xc0
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80016d2:	e031      	b.n	8001738 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001744 <__NVIC_SetPriority+0xd8>)
 80016d6:	1dfb      	adds	r3, r7, #7
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	0019      	movs	r1, r3
 80016dc:	230f      	movs	r3, #15
 80016de:	400b      	ands	r3, r1
 80016e0:	3b08      	subs	r3, #8
 80016e2:	089b      	lsrs	r3, r3, #2
 80016e4:	3306      	adds	r3, #6
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	18d3      	adds	r3, r2, r3
 80016ea:	3304      	adds	r3, #4
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	1dfa      	adds	r2, r7, #7
 80016f0:	7812      	ldrb	r2, [r2, #0]
 80016f2:	0011      	movs	r1, r2
 80016f4:	2203      	movs	r2, #3
 80016f6:	400a      	ands	r2, r1
 80016f8:	00d2      	lsls	r2, r2, #3
 80016fa:	21ff      	movs	r1, #255	@ 0xff
 80016fc:	4091      	lsls	r1, r2
 80016fe:	000a      	movs	r2, r1
 8001700:	43d2      	mvns	r2, r2
 8001702:	401a      	ands	r2, r3
 8001704:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	019b      	lsls	r3, r3, #6
 800170a:	22ff      	movs	r2, #255	@ 0xff
 800170c:	401a      	ands	r2, r3
 800170e:	1dfb      	adds	r3, r7, #7
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	0018      	movs	r0, r3
 8001714:	2303      	movs	r3, #3
 8001716:	4003      	ands	r3, r0
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800171c:	4809      	ldr	r0, [pc, #36]	@ (8001744 <__NVIC_SetPriority+0xd8>)
 800171e:	1dfb      	adds	r3, r7, #7
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	001c      	movs	r4, r3
 8001724:	230f      	movs	r3, #15
 8001726:	4023      	ands	r3, r4
 8001728:	3b08      	subs	r3, #8
 800172a:	089b      	lsrs	r3, r3, #2
 800172c:	430a      	orrs	r2, r1
 800172e:	3306      	adds	r3, #6
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	18c3      	adds	r3, r0, r3
 8001734:	3304      	adds	r3, #4
 8001736:	601a      	str	r2, [r3, #0]
}
 8001738:	46c0      	nop			@ (mov r8, r8)
 800173a:	46bd      	mov	sp, r7
 800173c:	b003      	add	sp, #12
 800173e:	bd90      	pop	{r4, r7, pc}
 8001740:	e000e100 	.word	0xe000e100
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	1e5a      	subs	r2, r3, #1
 8001754:	2380      	movs	r3, #128	@ 0x80
 8001756:	045b      	lsls	r3, r3, #17
 8001758:	429a      	cmp	r2, r3
 800175a:	d301      	bcc.n	8001760 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800175c:	2301      	movs	r3, #1
 800175e:	e010      	b.n	8001782 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001760:	4b0a      	ldr	r3, [pc, #40]	@ (800178c <SysTick_Config+0x44>)
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	3a01      	subs	r2, #1
 8001766:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001768:	2301      	movs	r3, #1
 800176a:	425b      	negs	r3, r3
 800176c:	2103      	movs	r1, #3
 800176e:	0018      	movs	r0, r3
 8001770:	f7ff ff7c 	bl	800166c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001774:	4b05      	ldr	r3, [pc, #20]	@ (800178c <SysTick_Config+0x44>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177a:	4b04      	ldr	r3, [pc, #16]	@ (800178c <SysTick_Config+0x44>)
 800177c:	2207      	movs	r2, #7
 800177e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001780:	2300      	movs	r3, #0
}
 8001782:	0018      	movs	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	b002      	add	sp, #8
 8001788:	bd80      	pop	{r7, pc}
 800178a:	46c0      	nop			@ (mov r8, r8)
 800178c:	e000e010 	.word	0xe000e010

08001790 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	60b9      	str	r1, [r7, #8]
 8001798:	607a      	str	r2, [r7, #4]
 800179a:	210f      	movs	r1, #15
 800179c:	187b      	adds	r3, r7, r1
 800179e:	1c02      	adds	r2, r0, #0
 80017a0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	187b      	adds	r3, r7, r1
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	b25b      	sxtb	r3, r3
 80017aa:	0011      	movs	r1, r2
 80017ac:	0018      	movs	r0, r3
 80017ae:	f7ff ff5d 	bl	800166c <__NVIC_SetPriority>
}
 80017b2:	46c0      	nop			@ (mov r8, r8)
 80017b4:	46bd      	mov	sp, r7
 80017b6:	b004      	add	sp, #16
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	0002      	movs	r2, r0
 80017c2:	1dfb      	adds	r3, r7, #7
 80017c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017c6:	1dfb      	adds	r3, r7, #7
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	b25b      	sxtb	r3, r3
 80017cc:	0018      	movs	r0, r3
 80017ce:	f7ff ff33 	bl	8001638 <__NVIC_EnableIRQ>
}
 80017d2:	46c0      	nop			@ (mov r8, r8)
 80017d4:	46bd      	mov	sp, r7
 80017d6:	b002      	add	sp, #8
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b082      	sub	sp, #8
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	0018      	movs	r0, r3
 80017e6:	f7ff ffaf 	bl	8001748 <SysTick_Config>
 80017ea:	0003      	movs	r3, r0
}
 80017ec:	0018      	movs	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b002      	add	sp, #8
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001802:	e14d      	b.n	8001aa0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2101      	movs	r1, #1
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	4091      	lsls	r1, r2
 800180e:	000a      	movs	r2, r1
 8001810:	4013      	ands	r3, r2
 8001812:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d100      	bne.n	800181c <HAL_GPIO_Init+0x28>
 800181a:	e13e      	b.n	8001a9a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	2b02      	cmp	r3, #2
 8001822:	d003      	beq.n	800182c <HAL_GPIO_Init+0x38>
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b12      	cmp	r3, #18
 800182a:	d125      	bne.n	8001878 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	08da      	lsrs	r2, r3, #3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3208      	adds	r2, #8
 8001834:	0092      	lsls	r2, r2, #2
 8001836:	58d3      	ldr	r3, [r2, r3]
 8001838:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	2207      	movs	r2, #7
 800183e:	4013      	ands	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	220f      	movs	r2, #15
 8001844:	409a      	lsls	r2, r3
 8001846:	0013      	movs	r3, r2
 8001848:	43da      	mvns	r2, r3
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	4013      	ands	r3, r2
 800184e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	220f      	movs	r2, #15
 8001856:	401a      	ands	r2, r3
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	2107      	movs	r1, #7
 800185c:	400b      	ands	r3, r1
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	409a      	lsls	r2, r3
 8001862:	0013      	movs	r3, r2
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	4313      	orrs	r3, r2
 8001868:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	08da      	lsrs	r2, r3, #3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3208      	adds	r2, #8
 8001872:	0092      	lsls	r2, r2, #2
 8001874:	6979      	ldr	r1, [r7, #20]
 8001876:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	2203      	movs	r2, #3
 8001884:	409a      	lsls	r2, r3
 8001886:	0013      	movs	r3, r2
 8001888:	43da      	mvns	r2, r3
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	4013      	ands	r3, r2
 800188e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2203      	movs	r2, #3
 8001896:	401a      	ands	r2, r3
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	409a      	lsls	r2, r3
 800189e:	0013      	movs	r3, r2
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	697a      	ldr	r2, [r7, #20]
 80018aa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d00b      	beq.n	80018cc <HAL_GPIO_Init+0xd8>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d007      	beq.n	80018cc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018c0:	2b11      	cmp	r3, #17
 80018c2:	d003      	beq.n	80018cc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b12      	cmp	r3, #18
 80018ca:	d130      	bne.n	800192e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	2203      	movs	r2, #3
 80018d8:	409a      	lsls	r2, r3
 80018da:	0013      	movs	r3, r2
 80018dc:	43da      	mvns	r2, r3
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	4013      	ands	r3, r2
 80018e2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	68da      	ldr	r2, [r3, #12]
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	409a      	lsls	r2, r3
 80018ee:	0013      	movs	r3, r2
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001902:	2201      	movs	r2, #1
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	409a      	lsls	r2, r3
 8001908:	0013      	movs	r3, r2
 800190a:	43da      	mvns	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	4013      	ands	r3, r2
 8001910:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	091b      	lsrs	r3, r3, #4
 8001918:	2201      	movs	r2, #1
 800191a:	401a      	ands	r2, r3
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	409a      	lsls	r2, r3
 8001920:	0013      	movs	r3, r2
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	4313      	orrs	r3, r2
 8001926:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b03      	cmp	r3, #3
 8001934:	d017      	beq.n	8001966 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	2203      	movs	r2, #3
 8001942:	409a      	lsls	r2, r3
 8001944:	0013      	movs	r3, r2
 8001946:	43da      	mvns	r2, r3
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	4013      	ands	r3, r2
 800194c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	409a      	lsls	r2, r3
 8001958:	0013      	movs	r3, r2
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	4313      	orrs	r3, r2
 800195e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	2380      	movs	r3, #128	@ 0x80
 800196c:	055b      	lsls	r3, r3, #21
 800196e:	4013      	ands	r3, r2
 8001970:	d100      	bne.n	8001974 <HAL_GPIO_Init+0x180>
 8001972:	e092      	b.n	8001a9a <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001974:	4a50      	ldr	r2, [pc, #320]	@ (8001ab8 <HAL_GPIO_Init+0x2c4>)
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	089b      	lsrs	r3, r3, #2
 800197a:	3318      	adds	r3, #24
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	589b      	ldr	r3, [r3, r2]
 8001980:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	2203      	movs	r2, #3
 8001986:	4013      	ands	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	220f      	movs	r2, #15
 800198c:	409a      	lsls	r2, r3
 800198e:	0013      	movs	r3, r2
 8001990:	43da      	mvns	r2, r3
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	4013      	ands	r3, r2
 8001996:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	23a0      	movs	r3, #160	@ 0xa0
 800199c:	05db      	lsls	r3, r3, #23
 800199e:	429a      	cmp	r2, r3
 80019a0:	d013      	beq.n	80019ca <HAL_GPIO_Init+0x1d6>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a45      	ldr	r2, [pc, #276]	@ (8001abc <HAL_GPIO_Init+0x2c8>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d00d      	beq.n	80019c6 <HAL_GPIO_Init+0x1d2>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a44      	ldr	r2, [pc, #272]	@ (8001ac0 <HAL_GPIO_Init+0x2cc>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d007      	beq.n	80019c2 <HAL_GPIO_Init+0x1ce>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a43      	ldr	r2, [pc, #268]	@ (8001ac4 <HAL_GPIO_Init+0x2d0>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d101      	bne.n	80019be <HAL_GPIO_Init+0x1ca>
 80019ba:	2305      	movs	r3, #5
 80019bc:	e006      	b.n	80019cc <HAL_GPIO_Init+0x1d8>
 80019be:	2306      	movs	r3, #6
 80019c0:	e004      	b.n	80019cc <HAL_GPIO_Init+0x1d8>
 80019c2:	2302      	movs	r3, #2
 80019c4:	e002      	b.n	80019cc <HAL_GPIO_Init+0x1d8>
 80019c6:	2301      	movs	r3, #1
 80019c8:	e000      	b.n	80019cc <HAL_GPIO_Init+0x1d8>
 80019ca:	2300      	movs	r3, #0
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	2103      	movs	r1, #3
 80019d0:	400a      	ands	r2, r1
 80019d2:	00d2      	lsls	r2, r2, #3
 80019d4:	4093      	lsls	r3, r2
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	4313      	orrs	r3, r2
 80019da:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80019dc:	4936      	ldr	r1, [pc, #216]	@ (8001ab8 <HAL_GPIO_Init+0x2c4>)
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	089b      	lsrs	r3, r3, #2
 80019e2:	3318      	adds	r3, #24
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80019ea:	4a33      	ldr	r2, [pc, #204]	@ (8001ab8 <HAL_GPIO_Init+0x2c4>)
 80019ec:	2380      	movs	r3, #128	@ 0x80
 80019ee:	58d3      	ldr	r3, [r2, r3]
 80019f0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	43da      	mvns	r2, r3
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	4013      	ands	r3, r2
 80019fa:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	2380      	movs	r3, #128	@ 0x80
 8001a02:	025b      	lsls	r3, r3, #9
 8001a04:	4013      	ands	r3, r2
 8001a06:	d003      	beq.n	8001a10 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8001a08:	697a      	ldr	r2, [r7, #20]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001a10:	4929      	ldr	r1, [pc, #164]	@ (8001ab8 <HAL_GPIO_Init+0x2c4>)
 8001a12:	2280      	movs	r2, #128	@ 0x80
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001a18:	4a27      	ldr	r2, [pc, #156]	@ (8001ab8 <HAL_GPIO_Init+0x2c4>)
 8001a1a:	2384      	movs	r3, #132	@ 0x84
 8001a1c:	58d3      	ldr	r3, [r2, r3]
 8001a1e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	43da      	mvns	r2, r3
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	4013      	ands	r3, r2
 8001a28:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	2380      	movs	r3, #128	@ 0x80
 8001a30:	029b      	lsls	r3, r3, #10
 8001a32:	4013      	ands	r3, r2
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001a3e:	491e      	ldr	r1, [pc, #120]	@ (8001ab8 <HAL_GPIO_Init+0x2c4>)
 8001a40:	2284      	movs	r2, #132	@ 0x84
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001a46:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab8 <HAL_GPIO_Init+0x2c4>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	43da      	mvns	r2, r3
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	4013      	ands	r3, r2
 8001a54:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	2380      	movs	r3, #128	@ 0x80
 8001a5c:	035b      	lsls	r3, r3, #13
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d003      	beq.n	8001a6a <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001a6a:	4b13      	ldr	r3, [pc, #76]	@ (8001ab8 <HAL_GPIO_Init+0x2c4>)
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001a70:	4b11      	ldr	r3, [pc, #68]	@ (8001ab8 <HAL_GPIO_Init+0x2c4>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	43da      	mvns	r2, r3
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	2380      	movs	r3, #128	@ 0x80
 8001a86:	039b      	lsls	r3, r3, #14
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d003      	beq.n	8001a94 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001a94:	4b08      	ldr	r3, [pc, #32]	@ (8001ab8 <HAL_GPIO_Init+0x2c4>)
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	40da      	lsrs	r2, r3
 8001aa8:	1e13      	subs	r3, r2, #0
 8001aaa:	d000      	beq.n	8001aae <HAL_GPIO_Init+0x2ba>
 8001aac:	e6aa      	b.n	8001804 <HAL_GPIO_Init+0x10>
  }
}
 8001aae:	46c0      	nop			@ (mov r8, r8)
 8001ab0:	46c0      	nop			@ (mov r8, r8)
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	b006      	add	sp, #24
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40021800 	.word	0x40021800
 8001abc:	50000400 	.word	0x50000400
 8001ac0:	50000800 	.word	0x50000800
 8001ac4:	50001400 	.word	0x50001400

08001ac8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	0008      	movs	r0, r1
 8001ad2:	0011      	movs	r1, r2
 8001ad4:	1cbb      	adds	r3, r7, #2
 8001ad6:	1c02      	adds	r2, r0, #0
 8001ad8:	801a      	strh	r2, [r3, #0]
 8001ada:	1c7b      	adds	r3, r7, #1
 8001adc:	1c0a      	adds	r2, r1, #0
 8001ade:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ae0:	1c7b      	adds	r3, r7, #1
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d004      	beq.n	8001af2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ae8:	1cbb      	adds	r3, r7, #2
 8001aea:	881a      	ldrh	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001af0:	e003      	b.n	8001afa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001af2:	1cbb      	adds	r3, r7, #2
 8001af4:	881a      	ldrh	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001afa:	46c0      	nop			@ (mov r8, r8)
 8001afc:	46bd      	mov	sp, r7
 8001afe:	b002      	add	sp, #8
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b084      	sub	sp, #16
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
 8001b0a:	000a      	movs	r2, r1
 8001b0c:	1cbb      	adds	r3, r7, #2
 8001b0e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	695b      	ldr	r3, [r3, #20]
 8001b14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b16:	1cbb      	adds	r3, r7, #2
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	041a      	lsls	r2, r3, #16
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	43db      	mvns	r3, r3
 8001b24:	1cb9      	adds	r1, r7, #2
 8001b26:	8809      	ldrh	r1, [r1, #0]
 8001b28:	400b      	ands	r3, r1
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	619a      	str	r2, [r3, #24]
}
 8001b30:	46c0      	nop			@ (mov r8, r8)
 8001b32:	46bd      	mov	sp, r7
 8001b34:	b004      	add	sp, #16
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	0002      	movs	r2, r0
 8001b40:	1dbb      	adds	r3, r7, #6
 8001b42:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8001b44:	4b10      	ldr	r3, [pc, #64]	@ (8001b88 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	1dba      	adds	r2, r7, #6
 8001b4a:	8812      	ldrh	r2, [r2, #0]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d008      	beq.n	8001b62 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001b50:	4b0d      	ldr	r3, [pc, #52]	@ (8001b88 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001b52:	1dba      	adds	r2, r7, #6
 8001b54:	8812      	ldrh	r2, [r2, #0]
 8001b56:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001b58:	1dbb      	adds	r3, r7, #6
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	f000 f815 	bl	8001b8c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8001b62:	4b09      	ldr	r3, [pc, #36]	@ (8001b88 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	1dba      	adds	r2, r7, #6
 8001b68:	8812      	ldrh	r2, [r2, #0]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d008      	beq.n	8001b80 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001b6e:	4b06      	ldr	r3, [pc, #24]	@ (8001b88 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001b70:	1dba      	adds	r2, r7, #6
 8001b72:	8812      	ldrh	r2, [r2, #0]
 8001b74:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001b76:	1dbb      	adds	r3, r7, #6
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	f000 f810 	bl	8001ba0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001b80:	46c0      	nop			@ (mov r8, r8)
 8001b82:	46bd      	mov	sp, r7
 8001b84:	b002      	add	sp, #8
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40021800 	.word	0x40021800

08001b8c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	0002      	movs	r2, r0
 8001b94:	1dbb      	adds	r3, r7, #6
 8001b96:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001b98:	46c0      	nop			@ (mov r8, r8)
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	b002      	add	sp, #8
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	0002      	movs	r2, r0
 8001ba8:	1dbb      	adds	r3, r7, #6
 8001baa:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001bac:	46c0      	nop			@ (mov r8, r8)
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	b002      	add	sp, #8
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e08f      	b.n	8001ce6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2241      	movs	r2, #65	@ 0x41
 8001bca:	5c9b      	ldrb	r3, [r3, r2]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d107      	bne.n	8001be2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2240      	movs	r2, #64	@ 0x40
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	0018      	movs	r0, r3
 8001bde:	f7fe feab 	bl	8000938 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2241      	movs	r2, #65	@ 0x41
 8001be6:	2124      	movs	r1, #36	@ 0x24
 8001be8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	438a      	bics	r2, r1
 8001bf8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	493b      	ldr	r1, [pc, #236]	@ (8001cf0 <HAL_I2C_Init+0x13c>)
 8001c04:	400a      	ands	r2, r1
 8001c06:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4938      	ldr	r1, [pc, #224]	@ (8001cf4 <HAL_I2C_Init+0x140>)
 8001c14:	400a      	ands	r2, r1
 8001c16:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d108      	bne.n	8001c32 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2180      	movs	r1, #128	@ 0x80
 8001c2a:	0209      	lsls	r1, r1, #8
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	e007      	b.n	8001c42 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2184      	movs	r1, #132	@ 0x84
 8001c3c:	0209      	lsls	r1, r1, #8
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d109      	bne.n	8001c5e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	685a      	ldr	r2, [r3, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2180      	movs	r1, #128	@ 0x80
 8001c56:	0109      	lsls	r1, r1, #4
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	e007      	b.n	8001c6e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4923      	ldr	r1, [pc, #140]	@ (8001cf8 <HAL_I2C_Init+0x144>)
 8001c6a:	400a      	ands	r2, r1
 8001c6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4920      	ldr	r1, [pc, #128]	@ (8001cfc <HAL_I2C_Init+0x148>)
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68da      	ldr	r2, [r3, #12]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	491a      	ldr	r1, [pc, #104]	@ (8001cf4 <HAL_I2C_Init+0x140>)
 8001c8a:	400a      	ands	r2, r1
 8001c8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	691a      	ldr	r2, [r3, #16]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	431a      	orrs	r2, r3
 8001c98:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69d9      	ldr	r1, [r3, #28]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a1a      	ldr	r2, [r3, #32]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2241      	movs	r2, #65	@ 0x41
 8001cd2:	2120      	movs	r1, #32
 8001cd4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2242      	movs	r2, #66	@ 0x42
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	b002      	add	sp, #8
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	46c0      	nop			@ (mov r8, r8)
 8001cf0:	f0ffffff 	.word	0xf0ffffff
 8001cf4:	ffff7fff 	.word	0xffff7fff
 8001cf8:	fffff7ff 	.word	0xfffff7ff
 8001cfc:	02008000 	.word	0x02008000

08001d00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2241      	movs	r2, #65	@ 0x41
 8001d0e:	5c9b      	ldrb	r3, [r3, r2]
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b20      	cmp	r3, #32
 8001d14:	d138      	bne.n	8001d88 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2240      	movs	r2, #64	@ 0x40
 8001d1a:	5c9b      	ldrb	r3, [r3, r2]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d101      	bne.n	8001d24 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d20:	2302      	movs	r3, #2
 8001d22:	e032      	b.n	8001d8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2240      	movs	r2, #64	@ 0x40
 8001d28:	2101      	movs	r1, #1
 8001d2a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2241      	movs	r2, #65	@ 0x41
 8001d30:	2124      	movs	r1, #36	@ 0x24
 8001d32:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2101      	movs	r1, #1
 8001d40:	438a      	bics	r2, r1
 8001d42:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4911      	ldr	r1, [pc, #68]	@ (8001d94 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001d50:	400a      	ands	r2, r1
 8001d52:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6819      	ldr	r1, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2101      	movs	r1, #1
 8001d70:	430a      	orrs	r2, r1
 8001d72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2241      	movs	r2, #65	@ 0x41
 8001d78:	2120      	movs	r1, #32
 8001d7a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2240      	movs	r2, #64	@ 0x40
 8001d80:	2100      	movs	r1, #0
 8001d82:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d84:	2300      	movs	r3, #0
 8001d86:	e000      	b.n	8001d8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d88:	2302      	movs	r3, #2
  }
}
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	b002      	add	sp, #8
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	46c0      	nop			@ (mov r8, r8)
 8001d94:	ffffefff 	.word	0xffffefff

08001d98 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2241      	movs	r2, #65	@ 0x41
 8001da6:	5c9b      	ldrb	r3, [r3, r2]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b20      	cmp	r3, #32
 8001dac:	d139      	bne.n	8001e22 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2240      	movs	r2, #64	@ 0x40
 8001db2:	5c9b      	ldrb	r3, [r3, r2]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d101      	bne.n	8001dbc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001db8:	2302      	movs	r3, #2
 8001dba:	e033      	b.n	8001e24 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2240      	movs	r2, #64	@ 0x40
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2241      	movs	r2, #65	@ 0x41
 8001dc8:	2124      	movs	r1, #36	@ 0x24
 8001dca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	438a      	bics	r2, r1
 8001dda:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4a11      	ldr	r2, [pc, #68]	@ (8001e2c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001de8:	4013      	ands	r3, r2
 8001dea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	021b      	lsls	r3, r3, #8
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2101      	movs	r1, #1
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2241      	movs	r2, #65	@ 0x41
 8001e12:	2120      	movs	r1, #32
 8001e14:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2240      	movs	r2, #64	@ 0x40
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	e000      	b.n	8001e24 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e22:	2302      	movs	r3, #2
  }
}
 8001e24:	0018      	movs	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	b004      	add	sp, #16
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	fffff0ff 	.word	0xfffff0ff

08001e30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e1d0      	b.n	80021e4 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2201      	movs	r2, #1
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d100      	bne.n	8001e4e <HAL_RCC_OscConfig+0x1e>
 8001e4c:	e069      	b.n	8001f22 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e4e:	4bc8      	ldr	r3, [pc, #800]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	2238      	movs	r2, #56	@ 0x38
 8001e54:	4013      	ands	r3, r2
 8001e56:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	2b08      	cmp	r3, #8
 8001e5c:	d105      	bne.n	8001e6a <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d15d      	bne.n	8001f22 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e1bc      	b.n	80021e4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	2380      	movs	r3, #128	@ 0x80
 8001e70:	025b      	lsls	r3, r3, #9
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d107      	bne.n	8001e86 <HAL_RCC_OscConfig+0x56>
 8001e76:	4bbe      	ldr	r3, [pc, #760]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	4bbd      	ldr	r3, [pc, #756]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 8001e7c:	2180      	movs	r1, #128	@ 0x80
 8001e7e:	0249      	lsls	r1, r1, #9
 8001e80:	430a      	orrs	r2, r1
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	e020      	b.n	8001ec8 <HAL_RCC_OscConfig+0x98>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	23a0      	movs	r3, #160	@ 0xa0
 8001e8c:	02db      	lsls	r3, r3, #11
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d10e      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x80>
 8001e92:	4bb7      	ldr	r3, [pc, #732]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	4bb6      	ldr	r3, [pc, #728]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 8001e98:	2180      	movs	r1, #128	@ 0x80
 8001e9a:	02c9      	lsls	r1, r1, #11
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	4bb3      	ldr	r3, [pc, #716]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	4bb2      	ldr	r3, [pc, #712]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 8001ea6:	2180      	movs	r1, #128	@ 0x80
 8001ea8:	0249      	lsls	r1, r1, #9
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	e00b      	b.n	8001ec8 <HAL_RCC_OscConfig+0x98>
 8001eb0:	4baf      	ldr	r3, [pc, #700]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4bae      	ldr	r3, [pc, #696]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 8001eb6:	49af      	ldr	r1, [pc, #700]	@ (8002174 <HAL_RCC_OscConfig+0x344>)
 8001eb8:	400a      	ands	r2, r1
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	4bac      	ldr	r3, [pc, #688]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4bab      	ldr	r3, [pc, #684]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 8001ec2:	49ad      	ldr	r1, [pc, #692]	@ (8002178 <HAL_RCC_OscConfig+0x348>)
 8001ec4:	400a      	ands	r2, r1
 8001ec6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d014      	beq.n	8001efa <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed0:	f7fe ff0a 	bl	8000ce8 <HAL_GetTick>
 8001ed4:	0003      	movs	r3, r0
 8001ed6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001eda:	f7fe ff05 	bl	8000ce8 <HAL_GetTick>
 8001ede:	0002      	movs	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b64      	cmp	r3, #100	@ 0x64
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e17b      	b.n	80021e4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eec:	4ba0      	ldr	r3, [pc, #640]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	2380      	movs	r3, #128	@ 0x80
 8001ef2:	029b      	lsls	r3, r3, #10
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d0f0      	beq.n	8001eda <HAL_RCC_OscConfig+0xaa>
 8001ef8:	e013      	b.n	8001f22 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efa:	f7fe fef5 	bl	8000ce8 <HAL_GetTick>
 8001efe:	0003      	movs	r3, r0
 8001f00:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001f04:	f7fe fef0 	bl	8000ce8 <HAL_GetTick>
 8001f08:	0002      	movs	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b64      	cmp	r3, #100	@ 0x64
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e166      	b.n	80021e4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f16:	4b96      	ldr	r3, [pc, #600]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	2380      	movs	r3, #128	@ 0x80
 8001f1c:	029b      	lsls	r3, r3, #10
 8001f1e:	4013      	ands	r3, r2
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2202      	movs	r2, #2
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d100      	bne.n	8001f2e <HAL_RCC_OscConfig+0xfe>
 8001f2c:	e086      	b.n	800203c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f2e:	4b90      	ldr	r3, [pc, #576]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2238      	movs	r2, #56	@ 0x38
 8001f34:	4013      	ands	r3, r2
 8001f36:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d12f      	bne.n	8001f9e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e14c      	b.n	80021e4 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4a:	4b89      	ldr	r3, [pc, #548]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	4a8b      	ldr	r2, [pc, #556]	@ (800217c <HAL_RCC_OscConfig+0x34c>)
 8001f50:	4013      	ands	r3, r2
 8001f52:	0019      	movs	r1, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	695b      	ldr	r3, [r3, #20]
 8001f58:	021a      	lsls	r2, r3, #8
 8001f5a:	4b85      	ldr	r3, [pc, #532]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d112      	bne.n	8001f8c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001f66:	4b82      	ldr	r3, [pc, #520]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a85      	ldr	r2, [pc, #532]	@ (8002180 <HAL_RCC_OscConfig+0x350>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	0019      	movs	r1, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	691a      	ldr	r2, [r3, #16]
 8001f74:	4b7e      	ldr	r3, [pc, #504]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 8001f76:	430a      	orrs	r2, r1
 8001f78:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001f7a:	4b7d      	ldr	r3, [pc, #500]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	0adb      	lsrs	r3, r3, #11
 8001f80:	2207      	movs	r2, #7
 8001f82:	4013      	ands	r3, r2
 8001f84:	4a7f      	ldr	r2, [pc, #508]	@ (8002184 <HAL_RCC_OscConfig+0x354>)
 8001f86:	40da      	lsrs	r2, r3
 8001f88:	4b7f      	ldr	r3, [pc, #508]	@ (8002188 <HAL_RCC_OscConfig+0x358>)
 8001f8a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f8c:	4b7f      	ldr	r3, [pc, #508]	@ (800218c <HAL_RCC_OscConfig+0x35c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	0018      	movs	r0, r3
 8001f92:	f7fe fe4d 	bl	8000c30 <HAL_InitTick>
 8001f96:	1e03      	subs	r3, r0, #0
 8001f98:	d050      	beq.n	800203c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e122      	b.n	80021e4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d030      	beq.n	8002008 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001fa6:	4b72      	ldr	r3, [pc, #456]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a75      	ldr	r2, [pc, #468]	@ (8002180 <HAL_RCC_OscConfig+0x350>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	0019      	movs	r1, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691a      	ldr	r2, [r3, #16]
 8001fb4:	4b6e      	ldr	r3, [pc, #440]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001fba:	4b6d      	ldr	r3, [pc, #436]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	4b6c      	ldr	r3, [pc, #432]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 8001fc0:	2180      	movs	r1, #128	@ 0x80
 8001fc2:	0049      	lsls	r1, r1, #1
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc8:	f7fe fe8e 	bl	8000ce8 <HAL_GetTick>
 8001fcc:	0003      	movs	r3, r0
 8001fce:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001fd2:	f7fe fe89 	bl	8000ce8 <HAL_GetTick>
 8001fd6:	0002      	movs	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e0ff      	b.n	80021e4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fe4:	4b62      	ldr	r3, [pc, #392]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	2380      	movs	r3, #128	@ 0x80
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4013      	ands	r3, r2
 8001fee:	d0f0      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff0:	4b5f      	ldr	r3, [pc, #380]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	4a61      	ldr	r2, [pc, #388]	@ (800217c <HAL_RCC_OscConfig+0x34c>)
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	0019      	movs	r1, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	021a      	lsls	r2, r3, #8
 8002000:	4b5b      	ldr	r3, [pc, #364]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 8002002:	430a      	orrs	r2, r1
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	e019      	b.n	800203c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8002008:	4b59      	ldr	r3, [pc, #356]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4b58      	ldr	r3, [pc, #352]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 800200e:	4960      	ldr	r1, [pc, #384]	@ (8002190 <HAL_RCC_OscConfig+0x360>)
 8002010:	400a      	ands	r2, r1
 8002012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002014:	f7fe fe68 	bl	8000ce8 <HAL_GetTick>
 8002018:	0003      	movs	r3, r0
 800201a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800201e:	f7fe fe63 	bl	8000ce8 <HAL_GetTick>
 8002022:	0002      	movs	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e0d9      	b.n	80021e4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002030:	4b4f      	ldr	r3, [pc, #316]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	2380      	movs	r3, #128	@ 0x80
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	4013      	ands	r3, r2
 800203a:	d1f0      	bne.n	800201e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2208      	movs	r2, #8
 8002042:	4013      	ands	r3, r2
 8002044:	d042      	beq.n	80020cc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002046:	4b4a      	ldr	r3, [pc, #296]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2238      	movs	r2, #56	@ 0x38
 800204c:	4013      	ands	r3, r2
 800204e:	2b18      	cmp	r3, #24
 8002050:	d105      	bne.n	800205e <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d138      	bne.n	80020cc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e0c2      	b.n	80021e4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d019      	beq.n	800209a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002066:	4b42      	ldr	r3, [pc, #264]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 8002068:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800206a:	4b41      	ldr	r3, [pc, #260]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 800206c:	2101      	movs	r1, #1
 800206e:	430a      	orrs	r2, r1
 8002070:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002072:	f7fe fe39 	bl	8000ce8 <HAL_GetTick>
 8002076:	0003      	movs	r3, r0
 8002078:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800207c:	f7fe fe34 	bl	8000ce8 <HAL_GetTick>
 8002080:	0002      	movs	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e0aa      	b.n	80021e4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800208e:	4b38      	ldr	r3, [pc, #224]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 8002090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002092:	2202      	movs	r2, #2
 8002094:	4013      	ands	r3, r2
 8002096:	d0f1      	beq.n	800207c <HAL_RCC_OscConfig+0x24c>
 8002098:	e018      	b.n	80020cc <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800209a:	4b35      	ldr	r3, [pc, #212]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 800209c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800209e:	4b34      	ldr	r3, [pc, #208]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 80020a0:	2101      	movs	r1, #1
 80020a2:	438a      	bics	r2, r1
 80020a4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a6:	f7fe fe1f 	bl	8000ce8 <HAL_GetTick>
 80020aa:	0003      	movs	r3, r0
 80020ac:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80020b0:	f7fe fe1a 	bl	8000ce8 <HAL_GetTick>
 80020b4:	0002      	movs	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e090      	b.n	80021e4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80020c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 80020c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020c6:	2202      	movs	r2, #2
 80020c8:	4013      	ands	r3, r2
 80020ca:	d1f1      	bne.n	80020b0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2204      	movs	r2, #4
 80020d2:	4013      	ands	r3, r2
 80020d4:	d100      	bne.n	80020d8 <HAL_RCC_OscConfig+0x2a8>
 80020d6:	e084      	b.n	80021e2 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020d8:	230f      	movs	r3, #15
 80020da:	18fb      	adds	r3, r7, r3
 80020dc:	2200      	movs	r2, #0
 80020de:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80020e0:	4b23      	ldr	r3, [pc, #140]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	2238      	movs	r2, #56	@ 0x38
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b20      	cmp	r3, #32
 80020ea:	d106      	bne.n	80020fa <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d000      	beq.n	80020f6 <HAL_RCC_OscConfig+0x2c6>
 80020f4:	e075      	b.n	80021e2 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e074      	b.n	80021e4 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d106      	bne.n	8002110 <HAL_RCC_OscConfig+0x2e0>
 8002102:	4b1b      	ldr	r3, [pc, #108]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 8002104:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002106:	4b1a      	ldr	r3, [pc, #104]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 8002108:	2101      	movs	r1, #1
 800210a:	430a      	orrs	r2, r1
 800210c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800210e:	e01c      	b.n	800214a <HAL_RCC_OscConfig+0x31a>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2b05      	cmp	r3, #5
 8002116:	d10c      	bne.n	8002132 <HAL_RCC_OscConfig+0x302>
 8002118:	4b15      	ldr	r3, [pc, #84]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 800211a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800211c:	4b14      	ldr	r3, [pc, #80]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 800211e:	2104      	movs	r1, #4
 8002120:	430a      	orrs	r2, r1
 8002122:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002124:	4b12      	ldr	r3, [pc, #72]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 8002126:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002128:	4b11      	ldr	r3, [pc, #68]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 800212a:	2101      	movs	r1, #1
 800212c:	430a      	orrs	r2, r1
 800212e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002130:	e00b      	b.n	800214a <HAL_RCC_OscConfig+0x31a>
 8002132:	4b0f      	ldr	r3, [pc, #60]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 8002134:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002136:	4b0e      	ldr	r3, [pc, #56]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 8002138:	2101      	movs	r1, #1
 800213a:	438a      	bics	r2, r1
 800213c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800213e:	4b0c      	ldr	r3, [pc, #48]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 8002140:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002142:	4b0b      	ldr	r3, [pc, #44]	@ (8002170 <HAL_RCC_OscConfig+0x340>)
 8002144:	2104      	movs	r1, #4
 8002146:	438a      	bics	r2, r1
 8002148:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d028      	beq.n	80021a4 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002152:	f7fe fdc9 	bl	8000ce8 <HAL_GetTick>
 8002156:	0003      	movs	r3, r0
 8002158:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800215a:	e01d      	b.n	8002198 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800215c:	f7fe fdc4 	bl	8000ce8 <HAL_GetTick>
 8002160:	0002      	movs	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	4a0b      	ldr	r2, [pc, #44]	@ (8002194 <HAL_RCC_OscConfig+0x364>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d915      	bls.n	8002198 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e039      	b.n	80021e4 <HAL_RCC_OscConfig+0x3b4>
 8002170:	40021000 	.word	0x40021000
 8002174:	fffeffff 	.word	0xfffeffff
 8002178:	fffbffff 	.word	0xfffbffff
 800217c:	ffff80ff 	.word	0xffff80ff
 8002180:	ffffc7ff 	.word	0xffffc7ff
 8002184:	02dc6c00 	.word	0x02dc6c00
 8002188:	20000000 	.word	0x20000000
 800218c:	20000004 	.word	0x20000004
 8002190:	fffffeff 	.word	0xfffffeff
 8002194:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002198:	4b14      	ldr	r3, [pc, #80]	@ (80021ec <HAL_RCC_OscConfig+0x3bc>)
 800219a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800219c:	2202      	movs	r2, #2
 800219e:	4013      	ands	r3, r2
 80021a0:	d0dc      	beq.n	800215c <HAL_RCC_OscConfig+0x32c>
 80021a2:	e013      	b.n	80021cc <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a4:	f7fe fda0 	bl	8000ce8 <HAL_GetTick>
 80021a8:	0003      	movs	r3, r0
 80021aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80021ac:	e009      	b.n	80021c2 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ae:	f7fe fd9b 	bl	8000ce8 <HAL_GetTick>
 80021b2:	0002      	movs	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	4a0d      	ldr	r2, [pc, #52]	@ (80021f0 <HAL_RCC_OscConfig+0x3c0>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e010      	b.n	80021e4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80021c2:	4b0a      	ldr	r3, [pc, #40]	@ (80021ec <HAL_RCC_OscConfig+0x3bc>)
 80021c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c6:	2202      	movs	r2, #2
 80021c8:	4013      	ands	r3, r2
 80021ca:	d1f0      	bne.n	80021ae <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80021cc:	230f      	movs	r3, #15
 80021ce:	18fb      	adds	r3, r7, r3
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d105      	bne.n	80021e2 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80021d6:	4b05      	ldr	r3, [pc, #20]	@ (80021ec <HAL_RCC_OscConfig+0x3bc>)
 80021d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021da:	4b04      	ldr	r3, [pc, #16]	@ (80021ec <HAL_RCC_OscConfig+0x3bc>)
 80021dc:	4905      	ldr	r1, [pc, #20]	@ (80021f4 <HAL_RCC_OscConfig+0x3c4>)
 80021de:	400a      	ands	r2, r1
 80021e0:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	0018      	movs	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	b006      	add	sp, #24
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40021000 	.word	0x40021000
 80021f0:	00001388 	.word	0x00001388
 80021f4:	efffffff 	.word	0xefffffff

080021f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e0e9      	b.n	80023e0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800220c:	4b76      	ldr	r3, [pc, #472]	@ (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2207      	movs	r2, #7
 8002212:	4013      	ands	r3, r2
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d91e      	bls.n	8002258 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b73      	ldr	r3, [pc, #460]	@ (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2207      	movs	r2, #7
 8002220:	4393      	bics	r3, r2
 8002222:	0019      	movs	r1, r3
 8002224:	4b70      	ldr	r3, [pc, #448]	@ (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800222c:	f7fe fd5c 	bl	8000ce8 <HAL_GetTick>
 8002230:	0003      	movs	r3, r0
 8002232:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002234:	e009      	b.n	800224a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002236:	f7fe fd57 	bl	8000ce8 <HAL_GetTick>
 800223a:	0002      	movs	r2, r0
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	4a6a      	ldr	r2, [pc, #424]	@ (80023ec <HAL_RCC_ClockConfig+0x1f4>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e0ca      	b.n	80023e0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800224a:	4b67      	ldr	r3, [pc, #412]	@ (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2207      	movs	r2, #7
 8002250:	4013      	ands	r3, r2
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d1ee      	bne.n	8002236 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2202      	movs	r2, #2
 800225e:	4013      	ands	r3, r2
 8002260:	d017      	beq.n	8002292 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2204      	movs	r2, #4
 8002268:	4013      	ands	r3, r2
 800226a:	d008      	beq.n	800227e <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800226c:	4b60      	ldr	r3, [pc, #384]	@ (80023f0 <HAL_RCC_ClockConfig+0x1f8>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	4a60      	ldr	r2, [pc, #384]	@ (80023f4 <HAL_RCC_ClockConfig+0x1fc>)
 8002272:	401a      	ands	r2, r3
 8002274:	4b5e      	ldr	r3, [pc, #376]	@ (80023f0 <HAL_RCC_ClockConfig+0x1f8>)
 8002276:	21b0      	movs	r1, #176	@ 0xb0
 8002278:	0109      	lsls	r1, r1, #4
 800227a:	430a      	orrs	r2, r1
 800227c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800227e:	4b5c      	ldr	r3, [pc, #368]	@ (80023f0 <HAL_RCC_ClockConfig+0x1f8>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	4a5d      	ldr	r2, [pc, #372]	@ (80023f8 <HAL_RCC_ClockConfig+0x200>)
 8002284:	4013      	ands	r3, r2
 8002286:	0019      	movs	r1, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68da      	ldr	r2, [r3, #12]
 800228c:	4b58      	ldr	r3, [pc, #352]	@ (80023f0 <HAL_RCC_ClockConfig+0x1f8>)
 800228e:	430a      	orrs	r2, r1
 8002290:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2201      	movs	r2, #1
 8002298:	4013      	ands	r3, r2
 800229a:	d055      	beq.n	8002348 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 800229c:	4b54      	ldr	r3, [pc, #336]	@ (80023f0 <HAL_RCC_ClockConfig+0x1f8>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	221c      	movs	r2, #28
 80022a2:	4393      	bics	r3, r2
 80022a4:	0019      	movs	r1, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689a      	ldr	r2, [r3, #8]
 80022aa:	4b51      	ldr	r3, [pc, #324]	@ (80023f0 <HAL_RCC_ClockConfig+0x1f8>)
 80022ac:	430a      	orrs	r2, r1
 80022ae:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d107      	bne.n	80022c8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022b8:	4b4d      	ldr	r3, [pc, #308]	@ (80023f0 <HAL_RCC_ClockConfig+0x1f8>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	2380      	movs	r3, #128	@ 0x80
 80022be:	029b      	lsls	r3, r3, #10
 80022c0:	4013      	ands	r3, r2
 80022c2:	d11f      	bne.n	8002304 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e08b      	b.n	80023e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d107      	bne.n	80022e0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022d0:	4b47      	ldr	r3, [pc, #284]	@ (80023f0 <HAL_RCC_ClockConfig+0x1f8>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	2380      	movs	r3, #128	@ 0x80
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4013      	ands	r3, r2
 80022da:	d113      	bne.n	8002304 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e07f      	b.n	80023e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	d106      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80022e8:	4b41      	ldr	r3, [pc, #260]	@ (80023f0 <HAL_RCC_ClockConfig+0x1f8>)
 80022ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ec:	2202      	movs	r2, #2
 80022ee:	4013      	ands	r3, r2
 80022f0:	d108      	bne.n	8002304 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e074      	b.n	80023e0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80022f6:	4b3e      	ldr	r3, [pc, #248]	@ (80023f0 <HAL_RCC_ClockConfig+0x1f8>)
 80022f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022fa:	2202      	movs	r2, #2
 80022fc:	4013      	ands	r3, r2
 80022fe:	d101      	bne.n	8002304 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e06d      	b.n	80023e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002304:	4b3a      	ldr	r3, [pc, #232]	@ (80023f0 <HAL_RCC_ClockConfig+0x1f8>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	2207      	movs	r2, #7
 800230a:	4393      	bics	r3, r2
 800230c:	0019      	movs	r1, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	4b37      	ldr	r3, [pc, #220]	@ (80023f0 <HAL_RCC_ClockConfig+0x1f8>)
 8002314:	430a      	orrs	r2, r1
 8002316:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002318:	f7fe fce6 	bl	8000ce8 <HAL_GetTick>
 800231c:	0003      	movs	r3, r0
 800231e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002320:	e009      	b.n	8002336 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002322:	f7fe fce1 	bl	8000ce8 <HAL_GetTick>
 8002326:	0002      	movs	r2, r0
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	4a2f      	ldr	r2, [pc, #188]	@ (80023ec <HAL_RCC_ClockConfig+0x1f4>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e054      	b.n	80023e0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002336:	4b2e      	ldr	r3, [pc, #184]	@ (80023f0 <HAL_RCC_ClockConfig+0x1f8>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	2238      	movs	r2, #56	@ 0x38
 800233c:	401a      	ands	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	429a      	cmp	r2, r3
 8002346:	d1ec      	bne.n	8002322 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002348:	4b27      	ldr	r3, [pc, #156]	@ (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2207      	movs	r2, #7
 800234e:	4013      	ands	r3, r2
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d21e      	bcs.n	8002394 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002356:	4b24      	ldr	r3, [pc, #144]	@ (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2207      	movs	r2, #7
 800235c:	4393      	bics	r3, r2
 800235e:	0019      	movs	r1, r3
 8002360:	4b21      	ldr	r3, [pc, #132]	@ (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	430a      	orrs	r2, r1
 8002366:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002368:	f7fe fcbe 	bl	8000ce8 <HAL_GetTick>
 800236c:	0003      	movs	r3, r0
 800236e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002370:	e009      	b.n	8002386 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002372:	f7fe fcb9 	bl	8000ce8 <HAL_GetTick>
 8002376:	0002      	movs	r2, r0
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	4a1b      	ldr	r2, [pc, #108]	@ (80023ec <HAL_RCC_ClockConfig+0x1f4>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e02c      	b.n	80023e0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002386:	4b18      	ldr	r3, [pc, #96]	@ (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2207      	movs	r2, #7
 800238c:	4013      	ands	r3, r2
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d1ee      	bne.n	8002372 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2204      	movs	r2, #4
 800239a:	4013      	ands	r3, r2
 800239c:	d009      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800239e:	4b14      	ldr	r3, [pc, #80]	@ (80023f0 <HAL_RCC_ClockConfig+0x1f8>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	4a16      	ldr	r2, [pc, #88]	@ (80023fc <HAL_RCC_ClockConfig+0x204>)
 80023a4:	4013      	ands	r3, r2
 80023a6:	0019      	movs	r1, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	4b10      	ldr	r3, [pc, #64]	@ (80023f0 <HAL_RCC_ClockConfig+0x1f8>)
 80023ae:	430a      	orrs	r2, r1
 80023b0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80023b2:	f000 f82b 	bl	800240c <HAL_RCC_GetSysClockFreq>
 80023b6:	0001      	movs	r1, r0
 80023b8:	4b0d      	ldr	r3, [pc, #52]	@ (80023f0 <HAL_RCC_ClockConfig+0x1f8>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	0a1b      	lsrs	r3, r3, #8
 80023be:	220f      	movs	r2, #15
 80023c0:	401a      	ands	r2, r3
 80023c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002400 <HAL_RCC_ClockConfig+0x208>)
 80023c4:	0092      	lsls	r2, r2, #2
 80023c6:	58d3      	ldr	r3, [r2, r3]
 80023c8:	221f      	movs	r2, #31
 80023ca:	4013      	ands	r3, r2
 80023cc:	000a      	movs	r2, r1
 80023ce:	40da      	lsrs	r2, r3
 80023d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002404 <HAL_RCC_ClockConfig+0x20c>)
 80023d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80023d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002408 <HAL_RCC_ClockConfig+0x210>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	0018      	movs	r0, r3
 80023da:	f7fe fc29 	bl	8000c30 <HAL_InitTick>
 80023de:	0003      	movs	r3, r0
}
 80023e0:	0018      	movs	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	b004      	add	sp, #16
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40022000 	.word	0x40022000
 80023ec:	00001388 	.word	0x00001388
 80023f0:	40021000 	.word	0x40021000
 80023f4:	ffff84ff 	.word	0xffff84ff
 80023f8:	fffff0ff 	.word	0xfffff0ff
 80023fc:	ffff8fff 	.word	0xffff8fff
 8002400:	08003858 	.word	0x08003858
 8002404:	20000000 	.word	0x20000000
 8002408:	20000004 	.word	0x20000004

0800240c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002412:	4b1c      	ldr	r3, [pc, #112]	@ (8002484 <HAL_RCC_GetSysClockFreq+0x78>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	2238      	movs	r2, #56	@ 0x38
 8002418:	4013      	ands	r3, r2
 800241a:	d10f      	bne.n	800243c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800241c:	4b19      	ldr	r3, [pc, #100]	@ (8002484 <HAL_RCC_GetSysClockFreq+0x78>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	0adb      	lsrs	r3, r3, #11
 8002422:	2207      	movs	r2, #7
 8002424:	4013      	ands	r3, r2
 8002426:	2201      	movs	r2, #1
 8002428:	409a      	lsls	r2, r3
 800242a:	0013      	movs	r3, r2
 800242c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800242e:	6839      	ldr	r1, [r7, #0]
 8002430:	4815      	ldr	r0, [pc, #84]	@ (8002488 <HAL_RCC_GetSysClockFreq+0x7c>)
 8002432:	f7fd fe69 	bl	8000108 <__udivsi3>
 8002436:	0003      	movs	r3, r0
 8002438:	607b      	str	r3, [r7, #4]
 800243a:	e01e      	b.n	800247a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800243c:	4b11      	ldr	r3, [pc, #68]	@ (8002484 <HAL_RCC_GetSysClockFreq+0x78>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	2238      	movs	r2, #56	@ 0x38
 8002442:	4013      	ands	r3, r2
 8002444:	2b08      	cmp	r3, #8
 8002446:	d102      	bne.n	800244e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002448:	4b10      	ldr	r3, [pc, #64]	@ (800248c <HAL_RCC_GetSysClockFreq+0x80>)
 800244a:	607b      	str	r3, [r7, #4]
 800244c:	e015      	b.n	800247a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800244e:	4b0d      	ldr	r3, [pc, #52]	@ (8002484 <HAL_RCC_GetSysClockFreq+0x78>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	2238      	movs	r2, #56	@ 0x38
 8002454:	4013      	ands	r3, r2
 8002456:	2b20      	cmp	r3, #32
 8002458:	d103      	bne.n	8002462 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800245a:	2380      	movs	r3, #128	@ 0x80
 800245c:	021b      	lsls	r3, r3, #8
 800245e:	607b      	str	r3, [r7, #4]
 8002460:	e00b      	b.n	800247a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002462:	4b08      	ldr	r3, [pc, #32]	@ (8002484 <HAL_RCC_GetSysClockFreq+0x78>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	2238      	movs	r2, #56	@ 0x38
 8002468:	4013      	ands	r3, r2
 800246a:	2b18      	cmp	r3, #24
 800246c:	d103      	bne.n	8002476 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800246e:	23fa      	movs	r3, #250	@ 0xfa
 8002470:	01db      	lsls	r3, r3, #7
 8002472:	607b      	str	r3, [r7, #4]
 8002474:	e001      	b.n	800247a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8002476:	2300      	movs	r3, #0
 8002478:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 800247a:	687b      	ldr	r3, [r7, #4]
}
 800247c:	0018      	movs	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	b002      	add	sp, #8
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40021000 	.word	0x40021000
 8002488:	02dc6c00 	.word	0x02dc6c00
 800248c:	007a1200 	.word	0x007a1200

08002490 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002498:	2313      	movs	r3, #19
 800249a:	18fb      	adds	r3, r7, r3
 800249c:	2200      	movs	r2, #0
 800249e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024a0:	2312      	movs	r3, #18
 80024a2:	18fb      	adds	r3, r7, r3
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	2380      	movs	r3, #128	@ 0x80
 80024ae:	029b      	lsls	r3, r3, #10
 80024b0:	4013      	ands	r3, r2
 80024b2:	d100      	bne.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80024b4:	e079      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024b6:	2011      	movs	r0, #17
 80024b8:	183b      	adds	r3, r7, r0
 80024ba:	2200      	movs	r2, #0
 80024bc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024be:	4b64      	ldr	r3, [pc, #400]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80024c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024c2:	2380      	movs	r3, #128	@ 0x80
 80024c4:	055b      	lsls	r3, r3, #21
 80024c6:	4013      	ands	r3, r2
 80024c8:	d110      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ca:	4b61      	ldr	r3, [pc, #388]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80024cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024ce:	4b60      	ldr	r3, [pc, #384]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80024d0:	2180      	movs	r1, #128	@ 0x80
 80024d2:	0549      	lsls	r1, r1, #21
 80024d4:	430a      	orrs	r2, r1
 80024d6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80024d8:	4b5d      	ldr	r3, [pc, #372]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80024da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024dc:	2380      	movs	r3, #128	@ 0x80
 80024de:	055b      	lsls	r3, r3, #21
 80024e0:	4013      	ands	r3, r2
 80024e2:	60bb      	str	r3, [r7, #8]
 80024e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024e6:	183b      	adds	r3, r7, r0
 80024e8:	2201      	movs	r2, #1
 80024ea:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80024ec:	4b58      	ldr	r3, [pc, #352]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80024ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024f0:	23c0      	movs	r3, #192	@ 0xc0
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4013      	ands	r3, r2
 80024f6:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d019      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	429a      	cmp	r2, r3
 8002506:	d014      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002508:	4b51      	ldr	r3, [pc, #324]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800250a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800250c:	4a51      	ldr	r2, [pc, #324]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800250e:	4013      	ands	r3, r2
 8002510:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002512:	4b4f      	ldr	r3, [pc, #316]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002514:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002516:	4b4e      	ldr	r3, [pc, #312]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002518:	2180      	movs	r1, #128	@ 0x80
 800251a:	0249      	lsls	r1, r1, #9
 800251c:	430a      	orrs	r2, r1
 800251e:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002520:	4b4b      	ldr	r3, [pc, #300]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002522:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002524:	4b4a      	ldr	r3, [pc, #296]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002526:	494c      	ldr	r1, [pc, #304]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002528:	400a      	ands	r2, r1
 800252a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 800252c:	4b48      	ldr	r3, [pc, #288]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	2201      	movs	r2, #1
 8002536:	4013      	ands	r3, r2
 8002538:	d016      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800253a:	f7fe fbd5 	bl	8000ce8 <HAL_GetTick>
 800253e:	0003      	movs	r3, r0
 8002540:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002542:	e00c      	b.n	800255e <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002544:	f7fe fbd0 	bl	8000ce8 <HAL_GetTick>
 8002548:	0002      	movs	r2, r0
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	4a43      	ldr	r2, [pc, #268]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d904      	bls.n	800255e <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8002554:	2313      	movs	r3, #19
 8002556:	18fb      	adds	r3, r7, r3
 8002558:	2203      	movs	r2, #3
 800255a:	701a      	strb	r2, [r3, #0]
          break;
 800255c:	e004      	b.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800255e:	4b3c      	ldr	r3, [pc, #240]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002562:	2202      	movs	r2, #2
 8002564:	4013      	ands	r3, r2
 8002566:	d0ed      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8002568:	2313      	movs	r3, #19
 800256a:	18fb      	adds	r3, r7, r3
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10a      	bne.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002572:	4b37      	ldr	r3, [pc, #220]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002576:	4a37      	ldr	r2, [pc, #220]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002578:	4013      	ands	r3, r2
 800257a:	0019      	movs	r1, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	699a      	ldr	r2, [r3, #24]
 8002580:	4b33      	ldr	r3, [pc, #204]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002582:	430a      	orrs	r2, r1
 8002584:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002586:	e005      	b.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002588:	2312      	movs	r3, #18
 800258a:	18fb      	adds	r3, r7, r3
 800258c:	2213      	movs	r2, #19
 800258e:	18ba      	adds	r2, r7, r2
 8002590:	7812      	ldrb	r2, [r2, #0]
 8002592:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002594:	2311      	movs	r3, #17
 8002596:	18fb      	adds	r3, r7, r3
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d105      	bne.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800259e:	4b2c      	ldr	r3, [pc, #176]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025a4:	492e      	ldr	r1, [pc, #184]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025a6:	400a      	ands	r2, r1
 80025a8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2201      	movs	r2, #1
 80025b0:	4013      	ands	r3, r2
 80025b2:	d009      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025b4:	4b26      	ldr	r3, [pc, #152]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025b8:	2203      	movs	r2, #3
 80025ba:	4393      	bics	r3, r2
 80025bc:	0019      	movs	r1, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	4b23      	ldr	r3, [pc, #140]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025c4:	430a      	orrs	r2, r1
 80025c6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2240      	movs	r2, #64	@ 0x40
 80025ce:	4013      	ands	r3, r2
 80025d0:	d009      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025d6:	4a23      	ldr	r2, [pc, #140]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025d8:	4013      	ands	r3, r2
 80025da:	0019      	movs	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025e2:	430a      	orrs	r2, r1
 80025e4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	2380      	movs	r3, #128	@ 0x80
 80025ec:	01db      	lsls	r3, r3, #7
 80025ee:	4013      	ands	r3, r2
 80025f0:	d008      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025f2:	4b17      	ldr	r3, [pc, #92]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	0899      	lsrs	r1, r3, #2
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	695a      	ldr	r2, [r3, #20]
 80025fe:	4b14      	ldr	r3, [pc, #80]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002600:	430a      	orrs	r2, r1
 8002602:	655a      	str	r2, [r3, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	2380      	movs	r3, #128	@ 0x80
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	4013      	ands	r3, r2
 800260e:	d009      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002610:	4b0f      	ldr	r3, [pc, #60]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002614:	4a14      	ldr	r2, [pc, #80]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002616:	4013      	ands	r3, r2
 8002618:	0019      	movs	r1, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691a      	ldr	r2, [r3, #16]
 800261e:	4b0c      	ldr	r3, [pc, #48]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002620:	430a      	orrs	r2, r1
 8002622:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	da09      	bge.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 800262c:	4b08      	ldr	r3, [pc, #32]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	22e0      	movs	r2, #224	@ 0xe0
 8002632:	4393      	bics	r3, r2
 8002634:	0019      	movs	r1, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	4b05      	ldr	r3, [pc, #20]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800263c:	430a      	orrs	r2, r1
 800263e:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002640:	2312      	movs	r3, #18
 8002642:	18fb      	adds	r3, r7, r3
 8002644:	781b      	ldrb	r3, [r3, #0]
}
 8002646:	0018      	movs	r0, r3
 8002648:	46bd      	mov	sp, r7
 800264a:	b006      	add	sp, #24
 800264c:	bd80      	pop	{r7, pc}
 800264e:	46c0      	nop			@ (mov r8, r8)
 8002650:	40021000 	.word	0x40021000
 8002654:	fffffcff 	.word	0xfffffcff
 8002658:	fffeffff 	.word	0xfffeffff
 800265c:	00001388 	.word	0x00001388
 8002660:	efffffff 	.word	0xefffffff
 8002664:	ffffcfff 	.word	0xffffcfff
 8002668:	ffff3fff 	.word	0xffff3fff

0800266c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e04a      	b.n	8002714 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	223d      	movs	r2, #61	@ 0x3d
 8002682:	5c9b      	ldrb	r3, [r3, r2]
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d107      	bne.n	800269a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	223c      	movs	r2, #60	@ 0x3c
 800268e:	2100      	movs	r1, #0
 8002690:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	0018      	movs	r0, r3
 8002696:	f7fe f9d9 	bl	8000a4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	223d      	movs	r2, #61	@ 0x3d
 800269e:	2102      	movs	r1, #2
 80026a0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	3304      	adds	r3, #4
 80026aa:	0019      	movs	r1, r3
 80026ac:	0010      	movs	r0, r2
 80026ae:	f000 fc4f 	bl	8002f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2248      	movs	r2, #72	@ 0x48
 80026b6:	2101      	movs	r1, #1
 80026b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	223e      	movs	r2, #62	@ 0x3e
 80026be:	2101      	movs	r1, #1
 80026c0:	5499      	strb	r1, [r3, r2]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	223f      	movs	r2, #63	@ 0x3f
 80026c6:	2101      	movs	r1, #1
 80026c8:	5499      	strb	r1, [r3, r2]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2240      	movs	r2, #64	@ 0x40
 80026ce:	2101      	movs	r1, #1
 80026d0:	5499      	strb	r1, [r3, r2]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2241      	movs	r2, #65	@ 0x41
 80026d6:	2101      	movs	r1, #1
 80026d8:	5499      	strb	r1, [r3, r2]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2242      	movs	r2, #66	@ 0x42
 80026de:	2101      	movs	r1, #1
 80026e0:	5499      	strb	r1, [r3, r2]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2243      	movs	r2, #67	@ 0x43
 80026e6:	2101      	movs	r1, #1
 80026e8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2244      	movs	r2, #68	@ 0x44
 80026ee:	2101      	movs	r1, #1
 80026f0:	5499      	strb	r1, [r3, r2]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2245      	movs	r2, #69	@ 0x45
 80026f6:	2101      	movs	r1, #1
 80026f8:	5499      	strb	r1, [r3, r2]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2246      	movs	r2, #70	@ 0x46
 80026fe:	2101      	movs	r1, #1
 8002700:	5499      	strb	r1, [r3, r2]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2247      	movs	r2, #71	@ 0x47
 8002706:	2101      	movs	r1, #1
 8002708:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	223d      	movs	r2, #61	@ 0x3d
 800270e:	2101      	movs	r1, #1
 8002710:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	0018      	movs	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	b002      	add	sp, #8
 800271a:	bd80      	pop	{r7, pc}

0800271c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e04a      	b.n	80027c4 <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	223d      	movs	r2, #61	@ 0x3d
 8002732:	5c9b      	ldrb	r3, [r3, r2]
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d107      	bne.n	800274a <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	223c      	movs	r2, #60	@ 0x3c
 800273e:	2100      	movs	r1, #0
 8002740:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	0018      	movs	r0, r3
 8002746:	f000 f841 	bl	80027cc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	223d      	movs	r2, #61	@ 0x3d
 800274e:	2102      	movs	r1, #2
 8002750:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3304      	adds	r3, #4
 800275a:	0019      	movs	r1, r3
 800275c:	0010      	movs	r0, r2
 800275e:	f000 fbf7 	bl	8002f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2248      	movs	r2, #72	@ 0x48
 8002766:	2101      	movs	r1, #1
 8002768:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	223e      	movs	r2, #62	@ 0x3e
 800276e:	2101      	movs	r1, #1
 8002770:	5499      	strb	r1, [r3, r2]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	223f      	movs	r2, #63	@ 0x3f
 8002776:	2101      	movs	r1, #1
 8002778:	5499      	strb	r1, [r3, r2]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2240      	movs	r2, #64	@ 0x40
 800277e:	2101      	movs	r1, #1
 8002780:	5499      	strb	r1, [r3, r2]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2241      	movs	r2, #65	@ 0x41
 8002786:	2101      	movs	r1, #1
 8002788:	5499      	strb	r1, [r3, r2]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2242      	movs	r2, #66	@ 0x42
 800278e:	2101      	movs	r1, #1
 8002790:	5499      	strb	r1, [r3, r2]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2243      	movs	r2, #67	@ 0x43
 8002796:	2101      	movs	r1, #1
 8002798:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2244      	movs	r2, #68	@ 0x44
 800279e:	2101      	movs	r1, #1
 80027a0:	5499      	strb	r1, [r3, r2]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2245      	movs	r2, #69	@ 0x45
 80027a6:	2101      	movs	r1, #1
 80027a8:	5499      	strb	r1, [r3, r2]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2246      	movs	r2, #70	@ 0x46
 80027ae:	2101      	movs	r1, #1
 80027b0:	5499      	strb	r1, [r3, r2]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2247      	movs	r2, #71	@ 0x47
 80027b6:	2101      	movs	r1, #1
 80027b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	223d      	movs	r2, #61	@ 0x3d
 80027be:	2101      	movs	r1, #1
 80027c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	0018      	movs	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	b002      	add	sp, #8
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80027d4:	46c0      	nop			@ (mov r8, r8)
 80027d6:	46bd      	mov	sp, r7
 80027d8:	b002      	add	sp, #8
 80027da:	bd80      	pop	{r7, pc}

080027dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e04a      	b.n	8002884 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	223d      	movs	r2, #61	@ 0x3d
 80027f2:	5c9b      	ldrb	r3, [r3, r2]
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d107      	bne.n	800280a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	223c      	movs	r2, #60	@ 0x3c
 80027fe:	2100      	movs	r1, #0
 8002800:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	0018      	movs	r0, r3
 8002806:	f7fe f8f9 	bl	80009fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	223d      	movs	r2, #61	@ 0x3d
 800280e:	2102      	movs	r1, #2
 8002810:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3304      	adds	r3, #4
 800281a:	0019      	movs	r1, r3
 800281c:	0010      	movs	r0, r2
 800281e:	f000 fb97 	bl	8002f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2248      	movs	r2, #72	@ 0x48
 8002826:	2101      	movs	r1, #1
 8002828:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	223e      	movs	r2, #62	@ 0x3e
 800282e:	2101      	movs	r1, #1
 8002830:	5499      	strb	r1, [r3, r2]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	223f      	movs	r2, #63	@ 0x3f
 8002836:	2101      	movs	r1, #1
 8002838:	5499      	strb	r1, [r3, r2]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2240      	movs	r2, #64	@ 0x40
 800283e:	2101      	movs	r1, #1
 8002840:	5499      	strb	r1, [r3, r2]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2241      	movs	r2, #65	@ 0x41
 8002846:	2101      	movs	r1, #1
 8002848:	5499      	strb	r1, [r3, r2]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2242      	movs	r2, #66	@ 0x42
 800284e:	2101      	movs	r1, #1
 8002850:	5499      	strb	r1, [r3, r2]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2243      	movs	r2, #67	@ 0x43
 8002856:	2101      	movs	r1, #1
 8002858:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2244      	movs	r2, #68	@ 0x44
 800285e:	2101      	movs	r1, #1
 8002860:	5499      	strb	r1, [r3, r2]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2245      	movs	r2, #69	@ 0x45
 8002866:	2101      	movs	r1, #1
 8002868:	5499      	strb	r1, [r3, r2]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2246      	movs	r2, #70	@ 0x46
 800286e:	2101      	movs	r1, #1
 8002870:	5499      	strb	r1, [r3, r2]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2247      	movs	r2, #71	@ 0x47
 8002876:	2101      	movs	r1, #1
 8002878:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	223d      	movs	r2, #61	@ 0x3d
 800287e:	2101      	movs	r1, #1
 8002880:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	0018      	movs	r0, r3
 8002886:	46bd      	mov	sp, r7
 8002888:	b002      	add	sp, #8
 800288a:	bd80      	pop	{r7, pc}

0800288c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d108      	bne.n	80028ae <HAL_TIM_PWM_Start+0x22>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	223e      	movs	r2, #62	@ 0x3e
 80028a0:	5c9b      	ldrb	r3, [r3, r2]
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	3b01      	subs	r3, #1
 80028a6:	1e5a      	subs	r2, r3, #1
 80028a8:	4193      	sbcs	r3, r2
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	e037      	b.n	800291e <HAL_TIM_PWM_Start+0x92>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	d108      	bne.n	80028c6 <HAL_TIM_PWM_Start+0x3a>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	223f      	movs	r2, #63	@ 0x3f
 80028b8:	5c9b      	ldrb	r3, [r3, r2]
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	3b01      	subs	r3, #1
 80028be:	1e5a      	subs	r2, r3, #1
 80028c0:	4193      	sbcs	r3, r2
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	e02b      	b.n	800291e <HAL_TIM_PWM_Start+0x92>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d108      	bne.n	80028de <HAL_TIM_PWM_Start+0x52>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2240      	movs	r2, #64	@ 0x40
 80028d0:	5c9b      	ldrb	r3, [r3, r2]
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	3b01      	subs	r3, #1
 80028d6:	1e5a      	subs	r2, r3, #1
 80028d8:	4193      	sbcs	r3, r2
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	e01f      	b.n	800291e <HAL_TIM_PWM_Start+0x92>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	2b0c      	cmp	r3, #12
 80028e2:	d108      	bne.n	80028f6 <HAL_TIM_PWM_Start+0x6a>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2241      	movs	r2, #65	@ 0x41
 80028e8:	5c9b      	ldrb	r3, [r3, r2]
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	3b01      	subs	r3, #1
 80028ee:	1e5a      	subs	r2, r3, #1
 80028f0:	4193      	sbcs	r3, r2
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	e013      	b.n	800291e <HAL_TIM_PWM_Start+0x92>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	2b10      	cmp	r3, #16
 80028fa:	d108      	bne.n	800290e <HAL_TIM_PWM_Start+0x82>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2242      	movs	r2, #66	@ 0x42
 8002900:	5c9b      	ldrb	r3, [r3, r2]
 8002902:	b2db      	uxtb	r3, r3
 8002904:	3b01      	subs	r3, #1
 8002906:	1e5a      	subs	r2, r3, #1
 8002908:	4193      	sbcs	r3, r2
 800290a:	b2db      	uxtb	r3, r3
 800290c:	e007      	b.n	800291e <HAL_TIM_PWM_Start+0x92>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2243      	movs	r2, #67	@ 0x43
 8002912:	5c9b      	ldrb	r3, [r3, r2]
 8002914:	b2db      	uxtb	r3, r3
 8002916:	3b01      	subs	r3, #1
 8002918:	1e5a      	subs	r2, r3, #1
 800291a:	4193      	sbcs	r3, r2
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e07b      	b.n	8002a1e <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d104      	bne.n	8002936 <HAL_TIM_PWM_Start+0xaa>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	223e      	movs	r2, #62	@ 0x3e
 8002930:	2102      	movs	r1, #2
 8002932:	5499      	strb	r1, [r3, r2]
 8002934:	e023      	b.n	800297e <HAL_TIM_PWM_Start+0xf2>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	2b04      	cmp	r3, #4
 800293a:	d104      	bne.n	8002946 <HAL_TIM_PWM_Start+0xba>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	223f      	movs	r2, #63	@ 0x3f
 8002940:	2102      	movs	r1, #2
 8002942:	5499      	strb	r1, [r3, r2]
 8002944:	e01b      	b.n	800297e <HAL_TIM_PWM_Start+0xf2>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	2b08      	cmp	r3, #8
 800294a:	d104      	bne.n	8002956 <HAL_TIM_PWM_Start+0xca>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2240      	movs	r2, #64	@ 0x40
 8002950:	2102      	movs	r1, #2
 8002952:	5499      	strb	r1, [r3, r2]
 8002954:	e013      	b.n	800297e <HAL_TIM_PWM_Start+0xf2>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	2b0c      	cmp	r3, #12
 800295a:	d104      	bne.n	8002966 <HAL_TIM_PWM_Start+0xda>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2241      	movs	r2, #65	@ 0x41
 8002960:	2102      	movs	r1, #2
 8002962:	5499      	strb	r1, [r3, r2]
 8002964:	e00b      	b.n	800297e <HAL_TIM_PWM_Start+0xf2>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2b10      	cmp	r3, #16
 800296a:	d104      	bne.n	8002976 <HAL_TIM_PWM_Start+0xea>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2242      	movs	r2, #66	@ 0x42
 8002970:	2102      	movs	r1, #2
 8002972:	5499      	strb	r1, [r3, r2]
 8002974:	e003      	b.n	800297e <HAL_TIM_PWM_Start+0xf2>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2243      	movs	r2, #67	@ 0x43
 800297a:	2102      	movs	r1, #2
 800297c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6839      	ldr	r1, [r7, #0]
 8002984:	2201      	movs	r2, #1
 8002986:	0018      	movs	r0, r3
 8002988:	f000 fdea 	bl	8003560 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a25      	ldr	r2, [pc, #148]	@ (8002a28 <HAL_TIM_PWM_Start+0x19c>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d009      	beq.n	80029aa <HAL_TIM_PWM_Start+0x11e>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a24      	ldr	r2, [pc, #144]	@ (8002a2c <HAL_TIM_PWM_Start+0x1a0>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d004      	beq.n	80029aa <HAL_TIM_PWM_Start+0x11e>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a22      	ldr	r2, [pc, #136]	@ (8002a30 <HAL_TIM_PWM_Start+0x1a4>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d101      	bne.n	80029ae <HAL_TIM_PWM_Start+0x122>
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <HAL_TIM_PWM_Start+0x124>
 80029ae:	2300      	movs	r3, #0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d008      	beq.n	80029c6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2180      	movs	r1, #128	@ 0x80
 80029c0:	0209      	lsls	r1, r1, #8
 80029c2:	430a      	orrs	r2, r1
 80029c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a17      	ldr	r2, [pc, #92]	@ (8002a28 <HAL_TIM_PWM_Start+0x19c>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d004      	beq.n	80029da <HAL_TIM_PWM_Start+0x14e>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a17      	ldr	r2, [pc, #92]	@ (8002a34 <HAL_TIM_PWM_Start+0x1a8>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d116      	bne.n	8002a08 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	4a15      	ldr	r2, [pc, #84]	@ (8002a38 <HAL_TIM_PWM_Start+0x1ac>)
 80029e2:	4013      	ands	r3, r2
 80029e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2b06      	cmp	r3, #6
 80029ea:	d016      	beq.n	8002a1a <HAL_TIM_PWM_Start+0x18e>
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	2380      	movs	r3, #128	@ 0x80
 80029f0:	025b      	lsls	r3, r3, #9
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d011      	beq.n	8002a1a <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2101      	movs	r1, #1
 8002a02:	430a      	orrs	r2, r1
 8002a04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a06:	e008      	b.n	8002a1a <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2101      	movs	r1, #1
 8002a14:	430a      	orrs	r2, r1
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	e000      	b.n	8002a1c <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a1a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	0018      	movs	r0, r3
 8002a20:	46bd      	mov	sp, r7
 8002a22:	b004      	add	sp, #16
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	46c0      	nop			@ (mov r8, r8)
 8002a28:	40012c00 	.word	0x40012c00
 8002a2c:	40014400 	.word	0x40014400
 8002a30:	40014800 	.word	0x40014800
 8002a34:	40000400 	.word	0x40000400
 8002a38:	00010007 	.word	0x00010007

08002a3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2202      	movs	r2, #2
 8002a58:	4013      	ands	r3, r2
 8002a5a:	d021      	beq.n	8002aa0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	4013      	ands	r3, r2
 8002a62:	d01d      	beq.n	8002aa0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2203      	movs	r2, #3
 8002a6a:	4252      	negs	r2, r2
 8002a6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	2203      	movs	r2, #3
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	d004      	beq.n	8002a8a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	0018      	movs	r0, r3
 8002a84:	f000 fa4c 	bl	8002f20 <HAL_TIM_IC_CaptureCallback>
 8002a88:	e007      	b.n	8002a9a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f000 fa3f 	bl	8002f10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	0018      	movs	r0, r3
 8002a96:	f000 fa4b 	bl	8002f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2204      	movs	r2, #4
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d022      	beq.n	8002aee <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2204      	movs	r2, #4
 8002aac:	4013      	ands	r3, r2
 8002aae:	d01e      	beq.n	8002aee <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2205      	movs	r2, #5
 8002ab6:	4252      	negs	r2, r2
 8002ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2202      	movs	r2, #2
 8002abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	699a      	ldr	r2, [r3, #24]
 8002ac6:	23c0      	movs	r3, #192	@ 0xc0
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4013      	ands	r3, r2
 8002acc:	d004      	beq.n	8002ad8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f000 fa25 	bl	8002f20 <HAL_TIM_IC_CaptureCallback>
 8002ad6:	e007      	b.n	8002ae8 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	0018      	movs	r0, r3
 8002adc:	f000 fa18 	bl	8002f10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f000 fa24 	bl	8002f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2208      	movs	r2, #8
 8002af2:	4013      	ands	r3, r2
 8002af4:	d021      	beq.n	8002b3a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2208      	movs	r2, #8
 8002afa:	4013      	ands	r3, r2
 8002afc:	d01d      	beq.n	8002b3a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2209      	movs	r2, #9
 8002b04:	4252      	negs	r2, r2
 8002b06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2204      	movs	r2, #4
 8002b0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	2203      	movs	r2, #3
 8002b16:	4013      	ands	r3, r2
 8002b18:	d004      	beq.n	8002b24 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	f000 f9ff 	bl	8002f20 <HAL_TIM_IC_CaptureCallback>
 8002b22:	e007      	b.n	8002b34 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	0018      	movs	r0, r3
 8002b28:	f000 f9f2 	bl	8002f10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f000 f9fe 	bl	8002f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2210      	movs	r2, #16
 8002b3e:	4013      	ands	r3, r2
 8002b40:	d022      	beq.n	8002b88 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2210      	movs	r2, #16
 8002b46:	4013      	ands	r3, r2
 8002b48:	d01e      	beq.n	8002b88 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2211      	movs	r2, #17
 8002b50:	4252      	negs	r2, r2
 8002b52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2208      	movs	r2, #8
 8002b58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	69da      	ldr	r2, [r3, #28]
 8002b60:	23c0      	movs	r3, #192	@ 0xc0
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4013      	ands	r3, r2
 8002b66:	d004      	beq.n	8002b72 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f000 f9d8 	bl	8002f20 <HAL_TIM_IC_CaptureCallback>
 8002b70:	e007      	b.n	8002b82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	0018      	movs	r0, r3
 8002b76:	f000 f9cb 	bl	8002f10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f000 f9d7 	bl	8002f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d00c      	beq.n	8002baa <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2201      	movs	r2, #1
 8002b94:	4013      	ands	r3, r2
 8002b96:	d008      	beq.n	8002baa <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	4252      	negs	r2, r2
 8002ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f000 f9ab 	bl	8002f00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2280      	movs	r2, #128	@ 0x80
 8002bae:	4013      	ands	r3, r2
 8002bb0:	d00c      	beq.n	8002bcc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2280      	movs	r2, #128	@ 0x80
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	d008      	beq.n	8002bcc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2281      	movs	r2, #129	@ 0x81
 8002bc0:	4252      	negs	r2, r2
 8002bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	f000 fdfe 	bl	80037c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	2380      	movs	r3, #128	@ 0x80
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	d00b      	beq.n	8002bee <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2280      	movs	r2, #128	@ 0x80
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d007      	beq.n	8002bee <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a16      	ldr	r2, [pc, #88]	@ (8002c3c <HAL_TIM_IRQHandler+0x200>)
 8002be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	0018      	movs	r0, r3
 8002bea:	f000 fdf5 	bl	80037d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2240      	movs	r2, #64	@ 0x40
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	d00c      	beq.n	8002c10 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2240      	movs	r2, #64	@ 0x40
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d008      	beq.n	8002c10 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2241      	movs	r2, #65	@ 0x41
 8002c04:	4252      	negs	r2, r2
 8002c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	f000 f998 	bl	8002f40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2220      	movs	r2, #32
 8002c14:	4013      	ands	r3, r2
 8002c16:	d00c      	beq.n	8002c32 <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	d008      	beq.n	8002c32 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2221      	movs	r2, #33	@ 0x21
 8002c26:	4252      	negs	r2, r2
 8002c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	f000 fdc3 	bl	80037b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c32:	46c0      	nop			@ (mov r8, r8)
 8002c34:	46bd      	mov	sp, r7
 8002c36:	b004      	add	sp, #16
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	46c0      	nop			@ (mov r8, r8)
 8002c3c:	fffffeff 	.word	0xfffffeff

08002c40 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c4c:	2317      	movs	r3, #23
 8002c4e:	18fb      	adds	r3, r7, r3
 8002c50:	2200      	movs	r2, #0
 8002c52:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	223c      	movs	r2, #60	@ 0x3c
 8002c58:	5c9b      	ldrb	r3, [r3, r2]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d101      	bne.n	8002c62 <HAL_TIM_OC_ConfigChannel+0x22>
 8002c5e:	2302      	movs	r3, #2
 8002c60:	e048      	b.n	8002cf4 <HAL_TIM_OC_ConfigChannel+0xb4>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	223c      	movs	r2, #60	@ 0x3c
 8002c66:	2101      	movs	r1, #1
 8002c68:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b14      	cmp	r3, #20
 8002c6e:	d835      	bhi.n	8002cdc <HAL_TIM_OC_ConfigChannel+0x9c>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	009a      	lsls	r2, r3, #2
 8002c74:	4b21      	ldr	r3, [pc, #132]	@ (8002cfc <HAL_TIM_OC_ConfigChannel+0xbc>)
 8002c76:	18d3      	adds	r3, r2, r3
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68ba      	ldr	r2, [r7, #8]
 8002c82:	0011      	movs	r1, r2
 8002c84:	0018      	movs	r0, r3
 8002c86:	f000 f9cf 	bl	8003028 <TIM_OC1_SetConfig>
      break;
 8002c8a:	e02c      	b.n	8002ce6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	0011      	movs	r1, r2
 8002c94:	0018      	movs	r0, r3
 8002c96:	f000 fa47 	bl	8003128 <TIM_OC2_SetConfig>
      break;
 8002c9a:	e024      	b.n	8002ce6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68ba      	ldr	r2, [r7, #8]
 8002ca2:	0011      	movs	r1, r2
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	f000 fabd 	bl	8003224 <TIM_OC3_SetConfig>
      break;
 8002caa:	e01c      	b.n	8002ce6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	0011      	movs	r1, r2
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f000 fb37 	bl	8003328 <TIM_OC4_SetConfig>
      break;
 8002cba:	e014      	b.n	8002ce6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68ba      	ldr	r2, [r7, #8]
 8002cc2:	0011      	movs	r1, r2
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f000 fb93 	bl	80033f0 <TIM_OC5_SetConfig>
      break;
 8002cca:	e00c      	b.n	8002ce6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	0011      	movs	r1, r2
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	f000 fbe5 	bl	80034a4 <TIM_OC6_SetConfig>
      break;
 8002cda:	e004      	b.n	8002ce6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002cdc:	2317      	movs	r3, #23
 8002cde:	18fb      	adds	r3, r7, r3
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	701a      	strb	r2, [r3, #0]
      break;
 8002ce4:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	223c      	movs	r2, #60	@ 0x3c
 8002cea:	2100      	movs	r1, #0
 8002cec:	5499      	strb	r1, [r3, r2]

  return status;
 8002cee:	2317      	movs	r3, #23
 8002cf0:	18fb      	adds	r3, r7, r3
 8002cf2:	781b      	ldrb	r3, [r3, #0]
}
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b006      	add	sp, #24
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	08003898 	.word	0x08003898

08002d00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d0c:	2317      	movs	r3, #23
 8002d0e:	18fb      	adds	r3, r7, r3
 8002d10:	2200      	movs	r2, #0
 8002d12:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	223c      	movs	r2, #60	@ 0x3c
 8002d18:	5c9b      	ldrb	r3, [r3, r2]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d101      	bne.n	8002d22 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	e0e5      	b.n	8002eee <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	223c      	movs	r2, #60	@ 0x3c
 8002d26:	2101      	movs	r1, #1
 8002d28:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b14      	cmp	r3, #20
 8002d2e:	d900      	bls.n	8002d32 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002d30:	e0d1      	b.n	8002ed6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	009a      	lsls	r2, r3, #2
 8002d36:	4b70      	ldr	r3, [pc, #448]	@ (8002ef8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002d38:	18d3      	adds	r3, r2, r3
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	0011      	movs	r1, r2
 8002d46:	0018      	movs	r0, r3
 8002d48:	f000 f96e 	bl	8003028 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699a      	ldr	r2, [r3, #24]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2108      	movs	r1, #8
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	699a      	ldr	r2, [r3, #24]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2104      	movs	r1, #4
 8002d68:	438a      	bics	r2, r1
 8002d6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6999      	ldr	r1, [r3, #24]
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	691a      	ldr	r2, [r3, #16]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	619a      	str	r2, [r3, #24]
      break;
 8002d7e:	e0af      	b.n	8002ee0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	0011      	movs	r1, r2
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f000 f9cd 	bl	8003128 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	699a      	ldr	r2, [r3, #24]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2180      	movs	r1, #128	@ 0x80
 8002d9a:	0109      	lsls	r1, r1, #4
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699a      	ldr	r2, [r3, #24]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4954      	ldr	r1, [pc, #336]	@ (8002efc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002dac:	400a      	ands	r2, r1
 8002dae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6999      	ldr	r1, [r3, #24]
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	021a      	lsls	r2, r3, #8
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	619a      	str	r2, [r3, #24]
      break;
 8002dc4:	e08c      	b.n	8002ee0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	0011      	movs	r1, r2
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f000 fa28 	bl	8003224 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	69da      	ldr	r2, [r3, #28]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2108      	movs	r1, #8
 8002de0:	430a      	orrs	r2, r1
 8002de2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	69da      	ldr	r2, [r3, #28]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2104      	movs	r1, #4
 8002df0:	438a      	bics	r2, r1
 8002df2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	69d9      	ldr	r1, [r3, #28]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	691a      	ldr	r2, [r3, #16]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	61da      	str	r2, [r3, #28]
      break;
 8002e06:	e06b      	b.n	8002ee0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	0011      	movs	r1, r2
 8002e10:	0018      	movs	r0, r3
 8002e12:	f000 fa89 	bl	8003328 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	69da      	ldr	r2, [r3, #28]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2180      	movs	r1, #128	@ 0x80
 8002e22:	0109      	lsls	r1, r1, #4
 8002e24:	430a      	orrs	r2, r1
 8002e26:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	69da      	ldr	r2, [r3, #28]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4932      	ldr	r1, [pc, #200]	@ (8002efc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002e34:	400a      	ands	r2, r1
 8002e36:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	69d9      	ldr	r1, [r3, #28]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	021a      	lsls	r2, r3, #8
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	61da      	str	r2, [r3, #28]
      break;
 8002e4c:	e048      	b.n	8002ee0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	0011      	movs	r1, r2
 8002e56:	0018      	movs	r0, r3
 8002e58:	f000 faca 	bl	80033f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2108      	movs	r1, #8
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2104      	movs	r1, #4
 8002e78:	438a      	bics	r2, r1
 8002e7a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	691a      	ldr	r2, [r3, #16]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002e8e:	e027      	b.n	8002ee0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	0011      	movs	r1, r2
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f000 fb03 	bl	80034a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2180      	movs	r1, #128	@ 0x80
 8002eaa:	0109      	lsls	r1, r1, #4
 8002eac:	430a      	orrs	r2, r1
 8002eae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4910      	ldr	r1, [pc, #64]	@ (8002efc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002ebc:	400a      	ands	r2, r1
 8002ebe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	021a      	lsls	r2, r3, #8
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002ed4:	e004      	b.n	8002ee0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002ed6:	2317      	movs	r3, #23
 8002ed8:	18fb      	adds	r3, r7, r3
 8002eda:	2201      	movs	r2, #1
 8002edc:	701a      	strb	r2, [r3, #0]
      break;
 8002ede:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	223c      	movs	r2, #60	@ 0x3c
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	5499      	strb	r1, [r3, r2]

  return status;
 8002ee8:	2317      	movs	r3, #23
 8002eea:	18fb      	adds	r3, r7, r3
 8002eec:	781b      	ldrb	r3, [r3, #0]
}
 8002eee:	0018      	movs	r0, r3
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	b006      	add	sp, #24
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	46c0      	nop			@ (mov r8, r8)
 8002ef8:	080038ec 	.word	0x080038ec
 8002efc:	fffffbff 	.word	0xfffffbff

08002f00 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002f08:	46c0      	nop			@ (mov r8, r8)
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	b002      	add	sp, #8
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f18:	46c0      	nop			@ (mov r8, r8)
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	b002      	add	sp, #8
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f28:	46c0      	nop			@ (mov r8, r8)
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	b002      	add	sp, #8
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f38:	46c0      	nop			@ (mov r8, r8)
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	b002      	add	sp, #8
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f48:	46c0      	nop			@ (mov r8, r8)
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b002      	add	sp, #8
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a2b      	ldr	r2, [pc, #172]	@ (8003010 <TIM_Base_SetConfig+0xc0>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d003      	beq.n	8002f70 <TIM_Base_SetConfig+0x20>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a2a      	ldr	r2, [pc, #168]	@ (8003014 <TIM_Base_SetConfig+0xc4>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d108      	bne.n	8002f82 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2270      	movs	r2, #112	@ 0x70
 8002f74:	4393      	bics	r3, r2
 8002f76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a22      	ldr	r2, [pc, #136]	@ (8003010 <TIM_Base_SetConfig+0xc0>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d00f      	beq.n	8002faa <TIM_Base_SetConfig+0x5a>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a21      	ldr	r2, [pc, #132]	@ (8003014 <TIM_Base_SetConfig+0xc4>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d00b      	beq.n	8002faa <TIM_Base_SetConfig+0x5a>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a20      	ldr	r2, [pc, #128]	@ (8003018 <TIM_Base_SetConfig+0xc8>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d007      	beq.n	8002faa <TIM_Base_SetConfig+0x5a>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a1f      	ldr	r2, [pc, #124]	@ (800301c <TIM_Base_SetConfig+0xcc>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d003      	beq.n	8002faa <TIM_Base_SetConfig+0x5a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a1e      	ldr	r2, [pc, #120]	@ (8003020 <TIM_Base_SetConfig+0xd0>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d108      	bne.n	8002fbc <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4a1d      	ldr	r2, [pc, #116]	@ (8003024 <TIM_Base_SetConfig+0xd4>)
 8002fae:	4013      	ands	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2280      	movs	r2, #128	@ 0x80
 8002fc0:	4393      	bics	r3, r2
 8002fc2:	001a      	movs	r2, r3
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	689a      	ldr	r2, [r3, #8]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a0a      	ldr	r2, [pc, #40]	@ (8003010 <TIM_Base_SetConfig+0xc0>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d007      	beq.n	8002ffa <TIM_Base_SetConfig+0xaa>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a0b      	ldr	r2, [pc, #44]	@ (800301c <TIM_Base_SetConfig+0xcc>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d003      	beq.n	8002ffa <TIM_Base_SetConfig+0xaa>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a0a      	ldr	r2, [pc, #40]	@ (8003020 <TIM_Base_SetConfig+0xd0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d103      	bne.n	8003002 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	691a      	ldr	r2, [r3, #16]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	615a      	str	r2, [r3, #20]
}
 8003008:	46c0      	nop			@ (mov r8, r8)
 800300a:	46bd      	mov	sp, r7
 800300c:	b004      	add	sp, #16
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40012c00 	.word	0x40012c00
 8003014:	40000400 	.word	0x40000400
 8003018:	40002000 	.word	0x40002000
 800301c:	40014400 	.word	0x40014400
 8003020:	40014800 	.word	0x40014800
 8003024:	fffffcff 	.word	0xfffffcff

08003028 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	2201      	movs	r2, #1
 800303e:	4393      	bics	r3, r2
 8003040:	001a      	movs	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	4a2e      	ldr	r2, [pc, #184]	@ (8003110 <TIM_OC1_SetConfig+0xe8>)
 8003056:	4013      	ands	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2203      	movs	r2, #3
 800305e:	4393      	bics	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	4313      	orrs	r3, r2
 800306a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	2202      	movs	r2, #2
 8003070:	4393      	bics	r3, r2
 8003072:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	4313      	orrs	r3, r2
 800307c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a24      	ldr	r2, [pc, #144]	@ (8003114 <TIM_OC1_SetConfig+0xec>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d007      	beq.n	8003096 <TIM_OC1_SetConfig+0x6e>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a23      	ldr	r2, [pc, #140]	@ (8003118 <TIM_OC1_SetConfig+0xf0>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d003      	beq.n	8003096 <TIM_OC1_SetConfig+0x6e>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a22      	ldr	r2, [pc, #136]	@ (800311c <TIM_OC1_SetConfig+0xf4>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d10c      	bne.n	80030b0 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2208      	movs	r2, #8
 800309a:	4393      	bics	r3, r2
 800309c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	2204      	movs	r2, #4
 80030ac:	4393      	bics	r3, r2
 80030ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a18      	ldr	r2, [pc, #96]	@ (8003114 <TIM_OC1_SetConfig+0xec>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d007      	beq.n	80030c8 <TIM_OC1_SetConfig+0xa0>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a17      	ldr	r2, [pc, #92]	@ (8003118 <TIM_OC1_SetConfig+0xf0>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d003      	beq.n	80030c8 <TIM_OC1_SetConfig+0xa0>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a16      	ldr	r2, [pc, #88]	@ (800311c <TIM_OC1_SetConfig+0xf4>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d111      	bne.n	80030ec <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	4a15      	ldr	r2, [pc, #84]	@ (8003120 <TIM_OC1_SetConfig+0xf8>)
 80030cc:	4013      	ands	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	4a14      	ldr	r2, [pc, #80]	@ (8003124 <TIM_OC1_SetConfig+0xfc>)
 80030d4:	4013      	ands	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	4313      	orrs	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	621a      	str	r2, [r3, #32]
}
 8003106:	46c0      	nop			@ (mov r8, r8)
 8003108:	46bd      	mov	sp, r7
 800310a:	b006      	add	sp, #24
 800310c:	bd80      	pop	{r7, pc}
 800310e:	46c0      	nop			@ (mov r8, r8)
 8003110:	fffeff8f 	.word	0xfffeff8f
 8003114:	40012c00 	.word	0x40012c00
 8003118:	40014400 	.word	0x40014400
 800311c:	40014800 	.word	0x40014800
 8003120:	fffffeff 	.word	0xfffffeff
 8003124:	fffffdff 	.word	0xfffffdff

08003128 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	2210      	movs	r2, #16
 800313e:	4393      	bics	r3, r2
 8003140:	001a      	movs	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4a2c      	ldr	r2, [pc, #176]	@ (8003208 <TIM_OC2_SetConfig+0xe0>)
 8003156:	4013      	ands	r3, r2
 8003158:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	4a2b      	ldr	r2, [pc, #172]	@ (800320c <TIM_OC2_SetConfig+0xe4>)
 800315e:	4013      	ands	r3, r2
 8003160:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	021b      	lsls	r3, r3, #8
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	4313      	orrs	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	2220      	movs	r2, #32
 8003172:	4393      	bics	r3, r2
 8003174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	4313      	orrs	r3, r2
 8003180:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a22      	ldr	r2, [pc, #136]	@ (8003210 <TIM_OC2_SetConfig+0xe8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d10d      	bne.n	80031a6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	2280      	movs	r2, #128	@ 0x80
 800318e:	4393      	bics	r3, r2
 8003190:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	4313      	orrs	r3, r2
 800319c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	2240      	movs	r2, #64	@ 0x40
 80031a2:	4393      	bics	r3, r2
 80031a4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a19      	ldr	r2, [pc, #100]	@ (8003210 <TIM_OC2_SetConfig+0xe8>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d007      	beq.n	80031be <TIM_OC2_SetConfig+0x96>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a18      	ldr	r2, [pc, #96]	@ (8003214 <TIM_OC2_SetConfig+0xec>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d003      	beq.n	80031be <TIM_OC2_SetConfig+0x96>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a17      	ldr	r2, [pc, #92]	@ (8003218 <TIM_OC2_SetConfig+0xf0>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d113      	bne.n	80031e6 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	4a16      	ldr	r2, [pc, #88]	@ (800321c <TIM_OC2_SetConfig+0xf4>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	4a15      	ldr	r2, [pc, #84]	@ (8003220 <TIM_OC2_SetConfig+0xf8>)
 80031ca:	4013      	ands	r3, r2
 80031cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	621a      	str	r2, [r3, #32]
}
 8003200:	46c0      	nop			@ (mov r8, r8)
 8003202:	46bd      	mov	sp, r7
 8003204:	b006      	add	sp, #24
 8003206:	bd80      	pop	{r7, pc}
 8003208:	feff8fff 	.word	0xfeff8fff
 800320c:	fffffcff 	.word	0xfffffcff
 8003210:	40012c00 	.word	0x40012c00
 8003214:	40014400 	.word	0x40014400
 8003218:	40014800 	.word	0x40014800
 800321c:	fffffbff 	.word	0xfffffbff
 8003220:	fffff7ff 	.word	0xfffff7ff

08003224 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	4a31      	ldr	r2, [pc, #196]	@ (8003300 <TIM_OC3_SetConfig+0xdc>)
 800323a:	401a      	ands	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4a2d      	ldr	r2, [pc, #180]	@ (8003304 <TIM_OC3_SetConfig+0xe0>)
 8003250:	4013      	ands	r3, r2
 8003252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2203      	movs	r2, #3
 8003258:	4393      	bics	r3, r2
 800325a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	4313      	orrs	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	4a27      	ldr	r2, [pc, #156]	@ (8003308 <TIM_OC3_SetConfig+0xe4>)
 800326a:	4013      	ands	r3, r2
 800326c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	021b      	lsls	r3, r3, #8
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	4313      	orrs	r3, r2
 8003278:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a23      	ldr	r2, [pc, #140]	@ (800330c <TIM_OC3_SetConfig+0xe8>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d10d      	bne.n	800329e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	4a22      	ldr	r2, [pc, #136]	@ (8003310 <TIM_OC3_SetConfig+0xec>)
 8003286:	4013      	ands	r3, r2
 8003288:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	021b      	lsls	r3, r3, #8
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	4313      	orrs	r3, r2
 8003294:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	4a1e      	ldr	r2, [pc, #120]	@ (8003314 <TIM_OC3_SetConfig+0xf0>)
 800329a:	4013      	ands	r3, r2
 800329c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a1a      	ldr	r2, [pc, #104]	@ (800330c <TIM_OC3_SetConfig+0xe8>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d007      	beq.n	80032b6 <TIM_OC3_SetConfig+0x92>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a1b      	ldr	r2, [pc, #108]	@ (8003318 <TIM_OC3_SetConfig+0xf4>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d003      	beq.n	80032b6 <TIM_OC3_SetConfig+0x92>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a1a      	ldr	r2, [pc, #104]	@ (800331c <TIM_OC3_SetConfig+0xf8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d113      	bne.n	80032de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4a19      	ldr	r2, [pc, #100]	@ (8003320 <TIM_OC3_SetConfig+0xfc>)
 80032ba:	4013      	ands	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	4a18      	ldr	r2, [pc, #96]	@ (8003324 <TIM_OC3_SetConfig+0x100>)
 80032c2:	4013      	ands	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	011b      	lsls	r3, r3, #4
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	4313      	orrs	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	621a      	str	r2, [r3, #32]
}
 80032f8:	46c0      	nop			@ (mov r8, r8)
 80032fa:	46bd      	mov	sp, r7
 80032fc:	b006      	add	sp, #24
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	fffffeff 	.word	0xfffffeff
 8003304:	fffeff8f 	.word	0xfffeff8f
 8003308:	fffffdff 	.word	0xfffffdff
 800330c:	40012c00 	.word	0x40012c00
 8003310:	fffff7ff 	.word	0xfffff7ff
 8003314:	fffffbff 	.word	0xfffffbff
 8003318:	40014400 	.word	0x40014400
 800331c:	40014800 	.word	0x40014800
 8003320:	ffffefff 	.word	0xffffefff
 8003324:	ffffdfff 	.word	0xffffdfff

08003328 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	4a24      	ldr	r2, [pc, #144]	@ (80033d0 <TIM_OC4_SetConfig+0xa8>)
 800333e:	401a      	ands	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4a20      	ldr	r2, [pc, #128]	@ (80033d4 <TIM_OC4_SetConfig+0xac>)
 8003354:	4013      	ands	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4a1f      	ldr	r2, [pc, #124]	@ (80033d8 <TIM_OC4_SetConfig+0xb0>)
 800335c:	4013      	ands	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	021b      	lsls	r3, r3, #8
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4313      	orrs	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	4a1b      	ldr	r2, [pc, #108]	@ (80033dc <TIM_OC4_SetConfig+0xb4>)
 8003370:	4013      	ands	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	031b      	lsls	r3, r3, #12
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a17      	ldr	r2, [pc, #92]	@ (80033e0 <TIM_OC4_SetConfig+0xb8>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d007      	beq.n	8003398 <TIM_OC4_SetConfig+0x70>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a16      	ldr	r2, [pc, #88]	@ (80033e4 <TIM_OC4_SetConfig+0xbc>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d003      	beq.n	8003398 <TIM_OC4_SetConfig+0x70>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a15      	ldr	r2, [pc, #84]	@ (80033e8 <TIM_OC4_SetConfig+0xc0>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d109      	bne.n	80033ac <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	4a14      	ldr	r2, [pc, #80]	@ (80033ec <TIM_OC4_SetConfig+0xc4>)
 800339c:	4013      	ands	r3, r2
 800339e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	019b      	lsls	r3, r3, #6
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	621a      	str	r2, [r3, #32]
}
 80033c6:	46c0      	nop			@ (mov r8, r8)
 80033c8:	46bd      	mov	sp, r7
 80033ca:	b006      	add	sp, #24
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	46c0      	nop			@ (mov r8, r8)
 80033d0:	ffffefff 	.word	0xffffefff
 80033d4:	feff8fff 	.word	0xfeff8fff
 80033d8:	fffffcff 	.word	0xfffffcff
 80033dc:	ffffdfff 	.word	0xffffdfff
 80033e0:	40012c00 	.word	0x40012c00
 80033e4:	40014400 	.word	0x40014400
 80033e8:	40014800 	.word	0x40014800
 80033ec:	ffffbfff 	.word	0xffffbfff

080033f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	4a21      	ldr	r2, [pc, #132]	@ (800348c <TIM_OC5_SetConfig+0x9c>)
 8003406:	401a      	ands	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4a1d      	ldr	r2, [pc, #116]	@ (8003490 <TIM_OC5_SetConfig+0xa0>)
 800341c:	4013      	ands	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	4313      	orrs	r3, r2
 8003428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	4a19      	ldr	r2, [pc, #100]	@ (8003494 <TIM_OC5_SetConfig+0xa4>)
 800342e:	4013      	ands	r3, r2
 8003430:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	041b      	lsls	r3, r3, #16
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	4313      	orrs	r3, r2
 800343c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a15      	ldr	r2, [pc, #84]	@ (8003498 <TIM_OC5_SetConfig+0xa8>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d007      	beq.n	8003456 <TIM_OC5_SetConfig+0x66>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a14      	ldr	r2, [pc, #80]	@ (800349c <TIM_OC5_SetConfig+0xac>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d003      	beq.n	8003456 <TIM_OC5_SetConfig+0x66>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a13      	ldr	r2, [pc, #76]	@ (80034a0 <TIM_OC5_SetConfig+0xb0>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d109      	bne.n	800346a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	4a0c      	ldr	r2, [pc, #48]	@ (800348c <TIM_OC5_SetConfig+0x9c>)
 800345a:	4013      	ands	r3, r2
 800345c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	021b      	lsls	r3, r3, #8
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	4313      	orrs	r3, r2
 8003468:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	621a      	str	r2, [r3, #32]
}
 8003484:	46c0      	nop			@ (mov r8, r8)
 8003486:	46bd      	mov	sp, r7
 8003488:	b006      	add	sp, #24
 800348a:	bd80      	pop	{r7, pc}
 800348c:	fffeffff 	.word	0xfffeffff
 8003490:	fffeff8f 	.word	0xfffeff8f
 8003494:	fffdffff 	.word	0xfffdffff
 8003498:	40012c00 	.word	0x40012c00
 800349c:	40014400 	.word	0x40014400
 80034a0:	40014800 	.word	0x40014800

080034a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	4a22      	ldr	r2, [pc, #136]	@ (8003544 <TIM_OC6_SetConfig+0xa0>)
 80034ba:	401a      	ands	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4a1e      	ldr	r2, [pc, #120]	@ (8003548 <TIM_OC6_SetConfig+0xa4>)
 80034d0:	4013      	ands	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	021b      	lsls	r3, r3, #8
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	4313      	orrs	r3, r2
 80034de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	4a1a      	ldr	r2, [pc, #104]	@ (800354c <TIM_OC6_SetConfig+0xa8>)
 80034e4:	4013      	ands	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	051b      	lsls	r3, r3, #20
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a16      	ldr	r2, [pc, #88]	@ (8003550 <TIM_OC6_SetConfig+0xac>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d007      	beq.n	800350c <TIM_OC6_SetConfig+0x68>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a15      	ldr	r2, [pc, #84]	@ (8003554 <TIM_OC6_SetConfig+0xb0>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d003      	beq.n	800350c <TIM_OC6_SetConfig+0x68>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a14      	ldr	r2, [pc, #80]	@ (8003558 <TIM_OC6_SetConfig+0xb4>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d109      	bne.n	8003520 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	4a13      	ldr	r2, [pc, #76]	@ (800355c <TIM_OC6_SetConfig+0xb8>)
 8003510:	4013      	ands	r3, r2
 8003512:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	029b      	lsls	r3, r3, #10
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	4313      	orrs	r3, r2
 800351e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	621a      	str	r2, [r3, #32]
}
 800353a:	46c0      	nop			@ (mov r8, r8)
 800353c:	46bd      	mov	sp, r7
 800353e:	b006      	add	sp, #24
 8003540:	bd80      	pop	{r7, pc}
 8003542:	46c0      	nop			@ (mov r8, r8)
 8003544:	ffefffff 	.word	0xffefffff
 8003548:	feff8fff 	.word	0xfeff8fff
 800354c:	ffdfffff 	.word	0xffdfffff
 8003550:	40012c00 	.word	0x40012c00
 8003554:	40014400 	.word	0x40014400
 8003558:	40014800 	.word	0x40014800
 800355c:	fffbffff 	.word	0xfffbffff

08003560 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	221f      	movs	r2, #31
 8003570:	4013      	ands	r3, r2
 8003572:	2201      	movs	r2, #1
 8003574:	409a      	lsls	r2, r3
 8003576:	0013      	movs	r3, r2
 8003578:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	43d2      	mvns	r2, r2
 8003582:	401a      	ands	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a1a      	ldr	r2, [r3, #32]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	211f      	movs	r1, #31
 8003590:	400b      	ands	r3, r1
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	4099      	lsls	r1, r3
 8003596:	000b      	movs	r3, r1
 8003598:	431a      	orrs	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	621a      	str	r2, [r3, #32]
}
 800359e:	46c0      	nop			@ (mov r8, r8)
 80035a0:	46bd      	mov	sp, r7
 80035a2:	b006      	add	sp, #24
 80035a4:	bd80      	pop	{r7, pc}
	...

080035a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	223c      	movs	r2, #60	@ 0x3c
 80035b6:	5c9b      	ldrb	r3, [r3, r2]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d101      	bne.n	80035c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035bc:	2302      	movs	r3, #2
 80035be:	e04a      	b.n	8003656 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	223c      	movs	r2, #60	@ 0x3c
 80035c4:	2101      	movs	r1, #1
 80035c6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	223d      	movs	r2, #61	@ 0x3d
 80035cc:	2102      	movs	r1, #2
 80035ce:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003660 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d108      	bne.n	80035fc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003664 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80035ee:	4013      	ands	r3, r2
 80035f0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2270      	movs	r2, #112	@ 0x70
 8003600:	4393      	bics	r3, r2
 8003602:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	4313      	orrs	r3, r2
 800360c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a11      	ldr	r2, [pc, #68]	@ (8003660 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d004      	beq.n	800362a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a10      	ldr	r2, [pc, #64]	@ (8003668 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d10c      	bne.n	8003644 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	2280      	movs	r2, #128	@ 0x80
 800362e:	4393      	bics	r3, r2
 8003630:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	4313      	orrs	r3, r2
 800363a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	223d      	movs	r2, #61	@ 0x3d
 8003648:	2101      	movs	r1, #1
 800364a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	223c      	movs	r2, #60	@ 0x3c
 8003650:	2100      	movs	r1, #0
 8003652:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	0018      	movs	r0, r3
 8003658:	46bd      	mov	sp, r7
 800365a:	b004      	add	sp, #16
 800365c:	bd80      	pop	{r7, pc}
 800365e:	46c0      	nop			@ (mov r8, r8)
 8003660:	40012c00 	.word	0x40012c00
 8003664:	ff0fffff 	.word	0xff0fffff
 8003668:	40000400 	.word	0x40000400

0800366c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003676:	2300      	movs	r3, #0
 8003678:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	223c      	movs	r2, #60	@ 0x3c
 800367e:	5c9b      	ldrb	r3, [r3, r2]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d101      	bne.n	8003688 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003684:	2302      	movs	r3, #2
 8003686:	e079      	b.n	800377c <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	223c      	movs	r2, #60	@ 0x3c
 800368c:	2101      	movs	r1, #1
 800368e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	22ff      	movs	r2, #255	@ 0xff
 8003694:	4393      	bics	r3, r2
 8003696:	001a      	movs	r2, r3
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	4313      	orrs	r3, r2
 800369e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4a38      	ldr	r2, [pc, #224]	@ (8003784 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80036a4:	401a      	ands	r2, r3
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4a35      	ldr	r2, [pc, #212]	@ (8003788 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80036b2:	401a      	ands	r2, r3
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4a33      	ldr	r2, [pc, #204]	@ (800378c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80036c0:	401a      	ands	r2, r3
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4a30      	ldr	r2, [pc, #192]	@ (8003790 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80036ce:	401a      	ands	r2, r3
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4a2e      	ldr	r2, [pc, #184]	@ (8003794 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80036dc:	401a      	ands	r2, r3
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	4a2b      	ldr	r2, [pc, #172]	@ (8003798 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80036ea:	401a      	ands	r2, r3
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f0:	4313      	orrs	r3, r2
 80036f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4a29      	ldr	r2, [pc, #164]	@ (800379c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80036f8:	401a      	ands	r2, r3
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	041b      	lsls	r3, r3, #16
 8003700:	4313      	orrs	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a25      	ldr	r2, [pc, #148]	@ (80037a0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d106      	bne.n	800371c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	4a24      	ldr	r2, [pc, #144]	@ (80037a4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8003712:	401a      	ands	r2, r3
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	4313      	orrs	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a1f      	ldr	r2, [pc, #124]	@ (80037a0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d121      	bne.n	800376a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	4a1f      	ldr	r2, [pc, #124]	@ (80037a8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800372a:	401a      	ands	r2, r3
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003730:	051b      	lsls	r3, r3, #20
 8003732:	4313      	orrs	r3, r2
 8003734:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	4a1c      	ldr	r2, [pc, #112]	@ (80037ac <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800373a:	401a      	ands	r2, r3
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	4313      	orrs	r3, r2
 8003742:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4a1a      	ldr	r2, [pc, #104]	@ (80037b0 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8003748:	401a      	ands	r2, r3
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374e:	4313      	orrs	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a12      	ldr	r2, [pc, #72]	@ (80037a0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d106      	bne.n	800376a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4a15      	ldr	r2, [pc, #84]	@ (80037b4 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8003760:	401a      	ands	r2, r3
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003766:	4313      	orrs	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	223c      	movs	r2, #60	@ 0x3c
 8003776:	2100      	movs	r1, #0
 8003778:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	0018      	movs	r0, r3
 800377e:	46bd      	mov	sp, r7
 8003780:	b004      	add	sp, #16
 8003782:	bd80      	pop	{r7, pc}
 8003784:	fffffcff 	.word	0xfffffcff
 8003788:	fffffbff 	.word	0xfffffbff
 800378c:	fffff7ff 	.word	0xfffff7ff
 8003790:	ffffefff 	.word	0xffffefff
 8003794:	ffffdfff 	.word	0xffffdfff
 8003798:	ffffbfff 	.word	0xffffbfff
 800379c:	fff0ffff 	.word	0xfff0ffff
 80037a0:	40012c00 	.word	0x40012c00
 80037a4:	efffffff 	.word	0xefffffff
 80037a8:	ff0fffff 	.word	0xff0fffff
 80037ac:	feffffff 	.word	0xfeffffff
 80037b0:	fdffffff 	.word	0xfdffffff
 80037b4:	dfffffff 	.word	0xdfffffff

080037b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037c0:	46c0      	nop			@ (mov r8, r8)
 80037c2:	46bd      	mov	sp, r7
 80037c4:	b002      	add	sp, #8
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037d0:	46c0      	nop			@ (mov r8, r8)
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b002      	add	sp, #8
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80037e0:	46c0      	nop			@ (mov r8, r8)
 80037e2:	46bd      	mov	sp, r7
 80037e4:	b002      	add	sp, #8
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <memset>:
 80037e8:	0003      	movs	r3, r0
 80037ea:	1882      	adds	r2, r0, r2
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d100      	bne.n	80037f2 <memset+0xa>
 80037f0:	4770      	bx	lr
 80037f2:	7019      	strb	r1, [r3, #0]
 80037f4:	3301      	adds	r3, #1
 80037f6:	e7f9      	b.n	80037ec <memset+0x4>

080037f8 <__libc_init_array>:
 80037f8:	b570      	push	{r4, r5, r6, lr}
 80037fa:	2600      	movs	r6, #0
 80037fc:	4c0c      	ldr	r4, [pc, #48]	@ (8003830 <__libc_init_array+0x38>)
 80037fe:	4d0d      	ldr	r5, [pc, #52]	@ (8003834 <__libc_init_array+0x3c>)
 8003800:	1b64      	subs	r4, r4, r5
 8003802:	10a4      	asrs	r4, r4, #2
 8003804:	42a6      	cmp	r6, r4
 8003806:	d109      	bne.n	800381c <__libc_init_array+0x24>
 8003808:	2600      	movs	r6, #0
 800380a:	f000 f819 	bl	8003840 <_init>
 800380e:	4c0a      	ldr	r4, [pc, #40]	@ (8003838 <__libc_init_array+0x40>)
 8003810:	4d0a      	ldr	r5, [pc, #40]	@ (800383c <__libc_init_array+0x44>)
 8003812:	1b64      	subs	r4, r4, r5
 8003814:	10a4      	asrs	r4, r4, #2
 8003816:	42a6      	cmp	r6, r4
 8003818:	d105      	bne.n	8003826 <__libc_init_array+0x2e>
 800381a:	bd70      	pop	{r4, r5, r6, pc}
 800381c:	00b3      	lsls	r3, r6, #2
 800381e:	58eb      	ldr	r3, [r5, r3]
 8003820:	4798      	blx	r3
 8003822:	3601      	adds	r6, #1
 8003824:	e7ee      	b.n	8003804 <__libc_init_array+0xc>
 8003826:	00b3      	lsls	r3, r6, #2
 8003828:	58eb      	ldr	r3, [r5, r3]
 800382a:	4798      	blx	r3
 800382c:	3601      	adds	r6, #1
 800382e:	e7f2      	b.n	8003816 <__libc_init_array+0x1e>
 8003830:	08003940 	.word	0x08003940
 8003834:	08003940 	.word	0x08003940
 8003838:	08003944 	.word	0x08003944
 800383c:	08003940 	.word	0x08003940

08003840 <_init>:
 8003840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003842:	46c0      	nop			@ (mov r8, r8)
 8003844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003846:	bc08      	pop	{r3}
 8003848:	469e      	mov	lr, r3
 800384a:	4770      	bx	lr

0800384c <_fini>:
 800384c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800384e:	46c0      	nop			@ (mov r8, r8)
 8003850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003852:	bc08      	pop	{r3}
 8003854:	469e      	mov	lr, r3
 8003856:	4770      	bx	lr

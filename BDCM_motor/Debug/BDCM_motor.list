
BDCM_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003800  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080038c0  080038c0  000048c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039a8  080039a8  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  080039a8  080039a8  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039a8  080039a8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039a8  080039a8  000049a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039ac  080039ac  000049ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080039b0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000000c  080039bc  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  080039bc  0000517c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df9b  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002027  00000000  00000000  00012fcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef0  00000000  00000000  00014ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bb1  00000000  00000000  00015ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013fcb  00000000  00000000  00016a99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011592  00000000  00000000  0002aa64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008221b  00000000  00000000  0003bff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000be211  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036ec  00000000  00000000  000be254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000c1940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080038a8 	.word	0x080038a8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080038a8 	.word	0x080038a8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
  {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  	if (htim == &htim1){
 8000228:	687a      	ldr	r2, [r7, #4]
 800022a:	4b1d      	ldr	r3, [pc, #116]	@ (80002a0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800022c:	429a      	cmp	r2, r3
 800022e:	d032      	beq.n	8000296 <HAL_TIM_PeriodElapsedCallback+0x76>

  	} else if (htim == &htim14){
 8000230:	687a      	ldr	r2, [r7, #4]
 8000232:	4b1c      	ldr	r3, [pc, #112]	@ (80002a4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000234:	429a      	cmp	r2, r3
 8000236:	d12e      	bne.n	8000296 <HAL_TIM_PeriodElapsedCallback+0x76>
  		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 8000238:	2380      	movs	r3, #128	@ 0x80
 800023a:	01db      	lsls	r3, r3, #7
 800023c:	4a1a      	ldr	r2, [pc, #104]	@ (80002a8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800023e:	0019      	movs	r1, r3
 8000240:	0010      	movs	r0, r2
 8000242:	f001 fc9a 	bl	8001b7a <HAL_GPIO_TogglePin>
  		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000246:	2380      	movs	r3, #128	@ 0x80
 8000248:	021b      	lsls	r3, r3, #8
 800024a:	4a17      	ldr	r2, [pc, #92]	@ (80002a8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800024c:	0019      	movs	r1, r3
 800024e:	0010      	movs	r0, r2
 8000250:	f001 fc93 	bl	8001b7a <HAL_GPIO_TogglePin>
  		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000254:	4b12      	ldr	r3, [pc, #72]	@ (80002a0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2200      	movs	r2, #0
 800025a:	635a      	str	r2, [r3, #52]	@ 0x34
  		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 99);
 800025c:	4b10      	ldr	r3, [pc, #64]	@ (80002a0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	2263      	movs	r2, #99	@ 0x63
 8000262:	639a      	str	r2, [r3, #56]	@ 0x38
  		HAL_Delay(100);
 8000264:	2064      	movs	r0, #100	@ 0x64
 8000266:	f000 fd85 	bl	8000d74 <HAL_Delay>
  		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 800026a:	2380      	movs	r3, #128	@ 0x80
 800026c:	01db      	lsls	r3, r3, #7
 800026e:	4a0e      	ldr	r2, [pc, #56]	@ (80002a8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000270:	0019      	movs	r1, r3
 8000272:	0010      	movs	r0, r2
 8000274:	f001 fc81 	bl	8001b7a <HAL_GPIO_TogglePin>
  		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000278:	2380      	movs	r3, #128	@ 0x80
 800027a:	021b      	lsls	r3, r3, #8
 800027c:	4a0a      	ldr	r2, [pc, #40]	@ (80002a8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800027e:	0019      	movs	r1, r3
 8000280:	0010      	movs	r0, r2
 8000282:	f001 fc7a 	bl	8001b7a <HAL_GPIO_TogglePin>
  		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 99);
 8000286:	4b06      	ldr	r3, [pc, #24]	@ (80002a0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	2263      	movs	r2, #99	@ 0x63
 800028c:	635a      	str	r2, [r3, #52]	@ 0x34
  		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800028e:	4b04      	ldr	r3, [pc, #16]	@ (80002a0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	2200      	movs	r2, #0
 8000294:	639a      	str	r2, [r3, #56]	@ 0x38
  	}
  }
 8000296:	46c0      	nop			@ (mov r8, r8)
 8000298:	46bd      	mov	sp, r7
 800029a:	b002      	add	sp, #8
 800029c:	bd80      	pop	{r7, pc}
 800029e:	46c0      	nop			@ (mov r8, r8)
 80002a0:	200000e0 	.word	0x200000e0
 80002a4:	2000012c 	.word	0x2000012c
 80002a8:	50000800 	.word	0x50000800

080002ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b0:	f000 fce3 	bl	8000c7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b4:	f000 f882 	bl	80003bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b8:	f000 fa88 	bl	80007cc <MX_GPIO_Init>
  MX_ADC1_Init();
 80002bc:	f000 f8c2 	bl	8000444 <MX_ADC1_Init>
  MX_TIM1_Init();
 80002c0:	f000 f96c 	bl	800059c <MX_TIM1_Init>
  MX_TIM14_Init();
 80002c4:	f000 fa36 	bl	8000734 <MX_TIM14_Init>
  MX_I2C1_Init();
 80002c8:	f000 f928 	bl	800051c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80002cc:	4b39      	ldr	r3, [pc, #228]	@ (80003b4 <main+0x108>)
 80002ce:	2100      	movs	r1, #0
 80002d0:	0018      	movs	r0, r3
 80002d2:	f002 fb17 	bl	8002904 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80002d6:	4b37      	ldr	r3, [pc, #220]	@ (80003b4 <main+0x108>)
 80002d8:	2104      	movs	r1, #4
 80002da:	0018      	movs	r0, r3
 80002dc:	f002 fb12 	bl	8002904 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80002e0:	4b34      	ldr	r3, [pc, #208]	@ (80003b4 <main+0x108>)
 80002e2:	2108      	movs	r1, #8
 80002e4:	0018      	movs	r0, r3
 80002e6:	f002 fb0d 	bl	8002904 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80002ea:	4b32      	ldr	r3, [pc, #200]	@ (80003b4 <main+0x108>)
 80002ec:	210c      	movs	r1, #12
 80002ee:	0018      	movs	r0, r3
 80002f0:	f002 fb08 	bl	8002904 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 50);
 80002f4:	4b2f      	ldr	r3, [pc, #188]	@ (80003b4 <main+0x108>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	2232      	movs	r2, #50	@ 0x32
 80002fa:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 99);
 80002fc:	4b2d      	ldr	r3, [pc, #180]	@ (80003b4 <main+0x108>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	2263      	movs	r2, #99	@ 0x63
 8000302:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 50);
 8000304:	4b2b      	ldr	r3, [pc, #172]	@ (80003b4 <main+0x108>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	2232      	movs	r2, #50	@ 0x32
 800030a:	63da      	str	r2, [r3, #60]	@ 0x3c
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 99);
 800030c:	4b29      	ldr	r3, [pc, #164]	@ (80003b4 <main+0x108>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	2263      	movs	r2, #99	@ 0x63
 8000312:	641a      	str	r2, [r3, #64]	@ 0x40



  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000314:	4b27      	ldr	r3, [pc, #156]	@ (80003b4 <main+0x108>)
 8000316:	2100      	movs	r1, #0
 8000318:	0018      	movs	r0, r3
 800031a:	f002 faf3 	bl	8002904 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800031e:	4b25      	ldr	r3, [pc, #148]	@ (80003b4 <main+0x108>)
 8000320:	2104      	movs	r1, #4
 8000322:	0018      	movs	r0, r3
 8000324:	f002 faee 	bl	8002904 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000328:	4b22      	ldr	r3, [pc, #136]	@ (80003b4 <main+0x108>)
 800032a:	2108      	movs	r1, #8
 800032c:	0018      	movs	r0, r3
 800032e:	f002 fae9 	bl	8002904 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000332:	4b20      	ldr	r3, [pc, #128]	@ (80003b4 <main+0x108>)
 8000334:	210c      	movs	r1, #12
 8000336:	0018      	movs	r0, r3
 8000338:	f002 fae4 	bl	8002904 <HAL_TIM_PWM_Start>

  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 800033c:	2380      	movs	r3, #128	@ 0x80
 800033e:	01db      	lsls	r3, r3, #7
 8000340:	4a1d      	ldr	r2, [pc, #116]	@ (80003b8 <main+0x10c>)
 8000342:	0019      	movs	r1, r3
 8000344:	0010      	movs	r0, r2
 8000346:	f001 fc18 	bl	8001b7a <HAL_GPIO_TogglePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 800034a:	2380      	movs	r3, #128	@ 0x80
 800034c:	01db      	lsls	r3, r3, #7
 800034e:	4a1a      	ldr	r2, [pc, #104]	@ (80003b8 <main+0x10c>)
 8000350:	0019      	movs	r1, r3
 8000352:	0010      	movs	r0, r2
 8000354:	f001 fc11 	bl	8001b7a <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000358:	2380      	movs	r3, #128	@ 0x80
 800035a:	021b      	lsls	r3, r3, #8
 800035c:	4a16      	ldr	r2, [pc, #88]	@ (80003b8 <main+0x10c>)
 800035e:	0019      	movs	r1, r3
 8000360:	0010      	movs	r0, r2
 8000362:	f001 fc0a 	bl	8001b7a <HAL_GPIO_TogglePin>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000366:	4b13      	ldr	r3, [pc, #76]	@ (80003b4 <main+0x108>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	2200      	movs	r2, #0
 800036c:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 99);
 800036e:	4b11      	ldr	r3, [pc, #68]	@ (80003b4 <main+0x108>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	2263      	movs	r2, #99	@ 0x63
 8000374:	639a      	str	r2, [r3, #56]	@ 0x38
	  HAL_Delay(100);
 8000376:	2064      	movs	r0, #100	@ 0x64
 8000378:	f000 fcfc 	bl	8000d74 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 800037c:	2380      	movs	r3, #128	@ 0x80
 800037e:	01db      	lsls	r3, r3, #7
 8000380:	4a0d      	ldr	r2, [pc, #52]	@ (80003b8 <main+0x10c>)
 8000382:	0019      	movs	r1, r3
 8000384:	0010      	movs	r0, r2
 8000386:	f001 fbf8 	bl	8001b7a <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 800038a:	2380      	movs	r3, #128	@ 0x80
 800038c:	021b      	lsls	r3, r3, #8
 800038e:	4a0a      	ldr	r2, [pc, #40]	@ (80003b8 <main+0x10c>)
 8000390:	0019      	movs	r1, r3
 8000392:	0010      	movs	r0, r2
 8000394:	f001 fbf1 	bl	8001b7a <HAL_GPIO_TogglePin>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 99);
 8000398:	4b06      	ldr	r3, [pc, #24]	@ (80003b4 <main+0x108>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	2263      	movs	r2, #99	@ 0x63
 800039e:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80003a0:	4b04      	ldr	r3, [pc, #16]	@ (80003b4 <main+0x108>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	2200      	movs	r2, #0
 80003a6:	639a      	str	r2, [r3, #56]	@ 0x38
	  HAL_Delay(100);
 80003a8:	2064      	movs	r0, #100	@ 0x64
 80003aa:	f000 fce3 	bl	8000d74 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 80003ae:	46c0      	nop			@ (mov r8, r8)
 80003b0:	e7cb      	b.n	800034a <main+0x9e>
 80003b2:	46c0      	nop			@ (mov r8, r8)
 80003b4:	200000e0 	.word	0x200000e0
 80003b8:	50000800 	.word	0x50000800

080003bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003bc:	b590      	push	{r4, r7, lr}
 80003be:	b08d      	sub	sp, #52	@ 0x34
 80003c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c2:	2414      	movs	r4, #20
 80003c4:	193b      	adds	r3, r7, r4
 80003c6:	0018      	movs	r0, r3
 80003c8:	231c      	movs	r3, #28
 80003ca:	001a      	movs	r2, r3
 80003cc:	2100      	movs	r1, #0
 80003ce:	f003 fa3f 	bl	8003850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d2:	003b      	movs	r3, r7
 80003d4:	0018      	movs	r0, r3
 80003d6:	2314      	movs	r3, #20
 80003d8:	001a      	movs	r2, r3
 80003da:	2100      	movs	r1, #0
 80003dc:	f003 fa38 	bl	8003850 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003e0:	193b      	adds	r3, r7, r4
 80003e2:	2202      	movs	r2, #2
 80003e4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003e6:	193b      	adds	r3, r7, r4
 80003e8:	2280      	movs	r2, #128	@ 0x80
 80003ea:	0052      	lsls	r2, r2, #1
 80003ec:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80003ee:	193b      	adds	r3, r7, r4
 80003f0:	2200      	movs	r2, #0
 80003f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003f4:	193b      	adds	r3, r7, r4
 80003f6:	2240      	movs	r2, #64	@ 0x40
 80003f8:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003fa:	193b      	adds	r3, r7, r4
 80003fc:	0018      	movs	r0, r3
 80003fe:	f001 fd53 	bl	8001ea8 <HAL_RCC_OscConfig>
 8000402:	1e03      	subs	r3, r0, #0
 8000404:	d001      	beq.n	800040a <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000406:	f000 fa4d 	bl	80008a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800040a:	003b      	movs	r3, r7
 800040c:	2207      	movs	r2, #7
 800040e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000410:	003b      	movs	r3, r7
 8000412:	2200      	movs	r2, #0
 8000414:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000416:	003b      	movs	r3, r7
 8000418:	2200      	movs	r2, #0
 800041a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800041c:	003b      	movs	r3, r7
 800041e:	2200      	movs	r2, #0
 8000420:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000422:	003b      	movs	r3, r7
 8000424:	2200      	movs	r2, #0
 8000426:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000428:	003b      	movs	r3, r7
 800042a:	2101      	movs	r1, #1
 800042c:	0018      	movs	r0, r3
 800042e:	f001 ff1f 	bl	8002270 <HAL_RCC_ClockConfig>
 8000432:	1e03      	subs	r3, r0, #0
 8000434:	d001      	beq.n	800043a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000436:	f000 fa35 	bl	80008a4 <Error_Handler>
  }
}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	46bd      	mov	sp, r7
 800043e:	b00d      	add	sp, #52	@ 0x34
 8000440:	bd90      	pop	{r4, r7, pc}
	...

08000444 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b084      	sub	sp, #16
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800044a:	1d3b      	adds	r3, r7, #4
 800044c:	0018      	movs	r0, r3
 800044e:	230c      	movs	r3, #12
 8000450:	001a      	movs	r2, r3
 8000452:	2100      	movs	r1, #0
 8000454:	f003 f9fc 	bl	8003850 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000458:	4b2d      	ldr	r3, [pc, #180]	@ (8000510 <MX_ADC1_Init+0xcc>)
 800045a:	4a2e      	ldr	r2, [pc, #184]	@ (8000514 <MX_ADC1_Init+0xd0>)
 800045c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800045e:	4b2c      	ldr	r3, [pc, #176]	@ (8000510 <MX_ADC1_Init+0xcc>)
 8000460:	2280      	movs	r2, #128	@ 0x80
 8000462:	05d2      	lsls	r2, r2, #23
 8000464:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000466:	4b2a      	ldr	r3, [pc, #168]	@ (8000510 <MX_ADC1_Init+0xcc>)
 8000468:	2200      	movs	r2, #0
 800046a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800046c:	4b28      	ldr	r3, [pc, #160]	@ (8000510 <MX_ADC1_Init+0xcc>)
 800046e:	2200      	movs	r2, #0
 8000470:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000472:	4b27      	ldr	r3, [pc, #156]	@ (8000510 <MX_ADC1_Init+0xcc>)
 8000474:	2200      	movs	r2, #0
 8000476:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000478:	4b25      	ldr	r3, [pc, #148]	@ (8000510 <MX_ADC1_Init+0xcc>)
 800047a:	2204      	movs	r2, #4
 800047c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800047e:	4b24      	ldr	r3, [pc, #144]	@ (8000510 <MX_ADC1_Init+0xcc>)
 8000480:	2200      	movs	r2, #0
 8000482:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000484:	4b22      	ldr	r3, [pc, #136]	@ (8000510 <MX_ADC1_Init+0xcc>)
 8000486:	2200      	movs	r2, #0
 8000488:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800048a:	4b21      	ldr	r3, [pc, #132]	@ (8000510 <MX_ADC1_Init+0xcc>)
 800048c:	2200      	movs	r2, #0
 800048e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000490:	4b1f      	ldr	r3, [pc, #124]	@ (8000510 <MX_ADC1_Init+0xcc>)
 8000492:	2201      	movs	r2, #1
 8000494:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000496:	4b1e      	ldr	r3, [pc, #120]	@ (8000510 <MX_ADC1_Init+0xcc>)
 8000498:	2220      	movs	r2, #32
 800049a:	2100      	movs	r1, #0
 800049c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800049e:	4b1c      	ldr	r3, [pc, #112]	@ (8000510 <MX_ADC1_Init+0xcc>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000510 <MX_ADC1_Init+0xcc>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80004aa:	4b19      	ldr	r3, [pc, #100]	@ (8000510 <MX_ADC1_Init+0xcc>)
 80004ac:	222c      	movs	r2, #44	@ 0x2c
 80004ae:	2100      	movs	r1, #0
 80004b0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004b2:	4b17      	ldr	r3, [pc, #92]	@ (8000510 <MX_ADC1_Init+0xcc>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80004b8:	4b15      	ldr	r3, [pc, #84]	@ (8000510 <MX_ADC1_Init+0xcc>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80004be:	4b14      	ldr	r3, [pc, #80]	@ (8000510 <MX_ADC1_Init+0xcc>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80004c4:	4b12      	ldr	r3, [pc, #72]	@ (8000510 <MX_ADC1_Init+0xcc>)
 80004c6:	223c      	movs	r2, #60	@ 0x3c
 80004c8:	2100      	movs	r1, #0
 80004ca:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80004cc:	4b10      	ldr	r3, [pc, #64]	@ (8000510 <MX_ADC1_Init+0xcc>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000510 <MX_ADC1_Init+0xcc>)
 80004d4:	0018      	movs	r0, r3
 80004d6:	f000 fd6f 	bl	8000fb8 <HAL_ADC_Init>
 80004da:	1e03      	subs	r3, r0, #0
 80004dc:	d001      	beq.n	80004e2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80004de:	f000 f9e1 	bl	80008a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000518 <MX_ADC1_Init+0xd4>)
 80004e6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	2200      	movs	r2, #0
 80004ec:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	2200      	movs	r2, #0
 80004f2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004f4:	1d3a      	adds	r2, r7, #4
 80004f6:	4b06      	ldr	r3, [pc, #24]	@ (8000510 <MX_ADC1_Init+0xcc>)
 80004f8:	0011      	movs	r1, r2
 80004fa:	0018      	movs	r0, r3
 80004fc:	f000 ff02 	bl	8001304 <HAL_ADC_ConfigChannel>
 8000500:	1e03      	subs	r3, r0, #0
 8000502:	d001      	beq.n	8000508 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000504:	f000 f9ce 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000508:	46c0      	nop			@ (mov r8, r8)
 800050a:	46bd      	mov	sp, r7
 800050c:	b004      	add	sp, #16
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20000028 	.word	0x20000028
 8000514:	40012400 	.word	0x40012400
 8000518:	a4000200 	.word	0xa4000200

0800051c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000520:	4b1b      	ldr	r3, [pc, #108]	@ (8000590 <MX_I2C1_Init+0x74>)
 8000522:	4a1c      	ldr	r2, [pc, #112]	@ (8000594 <MX_I2C1_Init+0x78>)
 8000524:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000526:	4b1a      	ldr	r3, [pc, #104]	@ (8000590 <MX_I2C1_Init+0x74>)
 8000528:	4a1b      	ldr	r2, [pc, #108]	@ (8000598 <MX_I2C1_Init+0x7c>)
 800052a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800052c:	4b18      	ldr	r3, [pc, #96]	@ (8000590 <MX_I2C1_Init+0x74>)
 800052e:	2200      	movs	r2, #0
 8000530:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000532:	4b17      	ldr	r3, [pc, #92]	@ (8000590 <MX_I2C1_Init+0x74>)
 8000534:	2201      	movs	r2, #1
 8000536:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000538:	4b15      	ldr	r3, [pc, #84]	@ (8000590 <MX_I2C1_Init+0x74>)
 800053a:	2200      	movs	r2, #0
 800053c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800053e:	4b14      	ldr	r3, [pc, #80]	@ (8000590 <MX_I2C1_Init+0x74>)
 8000540:	2200      	movs	r2, #0
 8000542:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000544:	4b12      	ldr	r3, [pc, #72]	@ (8000590 <MX_I2C1_Init+0x74>)
 8000546:	2200      	movs	r2, #0
 8000548:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800054a:	4b11      	ldr	r3, [pc, #68]	@ (8000590 <MX_I2C1_Init+0x74>)
 800054c:	2200      	movs	r2, #0
 800054e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000550:	4b0f      	ldr	r3, [pc, #60]	@ (8000590 <MX_I2C1_Init+0x74>)
 8000552:	2200      	movs	r2, #0
 8000554:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000556:	4b0e      	ldr	r3, [pc, #56]	@ (8000590 <MX_I2C1_Init+0x74>)
 8000558:	0018      	movs	r0, r3
 800055a:	f001 fb67 	bl	8001c2c <HAL_I2C_Init>
 800055e:	1e03      	subs	r3, r0, #0
 8000560:	d001      	beq.n	8000566 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000562:	f000 f99f 	bl	80008a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000566:	4b0a      	ldr	r3, [pc, #40]	@ (8000590 <MX_I2C1_Init+0x74>)
 8000568:	2100      	movs	r1, #0
 800056a:	0018      	movs	r0, r3
 800056c:	f001 fc04 	bl	8001d78 <HAL_I2CEx_ConfigAnalogFilter>
 8000570:	1e03      	subs	r3, r0, #0
 8000572:	d001      	beq.n	8000578 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000574:	f000 f996 	bl	80008a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000578:	4b05      	ldr	r3, [pc, #20]	@ (8000590 <MX_I2C1_Init+0x74>)
 800057a:	2100      	movs	r1, #0
 800057c:	0018      	movs	r0, r3
 800057e:	f001 fc47 	bl	8001e10 <HAL_I2CEx_ConfigDigitalFilter>
 8000582:	1e03      	subs	r3, r0, #0
 8000584:	d001      	beq.n	800058a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000586:	f000 f98d 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800058a:	46c0      	nop			@ (mov r8, r8)
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	2000008c 	.word	0x2000008c
 8000594:	40005400 	.word	0x40005400
 8000598:	20303e5d 	.word	0x20303e5d

0800059c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b098      	sub	sp, #96	@ 0x60
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a2:	2354      	movs	r3, #84	@ 0x54
 80005a4:	18fb      	adds	r3, r7, r3
 80005a6:	0018      	movs	r0, r3
 80005a8:	230c      	movs	r3, #12
 80005aa:	001a      	movs	r2, r3
 80005ac:	2100      	movs	r1, #0
 80005ae:	f003 f94f 	bl	8003850 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005b2:	2338      	movs	r3, #56	@ 0x38
 80005b4:	18fb      	adds	r3, r7, r3
 80005b6:	0018      	movs	r0, r3
 80005b8:	231c      	movs	r3, #28
 80005ba:	001a      	movs	r2, r3
 80005bc:	2100      	movs	r1, #0
 80005be:	f003 f947 	bl	8003850 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	0018      	movs	r0, r3
 80005c6:	2334      	movs	r3, #52	@ 0x34
 80005c8:	001a      	movs	r2, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	f003 f940 	bl	8003850 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005d0:	4b56      	ldr	r3, [pc, #344]	@ (800072c <MX_TIM1_Init+0x190>)
 80005d2:	4a57      	ldr	r2, [pc, #348]	@ (8000730 <MX_TIM1_Init+0x194>)
 80005d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24-1;
 80005d6:	4b55      	ldr	r3, [pc, #340]	@ (800072c <MX_TIM1_Init+0x190>)
 80005d8:	2217      	movs	r2, #23
 80005da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005dc:	4b53      	ldr	r3, [pc, #332]	@ (800072c <MX_TIM1_Init+0x190>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80005e2:	4b52      	ldr	r3, [pc, #328]	@ (800072c <MX_TIM1_Init+0x190>)
 80005e4:	2263      	movs	r2, #99	@ 0x63
 80005e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005e8:	4b50      	ldr	r3, [pc, #320]	@ (800072c <MX_TIM1_Init+0x190>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005ee:	4b4f      	ldr	r3, [pc, #316]	@ (800072c <MX_TIM1_Init+0x190>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f4:	4b4d      	ldr	r3, [pc, #308]	@ (800072c <MX_TIM1_Init+0x190>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80005fa:	4b4c      	ldr	r3, [pc, #304]	@ (800072c <MX_TIM1_Init+0x190>)
 80005fc:	0018      	movs	r0, r3
 80005fe:	f002 f929 	bl	8002854 <HAL_TIM_PWM_Init>
 8000602:	1e03      	subs	r3, r0, #0
 8000604:	d001      	beq.n	800060a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000606:	f000 f94d 	bl	80008a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800060a:	2154      	movs	r1, #84	@ 0x54
 800060c:	187b      	adds	r3, r7, r1
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000612:	187b      	adds	r3, r7, r1
 8000614:	2200      	movs	r2, #0
 8000616:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000618:	187b      	adds	r3, r7, r1
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800061e:	187a      	adds	r2, r7, r1
 8000620:	4b42      	ldr	r3, [pc, #264]	@ (800072c <MX_TIM1_Init+0x190>)
 8000622:	0011      	movs	r1, r2
 8000624:	0018      	movs	r0, r3
 8000626:	f002 fff3 	bl	8003610 <HAL_TIMEx_MasterConfigSynchronization>
 800062a:	1e03      	subs	r3, r0, #0
 800062c:	d001      	beq.n	8000632 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800062e:	f000 f939 	bl	80008a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000632:	2138      	movs	r1, #56	@ 0x38
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2260      	movs	r2, #96	@ 0x60
 8000638:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800063a:	187b      	adds	r3, r7, r1
 800063c:	2200      	movs	r2, #0
 800063e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000640:	187b      	adds	r3, r7, r1
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000646:	187b      	adds	r3, r7, r1
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800064c:	187b      	adds	r3, r7, r1
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000652:	187b      	adds	r3, r7, r1
 8000654:	2200      	movs	r2, #0
 8000656:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2200      	movs	r2, #0
 800065c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800065e:	1879      	adds	r1, r7, r1
 8000660:	4b32      	ldr	r3, [pc, #200]	@ (800072c <MX_TIM1_Init+0x190>)
 8000662:	2200      	movs	r2, #0
 8000664:	0018      	movs	r0, r3
 8000666:	f002 fb87 	bl	8002d78 <HAL_TIM_PWM_ConfigChannel>
 800066a:	1e03      	subs	r3, r0, #0
 800066c:	d001      	beq.n	8000672 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800066e:	f000 f919 	bl	80008a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000672:	2338      	movs	r3, #56	@ 0x38
 8000674:	18f9      	adds	r1, r7, r3
 8000676:	4b2d      	ldr	r3, [pc, #180]	@ (800072c <MX_TIM1_Init+0x190>)
 8000678:	2204      	movs	r2, #4
 800067a:	0018      	movs	r0, r3
 800067c:	f002 fb7c 	bl	8002d78 <HAL_TIM_PWM_ConfigChannel>
 8000680:	1e03      	subs	r3, r0, #0
 8000682:	d001      	beq.n	8000688 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8000684:	f000 f90e 	bl	80008a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000688:	2338      	movs	r3, #56	@ 0x38
 800068a:	18f9      	adds	r1, r7, r3
 800068c:	4b27      	ldr	r3, [pc, #156]	@ (800072c <MX_TIM1_Init+0x190>)
 800068e:	2208      	movs	r2, #8
 8000690:	0018      	movs	r0, r3
 8000692:	f002 fb71 	bl	8002d78 <HAL_TIM_PWM_ConfigChannel>
 8000696:	1e03      	subs	r3, r0, #0
 8000698:	d001      	beq.n	800069e <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 800069a:	f000 f903 	bl	80008a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800069e:	2338      	movs	r3, #56	@ 0x38
 80006a0:	18f9      	adds	r1, r7, r3
 80006a2:	4b22      	ldr	r3, [pc, #136]	@ (800072c <MX_TIM1_Init+0x190>)
 80006a4:	220c      	movs	r2, #12
 80006a6:	0018      	movs	r0, r3
 80006a8:	f002 fb66 	bl	8002d78 <HAL_TIM_PWM_ConfigChannel>
 80006ac:	1e03      	subs	r3, r0, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80006b0:	f000 f8f8 	bl	80008a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2200      	movs	r2, #0
 80006be:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2200      	movs	r2, #0
 80006ca:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2280      	movs	r2, #128	@ 0x80
 80006d6:	0192      	lsls	r2, r2, #6
 80006d8:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2280      	movs	r2, #128	@ 0x80
 80006f0:	0492      	lsls	r2, r2, #18
 80006f2:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2200      	movs	r2, #0
 80006f8:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2200      	movs	r2, #0
 80006fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2200      	movs	r2, #0
 8000704:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000706:	1d3a      	adds	r2, r7, #4
 8000708:	4b08      	ldr	r3, [pc, #32]	@ (800072c <MX_TIM1_Init+0x190>)
 800070a:	0011      	movs	r1, r2
 800070c:	0018      	movs	r0, r3
 800070e:	f002 ffe1 	bl	80036d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000712:	1e03      	subs	r3, r0, #0
 8000714:	d001      	beq.n	800071a <MX_TIM1_Init+0x17e>
  {
    Error_Handler();
 8000716:	f000 f8c5 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800071a:	4b04      	ldr	r3, [pc, #16]	@ (800072c <MX_TIM1_Init+0x190>)
 800071c:	0018      	movs	r0, r3
 800071e:	f000 f9f9 	bl	8000b14 <HAL_TIM_MspPostInit>

}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	b018      	add	sp, #96	@ 0x60
 8000728:	bd80      	pop	{r7, pc}
 800072a:	46c0      	nop			@ (mov r8, r8)
 800072c:	200000e0 	.word	0x200000e0
 8000730:	40012c00 	.word	0x40012c00

08000734 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b088      	sub	sp, #32
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	0018      	movs	r0, r3
 800073e:	231c      	movs	r3, #28
 8000740:	001a      	movs	r2, r3
 8000742:	2100      	movs	r1, #0
 8000744:	f003 f884 	bl	8003850 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000748:	4b1e      	ldr	r3, [pc, #120]	@ (80007c4 <MX_TIM14_Init+0x90>)
 800074a:	4a1f      	ldr	r2, [pc, #124]	@ (80007c8 <MX_TIM14_Init+0x94>)
 800074c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 48-1;
 800074e:	4b1d      	ldr	r3, [pc, #116]	@ (80007c4 <MX_TIM14_Init+0x90>)
 8000750:	222f      	movs	r2, #47	@ 0x2f
 8000752:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000754:	4b1b      	ldr	r3, [pc, #108]	@ (80007c4 <MX_TIM14_Init+0x90>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000;
 800075a:	4b1a      	ldr	r3, [pc, #104]	@ (80007c4 <MX_TIM14_Init+0x90>)
 800075c:	22fa      	movs	r2, #250	@ 0xfa
 800075e:	0092      	lsls	r2, r2, #2
 8000760:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000762:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <MX_TIM14_Init+0x90>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000768:	4b16      	ldr	r3, [pc, #88]	@ (80007c4 <MX_TIM14_Init+0x90>)
 800076a:	2200      	movs	r2, #0
 800076c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800076e:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <MX_TIM14_Init+0x90>)
 8000770:	0018      	movs	r0, r3
 8000772:	f001 ffb7 	bl	80026e4 <HAL_TIM_Base_Init>
 8000776:	1e03      	subs	r3, r0, #0
 8000778:	d001      	beq.n	800077e <MX_TIM14_Init+0x4a>
  {
    Error_Handler();
 800077a:	f000 f893 	bl	80008a4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 800077e:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <MX_TIM14_Init+0x90>)
 8000780:	0018      	movs	r0, r3
 8000782:	f002 f807 	bl	8002794 <HAL_TIM_OC_Init>
 8000786:	1e03      	subs	r3, r0, #0
 8000788:	d001      	beq.n	800078e <MX_TIM14_Init+0x5a>
  {
    Error_Handler();
 800078a:	f000 f88b 	bl	80008a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2200      	movs	r2, #0
 8000798:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	2200      	movs	r2, #0
 80007a4:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007a6:	1d39      	adds	r1, r7, #4
 80007a8:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <MX_TIM14_Init+0x90>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	0018      	movs	r0, r3
 80007ae:	f002 fa83 	bl	8002cb8 <HAL_TIM_OC_ConfigChannel>
 80007b2:	1e03      	subs	r3, r0, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 80007b6:	f000 f875 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	46bd      	mov	sp, r7
 80007be:	b008      	add	sp, #32
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	46c0      	nop			@ (mov r8, r8)
 80007c4:	2000012c 	.word	0x2000012c
 80007c8:	40002000 	.word	0x40002000

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b590      	push	{r4, r7, lr}
 80007ce:	b089      	sub	sp, #36	@ 0x24
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	240c      	movs	r4, #12
 80007d4:	193b      	adds	r3, r7, r4
 80007d6:	0018      	movs	r0, r3
 80007d8:	2314      	movs	r3, #20
 80007da:	001a      	movs	r2, r3
 80007dc:	2100      	movs	r1, #0
 80007de:	f003 f837 	bl	8003850 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000898 <MX_GPIO_Init+0xcc>)
 80007e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000898 <MX_GPIO_Init+0xcc>)
 80007e8:	2102      	movs	r1, #2
 80007ea:	430a      	orrs	r2, r1
 80007ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80007ee:	4b2a      	ldr	r3, [pc, #168]	@ (8000898 <MX_GPIO_Init+0xcc>)
 80007f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007f2:	2202      	movs	r2, #2
 80007f4:	4013      	ands	r3, r2
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fa:	4b27      	ldr	r3, [pc, #156]	@ (8000898 <MX_GPIO_Init+0xcc>)
 80007fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007fe:	4b26      	ldr	r3, [pc, #152]	@ (8000898 <MX_GPIO_Init+0xcc>)
 8000800:	2104      	movs	r1, #4
 8000802:	430a      	orrs	r2, r1
 8000804:	635a      	str	r2, [r3, #52]	@ 0x34
 8000806:	4b24      	ldr	r3, [pc, #144]	@ (8000898 <MX_GPIO_Init+0xcc>)
 8000808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800080a:	2204      	movs	r2, #4
 800080c:	4013      	ands	r3, r2
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	4b21      	ldr	r3, [pc, #132]	@ (8000898 <MX_GPIO_Init+0xcc>)
 8000814:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000816:	4b20      	ldr	r3, [pc, #128]	@ (8000898 <MX_GPIO_Init+0xcc>)
 8000818:	2101      	movs	r1, #1
 800081a:	430a      	orrs	r2, r1
 800081c:	635a      	str	r2, [r3, #52]	@ 0x34
 800081e:	4b1e      	ldr	r3, [pc, #120]	@ (8000898 <MX_GPIO_Init+0xcc>)
 8000820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000822:	2201      	movs	r2, #1
 8000824:	4013      	ands	r3, r2
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800082a:	23c0      	movs	r3, #192	@ 0xc0
 800082c:	021b      	lsls	r3, r3, #8
 800082e:	481b      	ldr	r0, [pc, #108]	@ (800089c <MX_GPIO_Init+0xd0>)
 8000830:	2200      	movs	r2, #0
 8000832:	0019      	movs	r1, r3
 8000834:	f001 f984 	bl	8001b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000838:	193b      	adds	r3, r7, r4
 800083a:	22c0      	movs	r2, #192	@ 0xc0
 800083c:	0212      	lsls	r2, r2, #8
 800083e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	193b      	adds	r3, r7, r4
 8000842:	2201      	movs	r2, #1
 8000844:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	193b      	adds	r3, r7, r4
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	193b      	adds	r3, r7, r4
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000852:	193b      	adds	r3, r7, r4
 8000854:	4a11      	ldr	r2, [pc, #68]	@ (800089c <MX_GPIO_Init+0xd0>)
 8000856:	0019      	movs	r1, r3
 8000858:	0010      	movs	r0, r2
 800085a:	f001 f807 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800085e:	0021      	movs	r1, r4
 8000860:	187b      	adds	r3, r7, r1
 8000862:	22f0      	movs	r2, #240	@ 0xf0
 8000864:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000866:	187b      	adds	r3, r7, r1
 8000868:	4a0d      	ldr	r2, [pc, #52]	@ (80008a0 <MX_GPIO_Init+0xd4>)
 800086a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800086c:	187b      	adds	r3, r7, r1
 800086e:	2201      	movs	r2, #1
 8000870:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000872:	187a      	adds	r2, r7, r1
 8000874:	23a0      	movs	r3, #160	@ 0xa0
 8000876:	05db      	lsls	r3, r3, #23
 8000878:	0011      	movs	r1, r2
 800087a:	0018      	movs	r0, r3
 800087c:	f000 fff6 	bl	800186c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000880:	2200      	movs	r2, #0
 8000882:	2100      	movs	r1, #0
 8000884:	2007      	movs	r0, #7
 8000886:	f000 ffbf 	bl	8001808 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800088a:	2007      	movs	r0, #7
 800088c:	f000 ffd1 	bl	8001832 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000890:	46c0      	nop			@ (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	b009      	add	sp, #36	@ 0x24
 8000896:	bd90      	pop	{r4, r7, pc}
 8000898:	40021000 	.word	0x40021000
 800089c:	50000800 	.word	0x50000800
 80008a0:	10310000 	.word	0x10310000

080008a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a8:	b672      	cpsid	i
}
 80008aa:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ac:	46c0      	nop			@ (mov r8, r8)
 80008ae:	e7fd      	b.n	80008ac <Error_Handler+0x8>

080008b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b6:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <HAL_MspInit+0x44>)
 80008b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008ba:	4b0e      	ldr	r3, [pc, #56]	@ (80008f4 <HAL_MspInit+0x44>)
 80008bc:	2101      	movs	r1, #1
 80008be:	430a      	orrs	r2, r1
 80008c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80008c2:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <HAL_MspInit+0x44>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c6:	2201      	movs	r2, #1
 80008c8:	4013      	ands	r3, r2
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ce:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <HAL_MspInit+0x44>)
 80008d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008d2:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <HAL_MspInit+0x44>)
 80008d4:	2180      	movs	r1, #128	@ 0x80
 80008d6:	0549      	lsls	r1, r1, #21
 80008d8:	430a      	orrs	r2, r1
 80008da:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008dc:	4b05      	ldr	r3, [pc, #20]	@ (80008f4 <HAL_MspInit+0x44>)
 80008de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008e0:	2380      	movs	r3, #128	@ 0x80
 80008e2:	055b      	lsls	r3, r3, #21
 80008e4:	4013      	ands	r3, r2
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ea:	46c0      	nop			@ (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	b002      	add	sp, #8
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	46c0      	nop			@ (mov r8, r8)
 80008f4:	40021000 	.word	0x40021000

080008f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b091      	sub	sp, #68	@ 0x44
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	232c      	movs	r3, #44	@ 0x2c
 8000902:	18fb      	adds	r3, r7, r3
 8000904:	0018      	movs	r0, r3
 8000906:	2314      	movs	r3, #20
 8000908:	001a      	movs	r2, r3
 800090a:	2100      	movs	r1, #0
 800090c:	f002 ffa0 	bl	8003850 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000910:	2410      	movs	r4, #16
 8000912:	193b      	adds	r3, r7, r4
 8000914:	0018      	movs	r0, r3
 8000916:	231c      	movs	r3, #28
 8000918:	001a      	movs	r2, r3
 800091a:	2100      	movs	r1, #0
 800091c:	f002 ff98 	bl	8003850 <memset>
  if(hadc->Instance==ADC1)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a20      	ldr	r2, [pc, #128]	@ (80009a8 <HAL_ADC_MspInit+0xb0>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d13a      	bne.n	80009a0 <HAL_ADC_MspInit+0xa8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800092a:	193b      	adds	r3, r7, r4
 800092c:	2280      	movs	r2, #128	@ 0x80
 800092e:	01d2      	lsls	r2, r2, #7
 8000930:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000932:	193b      	adds	r3, r7, r4
 8000934:	2200      	movs	r2, #0
 8000936:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000938:	193b      	adds	r3, r7, r4
 800093a:	0018      	movs	r0, r3
 800093c:	f001 fde4 	bl	8002508 <HAL_RCCEx_PeriphCLKConfig>
 8000940:	1e03      	subs	r3, r0, #0
 8000942:	d001      	beq.n	8000948 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000944:	f7ff ffae 	bl	80008a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000948:	4b18      	ldr	r3, [pc, #96]	@ (80009ac <HAL_ADC_MspInit+0xb4>)
 800094a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800094c:	4b17      	ldr	r3, [pc, #92]	@ (80009ac <HAL_ADC_MspInit+0xb4>)
 800094e:	2180      	movs	r1, #128	@ 0x80
 8000950:	0349      	lsls	r1, r1, #13
 8000952:	430a      	orrs	r2, r1
 8000954:	641a      	str	r2, [r3, #64]	@ 0x40
 8000956:	4b15      	ldr	r3, [pc, #84]	@ (80009ac <HAL_ADC_MspInit+0xb4>)
 8000958:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800095a:	2380      	movs	r3, #128	@ 0x80
 800095c:	035b      	lsls	r3, r3, #13
 800095e:	4013      	ands	r3, r2
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000964:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <HAL_ADC_MspInit+0xb4>)
 8000966:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000968:	4b10      	ldr	r3, [pc, #64]	@ (80009ac <HAL_ADC_MspInit+0xb4>)
 800096a:	2101      	movs	r1, #1
 800096c:	430a      	orrs	r2, r1
 800096e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000970:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <HAL_ADC_MspInit+0xb4>)
 8000972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000974:	2201      	movs	r2, #1
 8000976:	4013      	ands	r3, r2
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA8     ------> ADC1_IN8
    PA11 [PA9]     ------> ADC1_IN11
    PA12 [PA10]     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800097c:	212c      	movs	r1, #44	@ 0x2c
 800097e:	187b      	adds	r3, r7, r1
 8000980:	22c8      	movs	r2, #200	@ 0xc8
 8000982:	0152      	lsls	r2, r2, #5
 8000984:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000986:	187b      	adds	r3, r7, r1
 8000988:	2203      	movs	r2, #3
 800098a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	187b      	adds	r3, r7, r1
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	187a      	adds	r2, r7, r1
 8000994:	23a0      	movs	r3, #160	@ 0xa0
 8000996:	05db      	lsls	r3, r3, #23
 8000998:	0011      	movs	r1, r2
 800099a:	0018      	movs	r0, r3
 800099c:	f000 ff66 	bl	800186c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009a0:	46c0      	nop			@ (mov r8, r8)
 80009a2:	46bd      	mov	sp, r7
 80009a4:	b011      	add	sp, #68	@ 0x44
 80009a6:	bd90      	pop	{r4, r7, pc}
 80009a8:	40012400 	.word	0x40012400
 80009ac:	40021000 	.word	0x40021000

080009b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009b0:	b590      	push	{r4, r7, lr}
 80009b2:	b091      	sub	sp, #68	@ 0x44
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	232c      	movs	r3, #44	@ 0x2c
 80009ba:	18fb      	adds	r3, r7, r3
 80009bc:	0018      	movs	r0, r3
 80009be:	2314      	movs	r3, #20
 80009c0:	001a      	movs	r2, r3
 80009c2:	2100      	movs	r1, #0
 80009c4:	f002 ff44 	bl	8003850 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009c8:	2410      	movs	r4, #16
 80009ca:	193b      	adds	r3, r7, r4
 80009cc:	0018      	movs	r0, r3
 80009ce:	231c      	movs	r3, #28
 80009d0:	001a      	movs	r2, r3
 80009d2:	2100      	movs	r1, #0
 80009d4:	f002 ff3c 	bl	8003850 <memset>
  if(hi2c->Instance==I2C1)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a22      	ldr	r2, [pc, #136]	@ (8000a68 <HAL_I2C_MspInit+0xb8>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d13d      	bne.n	8000a5e <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009e2:	193b      	adds	r3, r7, r4
 80009e4:	2240      	movs	r2, #64	@ 0x40
 80009e6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009e8:	193b      	adds	r3, r7, r4
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009ee:	193b      	adds	r3, r7, r4
 80009f0:	0018      	movs	r0, r3
 80009f2:	f001 fd89 	bl	8002508 <HAL_RCCEx_PeriphCLKConfig>
 80009f6:	1e03      	subs	r3, r0, #0
 80009f8:	d001      	beq.n	80009fe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80009fa:	f7ff ff53 	bl	80008a4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fe:	4b1b      	ldr	r3, [pc, #108]	@ (8000a6c <HAL_I2C_MspInit+0xbc>)
 8000a00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a02:	4b1a      	ldr	r3, [pc, #104]	@ (8000a6c <HAL_I2C_MspInit+0xbc>)
 8000a04:	2102      	movs	r1, #2
 8000a06:	430a      	orrs	r2, r1
 8000a08:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a0a:	4b18      	ldr	r3, [pc, #96]	@ (8000a6c <HAL_I2C_MspInit+0xbc>)
 8000a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a0e:	2202      	movs	r2, #2
 8000a10:	4013      	ands	r3, r2
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000a16:	212c      	movs	r1, #44	@ 0x2c
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	22c0      	movs	r2, #192	@ 0xc0
 8000a1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	2212      	movs	r2, #18
 8000a22:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2201      	movs	r2, #1
 8000a28:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2206      	movs	r2, #6
 8000a34:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	4a0d      	ldr	r2, [pc, #52]	@ (8000a70 <HAL_I2C_MspInit+0xc0>)
 8000a3a:	0019      	movs	r1, r3
 8000a3c:	0010      	movs	r0, r2
 8000a3e:	f000 ff15 	bl	800186c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a42:	4b0a      	ldr	r3, [pc, #40]	@ (8000a6c <HAL_I2C_MspInit+0xbc>)
 8000a44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a46:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <HAL_I2C_MspInit+0xbc>)
 8000a48:	2180      	movs	r1, #128	@ 0x80
 8000a4a:	0389      	lsls	r1, r1, #14
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a50:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <HAL_I2C_MspInit+0xbc>)
 8000a52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a54:	2380      	movs	r3, #128	@ 0x80
 8000a56:	039b      	lsls	r3, r3, #14
 8000a58:	4013      	ands	r3, r2
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b011      	add	sp, #68	@ 0x44
 8000a64:	bd90      	pop	{r4, r7, pc}
 8000a66:	46c0      	nop			@ (mov r8, r8)
 8000a68:	40005400 	.word	0x40005400
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	50000400 	.word	0x50000400

08000a74 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a0e      	ldr	r2, [pc, #56]	@ (8000abc <HAL_TIM_PWM_MspInit+0x48>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d115      	bne.n	8000ab2 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a86:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac0 <HAL_TIM_PWM_MspInit+0x4c>)
 8000a88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac0 <HAL_TIM_PWM_MspInit+0x4c>)
 8000a8c:	2180      	movs	r1, #128	@ 0x80
 8000a8e:	0109      	lsls	r1, r1, #4
 8000a90:	430a      	orrs	r2, r1
 8000a92:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a94:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac0 <HAL_TIM_PWM_MspInit+0x4c>)
 8000a96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a98:	2380      	movs	r3, #128	@ 0x80
 8000a9a:	011b      	lsls	r3, r3, #4
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	200e      	movs	r0, #14
 8000aa8:	f000 feae 	bl	8001808 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000aac:	200e      	movs	r0, #14
 8000aae:	f000 fec0 	bl	8001832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	b004      	add	sp, #16
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	46c0      	nop			@ (mov r8, r8)
 8000abc:	40012c00 	.word	0x40012c00
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a0e      	ldr	r2, [pc, #56]	@ (8000b0c <HAL_TIM_Base_MspInit+0x48>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d115      	bne.n	8000b02 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b10 <HAL_TIM_Base_MspInit+0x4c>)
 8000ad8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ada:	4b0d      	ldr	r3, [pc, #52]	@ (8000b10 <HAL_TIM_Base_MspInit+0x4c>)
 8000adc:	2180      	movs	r1, #128	@ 0x80
 8000ade:	0209      	lsls	r1, r1, #8
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b10 <HAL_TIM_Base_MspInit+0x4c>)
 8000ae6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ae8:	2380      	movs	r3, #128	@ 0x80
 8000aea:	021b      	lsls	r3, r3, #8
 8000aec:	4013      	ands	r3, r2
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2100      	movs	r1, #0
 8000af6:	2013      	movs	r0, #19
 8000af8:	f000 fe86 	bl	8001808 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000afc:	2013      	movs	r0, #19
 8000afe:	f000 fe98 	bl	8001832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000b02:	46c0      	nop			@ (mov r8, r8)
 8000b04:	46bd      	mov	sp, r7
 8000b06:	b004      	add	sp, #16
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	46c0      	nop			@ (mov r8, r8)
 8000b0c:	40002000 	.word	0x40002000
 8000b10:	40021000 	.word	0x40021000

08000b14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b14:	b590      	push	{r4, r7, lr}
 8000b16:	b089      	sub	sp, #36	@ 0x24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	240c      	movs	r4, #12
 8000b1e:	193b      	adds	r3, r7, r4
 8000b20:	0018      	movs	r0, r3
 8000b22:	2314      	movs	r3, #20
 8000b24:	001a      	movs	r2, r3
 8000b26:	2100      	movs	r1, #0
 8000b28:	f002 fe92 	bl	8003850 <memset>
  if(htim->Instance==TIM1)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a14      	ldr	r2, [pc, #80]	@ (8000b84 <HAL_TIM_MspPostInit+0x70>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d122      	bne.n	8000b7c <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <HAL_TIM_MspPostInit+0x74>)
 8000b38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b3a:	4b13      	ldr	r3, [pc, #76]	@ (8000b88 <HAL_TIM_MspPostInit+0x74>)
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	430a      	orrs	r2, r1
 8000b40:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <HAL_TIM_MspPostInit+0x74>)
 8000b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b46:	2201      	movs	r2, #1
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> TIM1_CH1
    PA1     ------> TIM1_CH2
    PA2     ------> TIM1_CH3
    PA3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b4e:	0021      	movs	r1, r4
 8000b50:	187b      	adds	r3, r7, r1
 8000b52:	220f      	movs	r2, #15
 8000b54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	187b      	adds	r3, r7, r1
 8000b58:	2202      	movs	r2, #2
 8000b5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	187b      	adds	r3, r7, r1
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	187b      	adds	r3, r7, r1
 8000b64:	2200      	movs	r2, #0
 8000b66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM1;
 8000b68:	187b      	adds	r3, r7, r1
 8000b6a:	2205      	movs	r2, #5
 8000b6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	187a      	adds	r2, r7, r1
 8000b70:	23a0      	movs	r3, #160	@ 0xa0
 8000b72:	05db      	lsls	r3, r3, #23
 8000b74:	0011      	movs	r1, r2
 8000b76:	0018      	movs	r0, r3
 8000b78:	f000 fe78 	bl	800186c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b7c:	46c0      	nop			@ (mov r8, r8)
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	b009      	add	sp, #36	@ 0x24
 8000b82:	bd90      	pop	{r4, r7, pc}
 8000b84:	40012c00 	.word	0x40012c00
 8000b88:	40021000 	.word	0x40021000

08000b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b90:	46c0      	nop			@ (mov r8, r8)
 8000b92:	e7fd      	b.n	8000b90 <NMI_Handler+0x4>

08000b94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b98:	46c0      	nop			@ (mov r8, r8)
 8000b9a:	e7fd      	b.n	8000b98 <HardFault_Handler+0x4>

08000b9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ba0:	46c0      	nop			@ (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000baa:	46c0      	nop			@ (mov r8, r8)
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb4:	f000 f8c2 	bl	8000d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb8:	46c0      	nop			@ (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000bc2:	2010      	movs	r0, #16
 8000bc4:	f000 fff4 	bl	8001bb0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000bc8:	2020      	movs	r0, #32
 8000bca:	f000 fff1 	bl	8001bb0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000bce:	2040      	movs	r0, #64	@ 0x40
 8000bd0:	f000 ffee 	bl	8001bb0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000bd4:	2080      	movs	r0, #128	@ 0x80
 8000bd6:	f000 ffeb 	bl	8001bb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000bda:	46c0      	nop			@ (mov r8, r8)
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000be4:	4b03      	ldr	r3, [pc, #12]	@ (8000bf4 <TIM1_CC_IRQHandler+0x14>)
 8000be6:	0018      	movs	r0, r3
 8000be8:	f001 ff64 	bl	8002ab4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000bec:	46c0      	nop			@ (mov r8, r8)
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	46c0      	nop			@ (mov r8, r8)
 8000bf4:	200000e0 	.word	0x200000e0

08000bf8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000bfc:	4b03      	ldr	r3, [pc, #12]	@ (8000c0c <TIM14_IRQHandler+0x14>)
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f001 ff58 	bl	8002ab4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000c04:	46c0      	nop			@ (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	46c0      	nop			@ (mov r8, r8)
 8000c0c:	2000012c 	.word	0x2000012c

08000c10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c14:	4b03      	ldr	r3, [pc, #12]	@ (8000c24 <SystemInit+0x14>)
 8000c16:	2280      	movs	r2, #128	@ 0x80
 8000c18:	0512      	lsls	r2, r2, #20
 8000c1a:	609a      	str	r2, [r3, #8]
#endif
}
 8000c1c:	46c0      	nop			@ (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	46c0      	nop			@ (mov r8, r8)
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c28:	480d      	ldr	r0, [pc, #52]	@ (8000c60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c2a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c2c:	f7ff fff0 	bl	8000c10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000c30:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000c32:	e003      	b.n	8000c3c <LoopCopyDataInit>

08000c34 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000c34:	4b0b      	ldr	r3, [pc, #44]	@ (8000c64 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000c36:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000c38:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000c3a:	3104      	adds	r1, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000c3c:	480a      	ldr	r0, [pc, #40]	@ (8000c68 <LoopForever+0xa>)
  ldr r3, =_edata
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c6c <LoopForever+0xe>)
  adds r2, r0, r1
 8000c40:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000c42:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c44:	d3f6      	bcc.n	8000c34 <CopyDataInit>
  ldr r2, =_sbss
 8000c46:	4a0a      	ldr	r2, [pc, #40]	@ (8000c70 <LoopForever+0x12>)
  b LoopFillZerobss
 8000c48:	e002      	b.n	8000c50 <LoopFillZerobss>

08000c4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  str  r3, [r2]
 8000c4c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c4e:	3204      	adds	r2, #4

08000c50 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000c50:	4b08      	ldr	r3, [pc, #32]	@ (8000c74 <LoopForever+0x16>)
  cmp r2, r3
 8000c52:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c54:	d3f9      	bcc.n	8000c4a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000c56:	f002 fe03 	bl	8003860 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c5a:	f7ff fb27 	bl	80002ac <main>

08000c5e <LoopForever>:

LoopForever:
    b LoopForever
 8000c5e:	e7fe      	b.n	8000c5e <LoopForever>
  ldr   r0, =_estack
 8000c60:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000c64:	080039b0 	.word	0x080039b0
  ldr r0, =_sdata
 8000c68:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c6c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000c70:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000c74:	2000017c 	.word	0x2000017c

08000c78 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c78:	e7fe      	b.n	8000c78 <ADC1_IRQHandler>

08000c7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c80:	1dfb      	adds	r3, r7, #7
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c86:	2003      	movs	r0, #3
 8000c88:	f000 f80e 	bl	8000ca8 <HAL_InitTick>
 8000c8c:	1e03      	subs	r3, r0, #0
 8000c8e:	d003      	beq.n	8000c98 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000c90:	1dfb      	adds	r3, r7, #7
 8000c92:	2201      	movs	r2, #1
 8000c94:	701a      	strb	r2, [r3, #0]
 8000c96:	e001      	b.n	8000c9c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c98:	f7ff fe0a 	bl	80008b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c9c:	1dfb      	adds	r3, r7, #7
 8000c9e:	781b      	ldrb	r3, [r3, #0]
}
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b002      	add	sp, #8
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca8:	b590      	push	{r4, r7, lr}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb0:	230f      	movs	r3, #15
 8000cb2:	18fb      	adds	r3, r7, r3
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d30 <HAL_InitTick+0x88>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d02b      	beq.n	8000d18 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000cc0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d34 <HAL_InitTick+0x8c>)
 8000cc2:	681c      	ldr	r4, [r3, #0]
 8000cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d30 <HAL_InitTick+0x88>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	0019      	movs	r1, r3
 8000cca:	23fa      	movs	r3, #250	@ 0xfa
 8000ccc:	0098      	lsls	r0, r3, #2
 8000cce:	f7ff fa1b 	bl	8000108 <__udivsi3>
 8000cd2:	0003      	movs	r3, r0
 8000cd4:	0019      	movs	r1, r3
 8000cd6:	0020      	movs	r0, r4
 8000cd8:	f7ff fa16 	bl	8000108 <__udivsi3>
 8000cdc:	0003      	movs	r3, r0
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f000 fdb7 	bl	8001852 <HAL_SYSTICK_Config>
 8000ce4:	1e03      	subs	r3, r0, #0
 8000ce6:	d112      	bne.n	8000d0e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2b03      	cmp	r3, #3
 8000cec:	d80a      	bhi.n	8000d04 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	425b      	negs	r3, r3
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f000 fd86 	bl	8001808 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d38 <HAL_InitTick+0x90>)
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	e00d      	b.n	8000d20 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d04:	230f      	movs	r3, #15
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	2201      	movs	r2, #1
 8000d0a:	701a      	strb	r2, [r3, #0]
 8000d0c:	e008      	b.n	8000d20 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d0e:	230f      	movs	r3, #15
 8000d10:	18fb      	adds	r3, r7, r3
 8000d12:	2201      	movs	r2, #1
 8000d14:	701a      	strb	r2, [r3, #0]
 8000d16:	e003      	b.n	8000d20 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d18:	230f      	movs	r3, #15
 8000d1a:	18fb      	adds	r3, r7, r3
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d20:	230f      	movs	r3, #15
 8000d22:	18fb      	adds	r3, r7, r3
 8000d24:	781b      	ldrb	r3, [r3, #0]
}
 8000d26:	0018      	movs	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	b005      	add	sp, #20
 8000d2c:	bd90      	pop	{r4, r7, pc}
 8000d2e:	46c0      	nop			@ (mov r8, r8)
 8000d30:	20000008 	.word	0x20000008
 8000d34:	20000000 	.word	0x20000000
 8000d38:	20000004 	.word	0x20000004

08000d3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d40:	4b05      	ldr	r3, [pc, #20]	@ (8000d58 <HAL_IncTick+0x1c>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	001a      	movs	r2, r3
 8000d46:	4b05      	ldr	r3, [pc, #20]	@ (8000d5c <HAL_IncTick+0x20>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	18d2      	adds	r2, r2, r3
 8000d4c:	4b03      	ldr	r3, [pc, #12]	@ (8000d5c <HAL_IncTick+0x20>)
 8000d4e:	601a      	str	r2, [r3, #0]
}
 8000d50:	46c0      	nop			@ (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	46c0      	nop			@ (mov r8, r8)
 8000d58:	20000008 	.word	0x20000008
 8000d5c:	20000178 	.word	0x20000178

08000d60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  return uwTick;
 8000d64:	4b02      	ldr	r3, [pc, #8]	@ (8000d70 <HAL_GetTick+0x10>)
 8000d66:	681b      	ldr	r3, [r3, #0]
}
 8000d68:	0018      	movs	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	46c0      	nop			@ (mov r8, r8)
 8000d70:	20000178 	.word	0x20000178

08000d74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d7c:	f7ff fff0 	bl	8000d60 <HAL_GetTick>
 8000d80:	0003      	movs	r3, r0
 8000d82:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	d005      	beq.n	8000d9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000db8 <HAL_Delay+0x44>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	001a      	movs	r2, r3
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	189b      	adds	r3, r3, r2
 8000d98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d9a:	46c0      	nop			@ (mov r8, r8)
 8000d9c:	f7ff ffe0 	bl	8000d60 <HAL_GetTick>
 8000da0:	0002      	movs	r2, r0
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d8f7      	bhi.n	8000d9c <HAL_Delay+0x28>
  {
  }
}
 8000dac:	46c0      	nop			@ (mov r8, r8)
 8000dae:	46c0      	nop			@ (mov r8, r8)
 8000db0:	46bd      	mov	sp, r7
 8000db2:	b004      	add	sp, #16
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	46c0      	nop			@ (mov r8, r8)
 8000db8:	20000008 	.word	0x20000008

08000dbc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a05      	ldr	r2, [pc, #20]	@ (8000de0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000dcc:	401a      	ands	r2, r3
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	431a      	orrs	r2, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	601a      	str	r2, [r3, #0]
}
 8000dd6:	46c0      	nop			@ (mov r8, r8)
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	b002      	add	sp, #8
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	46c0      	nop			@ (mov r8, r8)
 8000de0:	ff3fffff 	.word	0xff3fffff

08000de4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	23c0      	movs	r3, #192	@ 0xc0
 8000df2:	041b      	lsls	r3, r3, #16
 8000df4:	4013      	ands	r3, r2
}
 8000df6:	0018      	movs	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	b002      	add	sp, #8
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b084      	sub	sp, #16
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	60f8      	str	r0, [r7, #12]
 8000e06:	60b9      	str	r1, [r7, #8]
 8000e08:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	2104      	movs	r1, #4
 8000e12:	400a      	ands	r2, r1
 8000e14:	2107      	movs	r1, #7
 8000e16:	4091      	lsls	r1, r2
 8000e18:	000a      	movs	r2, r1
 8000e1a:	43d2      	mvns	r2, r2
 8000e1c:	401a      	ands	r2, r3
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	2104      	movs	r1, #4
 8000e22:	400b      	ands	r3, r1
 8000e24:	6879      	ldr	r1, [r7, #4]
 8000e26:	4099      	lsls	r1, r3
 8000e28:	000b      	movs	r3, r1
 8000e2a:	431a      	orrs	r2, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000e30:	46c0      	nop			@ (mov r8, r8)
 8000e32:	46bd      	mov	sp, r7
 8000e34:	b004      	add	sp, #16
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	683a      	ldr	r2, [r7, #0]
 8000e48:	2104      	movs	r1, #4
 8000e4a:	400a      	ands	r2, r1
 8000e4c:	2107      	movs	r1, #7
 8000e4e:	4091      	lsls	r1, r2
 8000e50:	000a      	movs	r2, r1
 8000e52:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	2104      	movs	r1, #4
 8000e58:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000e5a:	40da      	lsrs	r2, r3
 8000e5c:	0013      	movs	r3, r2
}
 8000e5e:	0018      	movs	r0, r3
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b002      	add	sp, #8
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b084      	sub	sp, #16
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	60f8      	str	r0, [r7, #12]
 8000e6e:	60b9      	str	r1, [r7, #8]
 8000e70:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e76:	68ba      	ldr	r2, [r7, #8]
 8000e78:	211f      	movs	r1, #31
 8000e7a:	400a      	ands	r2, r1
 8000e7c:	210f      	movs	r1, #15
 8000e7e:	4091      	lsls	r1, r2
 8000e80:	000a      	movs	r2, r1
 8000e82:	43d2      	mvns	r2, r2
 8000e84:	401a      	ands	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	0e9b      	lsrs	r3, r3, #26
 8000e8a:	210f      	movs	r1, #15
 8000e8c:	4019      	ands	r1, r3
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	201f      	movs	r0, #31
 8000e92:	4003      	ands	r3, r0
 8000e94:	4099      	lsls	r1, r3
 8000e96:	000b      	movs	r3, r1
 8000e98:	431a      	orrs	r2, r3
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e9e:	46c0      	nop			@ (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b004      	add	sp, #16
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
 8000eae:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	025b      	lsls	r3, r3, #9
 8000eb8:	0a5b      	lsrs	r3, r3, #9
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ec0:	46c0      	nop			@ (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b002      	add	sp, #8
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ed6:	683a      	ldr	r2, [r7, #0]
 8000ed8:	0252      	lsls	r2, r2, #9
 8000eda:	0a52      	lsrs	r2, r2, #9
 8000edc:	43d2      	mvns	r2, r2
 8000ede:	401a      	ands	r2, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ee4:	46c0      	nop			@ (mov r8, r8)
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	b002      	add	sp, #8
 8000eea:	bd80      	pop	{r7, pc}

08000eec <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	695b      	ldr	r3, [r3, #20]
 8000efc:	68ba      	ldr	r2, [r7, #8]
 8000efe:	0212      	lsls	r2, r2, #8
 8000f00:	43d2      	mvns	r2, r2
 8000f02:	401a      	ands	r2, r3
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	021b      	lsls	r3, r3, #8
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	400b      	ands	r3, r1
 8000f0c:	4904      	ldr	r1, [pc, #16]	@ (8000f20 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000f0e:	400b      	ands	r3, r1
 8000f10:	431a      	orrs	r2, r3
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000f16:	46c0      	nop			@ (mov r8, r8)
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b004      	add	sp, #16
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	46c0      	nop			@ (mov r8, r8)
 8000f20:	7fffff00 	.word	0x7fffff00

08000f24 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	4a05      	ldr	r2, [pc, #20]	@ (8000f48 <LL_ADC_EnableInternalRegulator+0x24>)
 8000f32:	4013      	ands	r3, r2
 8000f34:	2280      	movs	r2, #128	@ 0x80
 8000f36:	0552      	lsls	r2, r2, #21
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f3e:	46c0      	nop			@ (mov r8, r8)
 8000f40:	46bd      	mov	sp, r7
 8000f42:	b002      	add	sp, #8
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	46c0      	nop			@ (mov r8, r8)
 8000f48:	6fffffe8 	.word	0x6fffffe8

08000f4c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	2380      	movs	r3, #128	@ 0x80
 8000f5a:	055b      	lsls	r3, r3, #21
 8000f5c:	401a      	ands	r2, r3
 8000f5e:	2380      	movs	r3, #128	@ 0x80
 8000f60:	055b      	lsls	r3, r3, #21
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d101      	bne.n	8000f6a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000f66:	2301      	movs	r3, #1
 8000f68:	e000      	b.n	8000f6c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	b002      	add	sp, #8
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	2201      	movs	r2, #1
 8000f82:	4013      	ands	r3, r2
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d101      	bne.n	8000f8c <LL_ADC_IsEnabled+0x18>
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e000      	b.n	8000f8e <LL_ADC_IsEnabled+0x1a>
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	0018      	movs	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	b002      	add	sp, #8
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	2204      	movs	r2, #4
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	2b04      	cmp	r3, #4
 8000fa8:	d101      	bne.n	8000fae <LL_ADC_REG_IsConversionOngoing+0x18>
 8000faa:	2301      	movs	r3, #1
 8000fac:	e000      	b.n	8000fb0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b002      	add	sp, #8
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fc0:	231f      	movs	r3, #31
 8000fc2:	18fb      	adds	r3, r7, r3
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e17e      	b.n	80012dc <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10a      	bne.n	8000ffc <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	0018      	movs	r0, r3
 8000fea:	f7ff fc85 	bl	80008f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2254      	movs	r2, #84	@ 0x54
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	0018      	movs	r0, r3
 8001002:	f7ff ffa3 	bl	8000f4c <LL_ADC_IsInternalRegulatorEnabled>
 8001006:	1e03      	subs	r3, r0, #0
 8001008:	d114      	bne.n	8001034 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	0018      	movs	r0, r3
 8001010:	f7ff ff88 	bl	8000f24 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001014:	4bb3      	ldr	r3, [pc, #716]	@ (80012e4 <HAL_ADC_Init+0x32c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	49b3      	ldr	r1, [pc, #716]	@ (80012e8 <HAL_ADC_Init+0x330>)
 800101a:	0018      	movs	r0, r3
 800101c:	f7ff f874 	bl	8000108 <__udivsi3>
 8001020:	0003      	movs	r3, r0
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001026:	e002      	b.n	800102e <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	3b01      	subs	r3, #1
 800102c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1f9      	bne.n	8001028 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	0018      	movs	r0, r3
 800103a:	f7ff ff87 	bl	8000f4c <LL_ADC_IsInternalRegulatorEnabled>
 800103e:	1e03      	subs	r3, r0, #0
 8001040:	d10f      	bne.n	8001062 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001046:	2210      	movs	r2, #16
 8001048:	431a      	orrs	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001052:	2201      	movs	r2, #1
 8001054:	431a      	orrs	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800105a:	231f      	movs	r3, #31
 800105c:	18fb      	adds	r3, r7, r3
 800105e:	2201      	movs	r2, #1
 8001060:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	0018      	movs	r0, r3
 8001068:	f7ff ff95 	bl	8000f96 <LL_ADC_REG_IsConversionOngoing>
 800106c:	0003      	movs	r3, r0
 800106e:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001074:	2210      	movs	r2, #16
 8001076:	4013      	ands	r3, r2
 8001078:	d000      	beq.n	800107c <HAL_ADC_Init+0xc4>
 800107a:	e122      	b.n	80012c2 <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d000      	beq.n	8001084 <HAL_ADC_Init+0xcc>
 8001082:	e11e      	b.n	80012c2 <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001088:	4a98      	ldr	r2, [pc, #608]	@ (80012ec <HAL_ADC_Init+0x334>)
 800108a:	4013      	ands	r3, r2
 800108c:	2202      	movs	r2, #2
 800108e:	431a      	orrs	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	0018      	movs	r0, r3
 800109a:	f7ff ff6b 	bl	8000f74 <LL_ADC_IsEnabled>
 800109e:	1e03      	subs	r3, r0, #0
 80010a0:	d000      	beq.n	80010a4 <HAL_ADC_Init+0xec>
 80010a2:	e0ad      	b.n	8001200 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	7e1b      	ldrb	r3, [r3, #24]
 80010ac:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80010ae:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	7e5b      	ldrb	r3, [r3, #25]
 80010b4:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80010b6:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	7e9b      	ldrb	r3, [r3, #26]
 80010bc:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80010be:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d002      	beq.n	80010ce <HAL_ADC_Init+0x116>
 80010c8:	2380      	movs	r3, #128	@ 0x80
 80010ca:	015b      	lsls	r3, r3, #5
 80010cc:	e000      	b.n	80010d0 <HAL_ADC_Init+0x118>
 80010ce:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80010d0:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80010d6:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	691b      	ldr	r3, [r3, #16]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	da04      	bge.n	80010ea <HAL_ADC_Init+0x132>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	085b      	lsrs	r3, r3, #1
 80010e8:	e001      	b.n	80010ee <HAL_ADC_Init+0x136>
 80010ea:	2380      	movs	r3, #128	@ 0x80
 80010ec:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80010ee:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	212c      	movs	r1, #44	@ 0x2c
 80010f4:	5c5b      	ldrb	r3, [r3, r1]
 80010f6:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80010f8:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2220      	movs	r2, #32
 8001104:	5c9b      	ldrb	r3, [r3, r2]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d115      	bne.n	8001136 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	7e9b      	ldrb	r3, [r3, #26]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d105      	bne.n	800111e <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	2280      	movs	r2, #128	@ 0x80
 8001116:	0252      	lsls	r2, r2, #9
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
 800111c:	e00b      	b.n	8001136 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001122:	2220      	movs	r2, #32
 8001124:	431a      	orrs	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800112e:	2201      	movs	r2, #1
 8001130:	431a      	orrs	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800113a:	2b00      	cmp	r3, #0
 800113c:	d00a      	beq.n	8001154 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001142:	23e0      	movs	r3, #224	@ 0xe0
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800114c:	4313      	orrs	r3, r2
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	4a65      	ldr	r2, [pc, #404]	@ (80012f0 <HAL_ADC_Init+0x338>)
 800115c:	4013      	ands	r3, r2
 800115e:	0019      	movs	r1, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	430a      	orrs	r2, r1
 8001168:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	0f9b      	lsrs	r3, r3, #30
 8001170:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001176:	4313      	orrs	r3, r2
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	4313      	orrs	r3, r2
 800117c:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	223c      	movs	r2, #60	@ 0x3c
 8001182:	5c9b      	ldrb	r3, [r3, r2]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d111      	bne.n	80011ac <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	0f9b      	lsrs	r3, r3, #30
 800118e:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001194:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 800119a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80011a0:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	2201      	movs	r2, #1
 80011a8:	4313      	orrs	r3, r2
 80011aa:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	4a50      	ldr	r2, [pc, #320]	@ (80012f4 <HAL_ADC_Init+0x33c>)
 80011b4:	4013      	ands	r3, r2
 80011b6:	0019      	movs	r1, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	697a      	ldr	r2, [r7, #20]
 80011be:	430a      	orrs	r2, r1
 80011c0:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	23c0      	movs	r3, #192	@ 0xc0
 80011c8:	061b      	lsls	r3, r3, #24
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d018      	beq.n	8001200 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80011d2:	2380      	movs	r3, #128	@ 0x80
 80011d4:	05db      	lsls	r3, r3, #23
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d012      	beq.n	8001200 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80011de:	2380      	movs	r3, #128	@ 0x80
 80011e0:	061b      	lsls	r3, r3, #24
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d00c      	beq.n	8001200 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80011e6:	4b44      	ldr	r3, [pc, #272]	@ (80012f8 <HAL_ADC_Init+0x340>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a44      	ldr	r2, [pc, #272]	@ (80012fc <HAL_ADC_Init+0x344>)
 80011ec:	4013      	ands	r3, r2
 80011ee:	0019      	movs	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	23f0      	movs	r3, #240	@ 0xf0
 80011f6:	039b      	lsls	r3, r3, #14
 80011f8:	401a      	ands	r2, r3
 80011fa:	4b3f      	ldr	r3, [pc, #252]	@ (80012f8 <HAL_ADC_Init+0x340>)
 80011fc:	430a      	orrs	r2, r1
 80011fe:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6818      	ldr	r0, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001208:	001a      	movs	r2, r3
 800120a:	2100      	movs	r1, #0
 800120c:	f7ff fdf7 	bl	8000dfe <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6818      	ldr	r0, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001218:	4939      	ldr	r1, [pc, #228]	@ (8001300 <HAL_ADC_Init+0x348>)
 800121a:	001a      	movs	r2, r3
 800121c:	f7ff fdef 	bl	8000dfe <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	691b      	ldr	r3, [r3, #16]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d109      	bne.n	800123c <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2110      	movs	r1, #16
 8001234:	4249      	negs	r1, r1
 8001236:	430a      	orrs	r2, r1
 8001238:	629a      	str	r2, [r3, #40]	@ 0x28
 800123a:	e018      	b.n	800126e <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	691a      	ldr	r2, [r3, #16]
 8001240:	2380      	movs	r3, #128	@ 0x80
 8001242:	039b      	lsls	r3, r3, #14
 8001244:	429a      	cmp	r2, r3
 8001246:	d112      	bne.n	800126e <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	3b01      	subs	r3, #1
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	221c      	movs	r2, #28
 8001258:	4013      	ands	r3, r2
 800125a:	2210      	movs	r2, #16
 800125c:	4252      	negs	r2, r2
 800125e:	409a      	lsls	r2, r3
 8001260:	0011      	movs	r1, r2
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	430a      	orrs	r2, r1
 800126c:	629a      	str	r2, [r3, #40]	@ 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2100      	movs	r1, #0
 8001274:	0018      	movs	r0, r3
 8001276:	f7ff fddf 	bl	8000e38 <LL_ADC_GetSamplingTimeCommonChannels>
 800127a:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001280:	429a      	cmp	r2, r3
 8001282:	d10b      	bne.n	800129c <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800128e:	2203      	movs	r2, #3
 8001290:	4393      	bics	r3, r2
 8001292:	2201      	movs	r2, #1
 8001294:	431a      	orrs	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800129a:	e01c      	b.n	80012d6 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a0:	2212      	movs	r2, #18
 80012a2:	4393      	bics	r3, r2
 80012a4:	2210      	movs	r2, #16
 80012a6:	431a      	orrs	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012b0:	2201      	movs	r2, #1
 80012b2:	431a      	orrs	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80012b8:	231f      	movs	r3, #31
 80012ba:	18fb      	adds	r3, r7, r3
 80012bc:	2201      	movs	r2, #1
 80012be:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80012c0:	e009      	b.n	80012d6 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c6:	2210      	movs	r2, #16
 80012c8:	431a      	orrs	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80012ce:	231f      	movs	r3, #31
 80012d0:	18fb      	adds	r3, r7, r3
 80012d2:	2201      	movs	r2, #1
 80012d4:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80012d6:	231f      	movs	r3, #31
 80012d8:	18fb      	adds	r3, r7, r3
 80012da:	781b      	ldrb	r3, [r3, #0]
}
 80012dc:	0018      	movs	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	b008      	add	sp, #32
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000000 	.word	0x20000000
 80012e8:	00030d40 	.word	0x00030d40
 80012ec:	fffffefd 	.word	0xfffffefd
 80012f0:	ffde0201 	.word	0xffde0201
 80012f4:	1ffffc02 	.word	0x1ffffc02
 80012f8:	40012708 	.word	0x40012708
 80012fc:	ffc3ffff 	.word	0xffc3ffff
 8001300:	7fffff04 	.word	0x7fffff04

08001304 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800130e:	2317      	movs	r3, #23
 8001310:	18fb      	adds	r3, r7, r3
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2254      	movs	r2, #84	@ 0x54
 800131e:	5c9b      	ldrb	r3, [r3, r2]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d101      	bne.n	8001328 <HAL_ADC_ConfigChannel+0x24>
 8001324:	2302      	movs	r3, #2
 8001326:	e1be      	b.n	80016a6 <HAL_ADC_ConfigChannel+0x3a2>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2254      	movs	r2, #84	@ 0x54
 800132c:	2101      	movs	r1, #1
 800132e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	0018      	movs	r0, r3
 8001336:	f7ff fe2e 	bl	8000f96 <LL_ADC_REG_IsConversionOngoing>
 800133a:	1e03      	subs	r3, r0, #0
 800133c:	d000      	beq.n	8001340 <HAL_ADC_ConfigChannel+0x3c>
 800133e:	e1a1      	b.n	8001684 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b02      	cmp	r3, #2
 8001346:	d100      	bne.n	800134a <HAL_ADC_ConfigChannel+0x46>
 8001348:	e152      	b.n	80015f0 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	691a      	ldr	r2, [r3, #16]
 800134e:	2380      	movs	r3, #128	@ 0x80
 8001350:	061b      	lsls	r3, r3, #24
 8001352:	429a      	cmp	r2, r3
 8001354:	d004      	beq.n	8001360 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800135a:	4ac2      	ldr	r2, [pc, #776]	@ (8001664 <HAL_ADC_ConfigChannel+0x360>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d108      	bne.n	8001372 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	0019      	movs	r1, r3
 800136a:	0010      	movs	r0, r2
 800136c:	f7ff fd9b 	bl	8000ea6 <LL_ADC_REG_SetSequencerChAdd>
 8001370:	e0ed      	b.n	800154e <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	211f      	movs	r1, #31
 800137c:	400b      	ands	r3, r1
 800137e:	210f      	movs	r1, #15
 8001380:	4099      	lsls	r1, r3
 8001382:	000b      	movs	r3, r1
 8001384:	43db      	mvns	r3, r3
 8001386:	4013      	ands	r3, r2
 8001388:	0019      	movs	r1, r3
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	025b      	lsls	r3, r3, #9
 8001390:	0a5b      	lsrs	r3, r3, #9
 8001392:	d105      	bne.n	80013a0 <HAL_ADC_ConfigChannel+0x9c>
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	0e9b      	lsrs	r3, r3, #26
 800139a:	221f      	movs	r2, #31
 800139c:	4013      	ands	r3, r2
 800139e:	e0bc      	b.n	800151a <HAL_ADC_ConfigChannel+0x216>
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2201      	movs	r2, #1
 80013a6:	4013      	ands	r3, r2
 80013a8:	d000      	beq.n	80013ac <HAL_ADC_ConfigChannel+0xa8>
 80013aa:	e0b5      	b.n	8001518 <HAL_ADC_ConfigChannel+0x214>
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2202      	movs	r2, #2
 80013b2:	4013      	ands	r3, r2
 80013b4:	d000      	beq.n	80013b8 <HAL_ADC_ConfigChannel+0xb4>
 80013b6:	e0ad      	b.n	8001514 <HAL_ADC_ConfigChannel+0x210>
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2204      	movs	r2, #4
 80013be:	4013      	ands	r3, r2
 80013c0:	d000      	beq.n	80013c4 <HAL_ADC_ConfigChannel+0xc0>
 80013c2:	e0a5      	b.n	8001510 <HAL_ADC_ConfigChannel+0x20c>
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2208      	movs	r2, #8
 80013ca:	4013      	ands	r3, r2
 80013cc:	d000      	beq.n	80013d0 <HAL_ADC_ConfigChannel+0xcc>
 80013ce:	e09d      	b.n	800150c <HAL_ADC_ConfigChannel+0x208>
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2210      	movs	r2, #16
 80013d6:	4013      	ands	r3, r2
 80013d8:	d000      	beq.n	80013dc <HAL_ADC_ConfigChannel+0xd8>
 80013da:	e095      	b.n	8001508 <HAL_ADC_ConfigChannel+0x204>
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2220      	movs	r2, #32
 80013e2:	4013      	ands	r3, r2
 80013e4:	d000      	beq.n	80013e8 <HAL_ADC_ConfigChannel+0xe4>
 80013e6:	e08d      	b.n	8001504 <HAL_ADC_ConfigChannel+0x200>
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2240      	movs	r2, #64	@ 0x40
 80013ee:	4013      	ands	r3, r2
 80013f0:	d000      	beq.n	80013f4 <HAL_ADC_ConfigChannel+0xf0>
 80013f2:	e085      	b.n	8001500 <HAL_ADC_ConfigChannel+0x1fc>
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2280      	movs	r2, #128	@ 0x80
 80013fa:	4013      	ands	r3, r2
 80013fc:	d000      	beq.n	8001400 <HAL_ADC_ConfigChannel+0xfc>
 80013fe:	e07d      	b.n	80014fc <HAL_ADC_ConfigChannel+0x1f8>
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	2380      	movs	r3, #128	@ 0x80
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	4013      	ands	r3, r2
 800140a:	d000      	beq.n	800140e <HAL_ADC_ConfigChannel+0x10a>
 800140c:	e074      	b.n	80014f8 <HAL_ADC_ConfigChannel+0x1f4>
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	2380      	movs	r3, #128	@ 0x80
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4013      	ands	r3, r2
 8001418:	d000      	beq.n	800141c <HAL_ADC_ConfigChannel+0x118>
 800141a:	e06b      	b.n	80014f4 <HAL_ADC_ConfigChannel+0x1f0>
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	2380      	movs	r3, #128	@ 0x80
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	4013      	ands	r3, r2
 8001426:	d000      	beq.n	800142a <HAL_ADC_ConfigChannel+0x126>
 8001428:	e062      	b.n	80014f0 <HAL_ADC_ConfigChannel+0x1ec>
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	2380      	movs	r3, #128	@ 0x80
 8001430:	011b      	lsls	r3, r3, #4
 8001432:	4013      	ands	r3, r2
 8001434:	d000      	beq.n	8001438 <HAL_ADC_ConfigChannel+0x134>
 8001436:	e059      	b.n	80014ec <HAL_ADC_ConfigChannel+0x1e8>
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	2380      	movs	r3, #128	@ 0x80
 800143e:	015b      	lsls	r3, r3, #5
 8001440:	4013      	ands	r3, r2
 8001442:	d151      	bne.n	80014e8 <HAL_ADC_ConfigChannel+0x1e4>
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2380      	movs	r3, #128	@ 0x80
 800144a:	019b      	lsls	r3, r3, #6
 800144c:	4013      	ands	r3, r2
 800144e:	d149      	bne.n	80014e4 <HAL_ADC_ConfigChannel+0x1e0>
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	2380      	movs	r3, #128	@ 0x80
 8001456:	01db      	lsls	r3, r3, #7
 8001458:	4013      	ands	r3, r2
 800145a:	d141      	bne.n	80014e0 <HAL_ADC_ConfigChannel+0x1dc>
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	2380      	movs	r3, #128	@ 0x80
 8001462:	021b      	lsls	r3, r3, #8
 8001464:	4013      	ands	r3, r2
 8001466:	d139      	bne.n	80014dc <HAL_ADC_ConfigChannel+0x1d8>
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	2380      	movs	r3, #128	@ 0x80
 800146e:	025b      	lsls	r3, r3, #9
 8001470:	4013      	ands	r3, r2
 8001472:	d131      	bne.n	80014d8 <HAL_ADC_ConfigChannel+0x1d4>
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	2380      	movs	r3, #128	@ 0x80
 800147a:	029b      	lsls	r3, r3, #10
 800147c:	4013      	ands	r3, r2
 800147e:	d129      	bne.n	80014d4 <HAL_ADC_ConfigChannel+0x1d0>
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	2380      	movs	r3, #128	@ 0x80
 8001486:	02db      	lsls	r3, r3, #11
 8001488:	4013      	ands	r3, r2
 800148a:	d121      	bne.n	80014d0 <HAL_ADC_ConfigChannel+0x1cc>
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	2380      	movs	r3, #128	@ 0x80
 8001492:	031b      	lsls	r3, r3, #12
 8001494:	4013      	ands	r3, r2
 8001496:	d119      	bne.n	80014cc <HAL_ADC_ConfigChannel+0x1c8>
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	2380      	movs	r3, #128	@ 0x80
 800149e:	035b      	lsls	r3, r3, #13
 80014a0:	4013      	ands	r3, r2
 80014a2:	d111      	bne.n	80014c8 <HAL_ADC_ConfigChannel+0x1c4>
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	2380      	movs	r3, #128	@ 0x80
 80014aa:	039b      	lsls	r3, r3, #14
 80014ac:	4013      	ands	r3, r2
 80014ae:	d109      	bne.n	80014c4 <HAL_ADC_ConfigChannel+0x1c0>
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	2380      	movs	r3, #128	@ 0x80
 80014b6:	03db      	lsls	r3, r3, #15
 80014b8:	4013      	ands	r3, r2
 80014ba:	d001      	beq.n	80014c0 <HAL_ADC_ConfigChannel+0x1bc>
 80014bc:	2316      	movs	r3, #22
 80014be:	e02c      	b.n	800151a <HAL_ADC_ConfigChannel+0x216>
 80014c0:	2300      	movs	r3, #0
 80014c2:	e02a      	b.n	800151a <HAL_ADC_ConfigChannel+0x216>
 80014c4:	2315      	movs	r3, #21
 80014c6:	e028      	b.n	800151a <HAL_ADC_ConfigChannel+0x216>
 80014c8:	2314      	movs	r3, #20
 80014ca:	e026      	b.n	800151a <HAL_ADC_ConfigChannel+0x216>
 80014cc:	2313      	movs	r3, #19
 80014ce:	e024      	b.n	800151a <HAL_ADC_ConfigChannel+0x216>
 80014d0:	2312      	movs	r3, #18
 80014d2:	e022      	b.n	800151a <HAL_ADC_ConfigChannel+0x216>
 80014d4:	2311      	movs	r3, #17
 80014d6:	e020      	b.n	800151a <HAL_ADC_ConfigChannel+0x216>
 80014d8:	2310      	movs	r3, #16
 80014da:	e01e      	b.n	800151a <HAL_ADC_ConfigChannel+0x216>
 80014dc:	230f      	movs	r3, #15
 80014de:	e01c      	b.n	800151a <HAL_ADC_ConfigChannel+0x216>
 80014e0:	230e      	movs	r3, #14
 80014e2:	e01a      	b.n	800151a <HAL_ADC_ConfigChannel+0x216>
 80014e4:	230d      	movs	r3, #13
 80014e6:	e018      	b.n	800151a <HAL_ADC_ConfigChannel+0x216>
 80014e8:	230c      	movs	r3, #12
 80014ea:	e016      	b.n	800151a <HAL_ADC_ConfigChannel+0x216>
 80014ec:	230b      	movs	r3, #11
 80014ee:	e014      	b.n	800151a <HAL_ADC_ConfigChannel+0x216>
 80014f0:	230a      	movs	r3, #10
 80014f2:	e012      	b.n	800151a <HAL_ADC_ConfigChannel+0x216>
 80014f4:	2309      	movs	r3, #9
 80014f6:	e010      	b.n	800151a <HAL_ADC_ConfigChannel+0x216>
 80014f8:	2308      	movs	r3, #8
 80014fa:	e00e      	b.n	800151a <HAL_ADC_ConfigChannel+0x216>
 80014fc:	2307      	movs	r3, #7
 80014fe:	e00c      	b.n	800151a <HAL_ADC_ConfigChannel+0x216>
 8001500:	2306      	movs	r3, #6
 8001502:	e00a      	b.n	800151a <HAL_ADC_ConfigChannel+0x216>
 8001504:	2305      	movs	r3, #5
 8001506:	e008      	b.n	800151a <HAL_ADC_ConfigChannel+0x216>
 8001508:	2304      	movs	r3, #4
 800150a:	e006      	b.n	800151a <HAL_ADC_ConfigChannel+0x216>
 800150c:	2303      	movs	r3, #3
 800150e:	e004      	b.n	800151a <HAL_ADC_ConfigChannel+0x216>
 8001510:	2302      	movs	r3, #2
 8001512:	e002      	b.n	800151a <HAL_ADC_ConfigChannel+0x216>
 8001514:	2301      	movs	r3, #1
 8001516:	e000      	b.n	800151a <HAL_ADC_ConfigChannel+0x216>
 8001518:	2300      	movs	r3, #0
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	6852      	ldr	r2, [r2, #4]
 800151e:	201f      	movs	r0, #31
 8001520:	4002      	ands	r2, r0
 8001522:	4093      	lsls	r3, r2
 8001524:	000a      	movs	r2, r1
 8001526:	431a      	orrs	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	089b      	lsrs	r3, r3, #2
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69db      	ldr	r3, [r3, #28]
 8001538:	429a      	cmp	r2, r3
 800153a:	d808      	bhi.n	800154e <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6818      	ldr	r0, [r3, #0]
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	6859      	ldr	r1, [r3, #4]
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	001a      	movs	r2, r3
 800154a:	f7ff fc8c 	bl	8000e66 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6818      	ldr	r0, [r3, #0]
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	6819      	ldr	r1, [r3, #0]
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	001a      	movs	r2, r3
 800155c:	f7ff fcc6 	bl	8000eec <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	db00      	blt.n	800156a <HAL_ADC_ConfigChannel+0x266>
 8001568:	e096      	b.n	8001698 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800156a:	4b3f      	ldr	r3, [pc, #252]	@ (8001668 <HAL_ADC_ConfigChannel+0x364>)
 800156c:	0018      	movs	r0, r3
 800156e:	f7ff fc39 	bl	8000de4 <LL_ADC_GetCommonPathInternalCh>
 8001572:	0003      	movs	r3, r0
 8001574:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a3c      	ldr	r2, [pc, #240]	@ (800166c <HAL_ADC_ConfigChannel+0x368>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d123      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	2380      	movs	r3, #128	@ 0x80
 8001584:	041b      	lsls	r3, r3, #16
 8001586:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001588:	d11e      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	2280      	movs	r2, #128	@ 0x80
 800158e:	0412      	lsls	r2, r2, #16
 8001590:	4313      	orrs	r3, r2
 8001592:	4a35      	ldr	r2, [pc, #212]	@ (8001668 <HAL_ADC_ConfigChannel+0x364>)
 8001594:	0019      	movs	r1, r3
 8001596:	0010      	movs	r0, r2
 8001598:	f7ff fc10 	bl	8000dbc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 800159c:	4b34      	ldr	r3, [pc, #208]	@ (8001670 <HAL_ADC_ConfigChannel+0x36c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4934      	ldr	r1, [pc, #208]	@ (8001674 <HAL_ADC_ConfigChannel+0x370>)
 80015a2:	0018      	movs	r0, r3
 80015a4:	f7fe fdb0 	bl	8000108 <__udivsi3>
 80015a8:	0003      	movs	r3, r0
 80015aa:	001a      	movs	r2, r3
 80015ac:	0013      	movs	r3, r2
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	189b      	adds	r3, r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	3301      	adds	r3, #1
 80015b6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80015b8:	e002      	b.n	80015c0 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	3b01      	subs	r3, #1
 80015be:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f9      	bne.n	80015ba <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80015c6:	e067      	b.n	8001698 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a2a      	ldr	r2, [pc, #168]	@ (8001678 <HAL_ADC_ConfigChannel+0x374>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d162      	bne.n	8001698 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	2380      	movs	r3, #128	@ 0x80
 80015d6:	03db      	lsls	r3, r3, #15
 80015d8:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80015da:	d15d      	bne.n	8001698 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	2280      	movs	r2, #128	@ 0x80
 80015e0:	03d2      	lsls	r2, r2, #15
 80015e2:	4313      	orrs	r3, r2
 80015e4:	4a20      	ldr	r2, [pc, #128]	@ (8001668 <HAL_ADC_ConfigChannel+0x364>)
 80015e6:	0019      	movs	r1, r3
 80015e8:	0010      	movs	r0, r2
 80015ea:	f7ff fbe7 	bl	8000dbc <LL_ADC_SetCommonPathInternalCh>
 80015ee:	e053      	b.n	8001698 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	691a      	ldr	r2, [r3, #16]
 80015f4:	2380      	movs	r3, #128	@ 0x80
 80015f6:	061b      	lsls	r3, r3, #24
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d004      	beq.n	8001606 <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001600:	4a18      	ldr	r2, [pc, #96]	@ (8001664 <HAL_ADC_ConfigChannel+0x360>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d107      	bne.n	8001616 <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	0019      	movs	r1, r3
 8001610:	0010      	movs	r0, r2
 8001612:	f7ff fc59 	bl	8000ec8 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	da3c      	bge.n	8001698 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800161e:	4b12      	ldr	r3, [pc, #72]	@ (8001668 <HAL_ADC_ConfigChannel+0x364>)
 8001620:	0018      	movs	r0, r3
 8001622:	f7ff fbdf 	bl	8000de4 <LL_ADC_GetCommonPathInternalCh>
 8001626:	0003      	movs	r3, r0
 8001628:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a0f      	ldr	r2, [pc, #60]	@ (800166c <HAL_ADC_ConfigChannel+0x368>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d108      	bne.n	8001646 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	4a11      	ldr	r2, [pc, #68]	@ (800167c <HAL_ADC_ConfigChannel+0x378>)
 8001638:	4013      	ands	r3, r2
 800163a:	4a0b      	ldr	r2, [pc, #44]	@ (8001668 <HAL_ADC_ConfigChannel+0x364>)
 800163c:	0019      	movs	r1, r3
 800163e:	0010      	movs	r0, r2
 8001640:	f7ff fbbc 	bl	8000dbc <LL_ADC_SetCommonPathInternalCh>
 8001644:	e028      	b.n	8001698 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a0b      	ldr	r2, [pc, #44]	@ (8001678 <HAL_ADC_ConfigChannel+0x374>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d123      	bne.n	8001698 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	4a0b      	ldr	r2, [pc, #44]	@ (8001680 <HAL_ADC_ConfigChannel+0x37c>)
 8001654:	4013      	ands	r3, r2
 8001656:	4a04      	ldr	r2, [pc, #16]	@ (8001668 <HAL_ADC_ConfigChannel+0x364>)
 8001658:	0019      	movs	r1, r3
 800165a:	0010      	movs	r0, r2
 800165c:	f7ff fbae 	bl	8000dbc <LL_ADC_SetCommonPathInternalCh>
 8001660:	e01a      	b.n	8001698 <HAL_ADC_ConfigChannel+0x394>
 8001662:	46c0      	nop			@ (mov r8, r8)
 8001664:	80000004 	.word	0x80000004
 8001668:	40012708 	.word	0x40012708
 800166c:	a4000200 	.word	0xa4000200
 8001670:	20000000 	.word	0x20000000
 8001674:	00030d40 	.word	0x00030d40
 8001678:	a8000400 	.word	0xa8000400
 800167c:	ff7fffff 	.word	0xff7fffff
 8001680:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001688:	2220      	movs	r2, #32
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001690:	2317      	movs	r3, #23
 8001692:	18fb      	adds	r3, r7, r3
 8001694:	2201      	movs	r2, #1
 8001696:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2254      	movs	r2, #84	@ 0x54
 800169c:	2100      	movs	r1, #0
 800169e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80016a0:	2317      	movs	r3, #23
 80016a2:	18fb      	adds	r3, r7, r3
 80016a4:	781b      	ldrb	r3, [r3, #0]
}
 80016a6:	0018      	movs	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	b006      	add	sp, #24
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	46c0      	nop			@ (mov r8, r8)

080016b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	0002      	movs	r2, r0
 80016b8:	1dfb      	adds	r3, r7, #7
 80016ba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016bc:	1dfb      	adds	r3, r7, #7
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80016c2:	d809      	bhi.n	80016d8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016c4:	1dfb      	adds	r3, r7, #7
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	001a      	movs	r2, r3
 80016ca:	231f      	movs	r3, #31
 80016cc:	401a      	ands	r2, r3
 80016ce:	4b04      	ldr	r3, [pc, #16]	@ (80016e0 <__NVIC_EnableIRQ+0x30>)
 80016d0:	2101      	movs	r1, #1
 80016d2:	4091      	lsls	r1, r2
 80016d4:	000a      	movs	r2, r1
 80016d6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80016d8:	46c0      	nop			@ (mov r8, r8)
 80016da:	46bd      	mov	sp, r7
 80016dc:	b002      	add	sp, #8
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	e000e100 	.word	0xe000e100

080016e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e4:	b590      	push	{r4, r7, lr}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	0002      	movs	r2, r0
 80016ec:	6039      	str	r1, [r7, #0]
 80016ee:	1dfb      	adds	r3, r7, #7
 80016f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016f2:	1dfb      	adds	r3, r7, #7
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80016f8:	d828      	bhi.n	800174c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016fa:	4a2f      	ldr	r2, [pc, #188]	@ (80017b8 <__NVIC_SetPriority+0xd4>)
 80016fc:	1dfb      	adds	r3, r7, #7
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	b25b      	sxtb	r3, r3
 8001702:	089b      	lsrs	r3, r3, #2
 8001704:	33c0      	adds	r3, #192	@ 0xc0
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	589b      	ldr	r3, [r3, r2]
 800170a:	1dfa      	adds	r2, r7, #7
 800170c:	7812      	ldrb	r2, [r2, #0]
 800170e:	0011      	movs	r1, r2
 8001710:	2203      	movs	r2, #3
 8001712:	400a      	ands	r2, r1
 8001714:	00d2      	lsls	r2, r2, #3
 8001716:	21ff      	movs	r1, #255	@ 0xff
 8001718:	4091      	lsls	r1, r2
 800171a:	000a      	movs	r2, r1
 800171c:	43d2      	mvns	r2, r2
 800171e:	401a      	ands	r2, r3
 8001720:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	019b      	lsls	r3, r3, #6
 8001726:	22ff      	movs	r2, #255	@ 0xff
 8001728:	401a      	ands	r2, r3
 800172a:	1dfb      	adds	r3, r7, #7
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	0018      	movs	r0, r3
 8001730:	2303      	movs	r3, #3
 8001732:	4003      	ands	r3, r0
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001738:	481f      	ldr	r0, [pc, #124]	@ (80017b8 <__NVIC_SetPriority+0xd4>)
 800173a:	1dfb      	adds	r3, r7, #7
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	b25b      	sxtb	r3, r3
 8001740:	089b      	lsrs	r3, r3, #2
 8001742:	430a      	orrs	r2, r1
 8001744:	33c0      	adds	r3, #192	@ 0xc0
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800174a:	e031      	b.n	80017b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800174c:	4a1b      	ldr	r2, [pc, #108]	@ (80017bc <__NVIC_SetPriority+0xd8>)
 800174e:	1dfb      	adds	r3, r7, #7
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	0019      	movs	r1, r3
 8001754:	230f      	movs	r3, #15
 8001756:	400b      	ands	r3, r1
 8001758:	3b08      	subs	r3, #8
 800175a:	089b      	lsrs	r3, r3, #2
 800175c:	3306      	adds	r3, #6
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	18d3      	adds	r3, r2, r3
 8001762:	3304      	adds	r3, #4
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	1dfa      	adds	r2, r7, #7
 8001768:	7812      	ldrb	r2, [r2, #0]
 800176a:	0011      	movs	r1, r2
 800176c:	2203      	movs	r2, #3
 800176e:	400a      	ands	r2, r1
 8001770:	00d2      	lsls	r2, r2, #3
 8001772:	21ff      	movs	r1, #255	@ 0xff
 8001774:	4091      	lsls	r1, r2
 8001776:	000a      	movs	r2, r1
 8001778:	43d2      	mvns	r2, r2
 800177a:	401a      	ands	r2, r3
 800177c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	019b      	lsls	r3, r3, #6
 8001782:	22ff      	movs	r2, #255	@ 0xff
 8001784:	401a      	ands	r2, r3
 8001786:	1dfb      	adds	r3, r7, #7
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	0018      	movs	r0, r3
 800178c:	2303      	movs	r3, #3
 800178e:	4003      	ands	r3, r0
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001794:	4809      	ldr	r0, [pc, #36]	@ (80017bc <__NVIC_SetPriority+0xd8>)
 8001796:	1dfb      	adds	r3, r7, #7
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	001c      	movs	r4, r3
 800179c:	230f      	movs	r3, #15
 800179e:	4023      	ands	r3, r4
 80017a0:	3b08      	subs	r3, #8
 80017a2:	089b      	lsrs	r3, r3, #2
 80017a4:	430a      	orrs	r2, r1
 80017a6:	3306      	adds	r3, #6
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	18c3      	adds	r3, r0, r3
 80017ac:	3304      	adds	r3, #4
 80017ae:	601a      	str	r2, [r3, #0]
}
 80017b0:	46c0      	nop			@ (mov r8, r8)
 80017b2:	46bd      	mov	sp, r7
 80017b4:	b003      	add	sp, #12
 80017b6:	bd90      	pop	{r4, r7, pc}
 80017b8:	e000e100 	.word	0xe000e100
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	1e5a      	subs	r2, r3, #1
 80017cc:	2380      	movs	r3, #128	@ 0x80
 80017ce:	045b      	lsls	r3, r3, #17
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d301      	bcc.n	80017d8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017d4:	2301      	movs	r3, #1
 80017d6:	e010      	b.n	80017fa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001804 <SysTick_Config+0x44>)
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	3a01      	subs	r2, #1
 80017de:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017e0:	2301      	movs	r3, #1
 80017e2:	425b      	negs	r3, r3
 80017e4:	2103      	movs	r1, #3
 80017e6:	0018      	movs	r0, r3
 80017e8:	f7ff ff7c 	bl	80016e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ec:	4b05      	ldr	r3, [pc, #20]	@ (8001804 <SysTick_Config+0x44>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f2:	4b04      	ldr	r3, [pc, #16]	@ (8001804 <SysTick_Config+0x44>)
 80017f4:	2207      	movs	r2, #7
 80017f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	0018      	movs	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	b002      	add	sp, #8
 8001800:	bd80      	pop	{r7, pc}
 8001802:	46c0      	nop			@ (mov r8, r8)
 8001804:	e000e010 	.word	0xe000e010

08001808 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	60b9      	str	r1, [r7, #8]
 8001810:	607a      	str	r2, [r7, #4]
 8001812:	210f      	movs	r1, #15
 8001814:	187b      	adds	r3, r7, r1
 8001816:	1c02      	adds	r2, r0, #0
 8001818:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	187b      	adds	r3, r7, r1
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	b25b      	sxtb	r3, r3
 8001822:	0011      	movs	r1, r2
 8001824:	0018      	movs	r0, r3
 8001826:	f7ff ff5d 	bl	80016e4 <__NVIC_SetPriority>
}
 800182a:	46c0      	nop			@ (mov r8, r8)
 800182c:	46bd      	mov	sp, r7
 800182e:	b004      	add	sp, #16
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	0002      	movs	r2, r0
 800183a:	1dfb      	adds	r3, r7, #7
 800183c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800183e:	1dfb      	adds	r3, r7, #7
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	b25b      	sxtb	r3, r3
 8001844:	0018      	movs	r0, r3
 8001846:	f7ff ff33 	bl	80016b0 <__NVIC_EnableIRQ>
}
 800184a:	46c0      	nop			@ (mov r8, r8)
 800184c:	46bd      	mov	sp, r7
 800184e:	b002      	add	sp, #8
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	0018      	movs	r0, r3
 800185e:	f7ff ffaf 	bl	80017c0 <SysTick_Config>
 8001862:	0003      	movs	r3, r0
}
 8001864:	0018      	movs	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	b002      	add	sp, #8
 800186a:	bd80      	pop	{r7, pc}

0800186c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001876:	2300      	movs	r3, #0
 8001878:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800187a:	e14d      	b.n	8001b18 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2101      	movs	r1, #1
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4091      	lsls	r1, r2
 8001886:	000a      	movs	r2, r1
 8001888:	4013      	ands	r3, r2
 800188a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d100      	bne.n	8001894 <HAL_GPIO_Init+0x28>
 8001892:	e13e      	b.n	8001b12 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b02      	cmp	r3, #2
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0x38>
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b12      	cmp	r3, #18
 80018a2:	d125      	bne.n	80018f0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	08da      	lsrs	r2, r3, #3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3208      	adds	r2, #8
 80018ac:	0092      	lsls	r2, r2, #2
 80018ae:	58d3      	ldr	r3, [r2, r3]
 80018b0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	2207      	movs	r2, #7
 80018b6:	4013      	ands	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	220f      	movs	r2, #15
 80018bc:	409a      	lsls	r2, r3
 80018be:	0013      	movs	r3, r2
 80018c0:	43da      	mvns	r2, r3
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	4013      	ands	r3, r2
 80018c6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	220f      	movs	r2, #15
 80018ce:	401a      	ands	r2, r3
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	2107      	movs	r1, #7
 80018d4:	400b      	ands	r3, r1
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	409a      	lsls	r2, r3
 80018da:	0013      	movs	r3, r2
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	4313      	orrs	r3, r2
 80018e0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	08da      	lsrs	r2, r3, #3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3208      	adds	r2, #8
 80018ea:	0092      	lsls	r2, r2, #2
 80018ec:	6979      	ldr	r1, [r7, #20]
 80018ee:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	2203      	movs	r2, #3
 80018fc:	409a      	lsls	r2, r3
 80018fe:	0013      	movs	r3, r2
 8001900:	43da      	mvns	r2, r3
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	4013      	ands	r3, r2
 8001906:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2203      	movs	r2, #3
 800190e:	401a      	ands	r2, r3
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	409a      	lsls	r2, r3
 8001916:	0013      	movs	r3, r2
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	4313      	orrs	r3, r2
 800191c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d00b      	beq.n	8001944 <HAL_GPIO_Init+0xd8>
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b02      	cmp	r3, #2
 8001932:	d007      	beq.n	8001944 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001938:	2b11      	cmp	r3, #17
 800193a:	d003      	beq.n	8001944 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2b12      	cmp	r3, #18
 8001942:	d130      	bne.n	80019a6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	2203      	movs	r2, #3
 8001950:	409a      	lsls	r2, r3
 8001952:	0013      	movs	r3, r2
 8001954:	43da      	mvns	r2, r3
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	4013      	ands	r3, r2
 800195a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	68da      	ldr	r2, [r3, #12]
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	409a      	lsls	r2, r3
 8001966:	0013      	movs	r3, r2
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	4313      	orrs	r3, r2
 800196c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800197a:	2201      	movs	r2, #1
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	409a      	lsls	r2, r3
 8001980:	0013      	movs	r3, r2
 8001982:	43da      	mvns	r2, r3
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	4013      	ands	r3, r2
 8001988:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	091b      	lsrs	r3, r3, #4
 8001990:	2201      	movs	r2, #1
 8001992:	401a      	ands	r2, r3
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	409a      	lsls	r2, r3
 8001998:	0013      	movs	r3, r2
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	4313      	orrs	r3, r2
 800199e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b03      	cmp	r3, #3
 80019ac:	d017      	beq.n	80019de <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	2203      	movs	r2, #3
 80019ba:	409a      	lsls	r2, r3
 80019bc:	0013      	movs	r3, r2
 80019be:	43da      	mvns	r2, r3
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	4013      	ands	r3, r2
 80019c4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	409a      	lsls	r2, r3
 80019d0:	0013      	movs	r3, r2
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	2380      	movs	r3, #128	@ 0x80
 80019e4:	055b      	lsls	r3, r3, #21
 80019e6:	4013      	ands	r3, r2
 80019e8:	d100      	bne.n	80019ec <HAL_GPIO_Init+0x180>
 80019ea:	e092      	b.n	8001b12 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80019ec:	4a50      	ldr	r2, [pc, #320]	@ (8001b30 <HAL_GPIO_Init+0x2c4>)
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	089b      	lsrs	r3, r3, #2
 80019f2:	3318      	adds	r3, #24
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	589b      	ldr	r3, [r3, r2]
 80019f8:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	2203      	movs	r2, #3
 80019fe:	4013      	ands	r3, r2
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	220f      	movs	r2, #15
 8001a04:	409a      	lsls	r2, r3
 8001a06:	0013      	movs	r3, r2
 8001a08:	43da      	mvns	r2, r3
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	23a0      	movs	r3, #160	@ 0xa0
 8001a14:	05db      	lsls	r3, r3, #23
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d013      	beq.n	8001a42 <HAL_GPIO_Init+0x1d6>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a45      	ldr	r2, [pc, #276]	@ (8001b34 <HAL_GPIO_Init+0x2c8>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d00d      	beq.n	8001a3e <HAL_GPIO_Init+0x1d2>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a44      	ldr	r2, [pc, #272]	@ (8001b38 <HAL_GPIO_Init+0x2cc>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d007      	beq.n	8001a3a <HAL_GPIO_Init+0x1ce>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a43      	ldr	r2, [pc, #268]	@ (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d101      	bne.n	8001a36 <HAL_GPIO_Init+0x1ca>
 8001a32:	2305      	movs	r3, #5
 8001a34:	e006      	b.n	8001a44 <HAL_GPIO_Init+0x1d8>
 8001a36:	2306      	movs	r3, #6
 8001a38:	e004      	b.n	8001a44 <HAL_GPIO_Init+0x1d8>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e002      	b.n	8001a44 <HAL_GPIO_Init+0x1d8>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <HAL_GPIO_Init+0x1d8>
 8001a42:	2300      	movs	r3, #0
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	2103      	movs	r1, #3
 8001a48:	400a      	ands	r2, r1
 8001a4a:	00d2      	lsls	r2, r2, #3
 8001a4c:	4093      	lsls	r3, r2
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001a54:	4936      	ldr	r1, [pc, #216]	@ (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	089b      	lsrs	r3, r3, #2
 8001a5a:	3318      	adds	r3, #24
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001a62:	4a33      	ldr	r2, [pc, #204]	@ (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001a64:	2380      	movs	r3, #128	@ 0x80
 8001a66:	58d3      	ldr	r3, [r2, r3]
 8001a68:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	43da      	mvns	r2, r3
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	4013      	ands	r3, r2
 8001a72:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	2380      	movs	r3, #128	@ 0x80
 8001a7a:	025b      	lsls	r3, r3, #9
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d003      	beq.n	8001a88 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001a88:	4929      	ldr	r1, [pc, #164]	@ (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001a8a:	2280      	movs	r2, #128	@ 0x80
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001a90:	4a27      	ldr	r2, [pc, #156]	@ (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001a92:	2384      	movs	r3, #132	@ 0x84
 8001a94:	58d3      	ldr	r3, [r2, r3]
 8001a96:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	43da      	mvns	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	2380      	movs	r3, #128	@ 0x80
 8001aa8:	029b      	lsls	r3, r3, #10
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001ab6:	491e      	ldr	r1, [pc, #120]	@ (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001ab8:	2284      	movs	r2, #132	@ 0x84
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001abe:	4b1c      	ldr	r3, [pc, #112]	@ (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	43da      	mvns	r2, r3
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	4013      	ands	r3, r2
 8001acc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	2380      	movs	r3, #128	@ 0x80
 8001ad4:	035b      	lsls	r3, r3, #13
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001ae2:	4b13      	ldr	r3, [pc, #76]	@ (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001ae8:	4b11      	ldr	r3, [pc, #68]	@ (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	43da      	mvns	r2, r3
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	4013      	ands	r3, r2
 8001af6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	2380      	movs	r3, #128	@ 0x80
 8001afe:	039b      	lsls	r3, r3, #14
 8001b00:	4013      	ands	r3, r2
 8001b02:	d003      	beq.n	8001b0c <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001b0c:	4b08      	ldr	r3, [pc, #32]	@ (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	3301      	adds	r3, #1
 8001b16:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	40da      	lsrs	r2, r3
 8001b20:	1e13      	subs	r3, r2, #0
 8001b22:	d000      	beq.n	8001b26 <HAL_GPIO_Init+0x2ba>
 8001b24:	e6aa      	b.n	800187c <HAL_GPIO_Init+0x10>
  }
}
 8001b26:	46c0      	nop			@ (mov r8, r8)
 8001b28:	46c0      	nop			@ (mov r8, r8)
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	b006      	add	sp, #24
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40021800 	.word	0x40021800
 8001b34:	50000400 	.word	0x50000400
 8001b38:	50000800 	.word	0x50000800
 8001b3c:	50001400 	.word	0x50001400

08001b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	0008      	movs	r0, r1
 8001b4a:	0011      	movs	r1, r2
 8001b4c:	1cbb      	adds	r3, r7, #2
 8001b4e:	1c02      	adds	r2, r0, #0
 8001b50:	801a      	strh	r2, [r3, #0]
 8001b52:	1c7b      	adds	r3, r7, #1
 8001b54:	1c0a      	adds	r2, r1, #0
 8001b56:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b58:	1c7b      	adds	r3, r7, #1
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d004      	beq.n	8001b6a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b60:	1cbb      	adds	r3, r7, #2
 8001b62:	881a      	ldrh	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b68:	e003      	b.n	8001b72 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b6a:	1cbb      	adds	r3, r7, #2
 8001b6c:	881a      	ldrh	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b72:	46c0      	nop			@ (mov r8, r8)
 8001b74:	46bd      	mov	sp, r7
 8001b76:	b002      	add	sp, #8
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b084      	sub	sp, #16
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
 8001b82:	000a      	movs	r2, r1
 8001b84:	1cbb      	adds	r3, r7, #2
 8001b86:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	695b      	ldr	r3, [r3, #20]
 8001b8c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b8e:	1cbb      	adds	r3, r7, #2
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	4013      	ands	r3, r2
 8001b96:	041a      	lsls	r2, r3, #16
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	1cb9      	adds	r1, r7, #2
 8001b9e:	8809      	ldrh	r1, [r1, #0]
 8001ba0:	400b      	ands	r3, r1
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	619a      	str	r2, [r3, #24]
}
 8001ba8:	46c0      	nop			@ (mov r8, r8)
 8001baa:	46bd      	mov	sp, r7
 8001bac:	b004      	add	sp, #16
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	0002      	movs	r2, r0
 8001bb8:	1dbb      	adds	r3, r7, #6
 8001bba:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8001bbc:	4b10      	ldr	r3, [pc, #64]	@ (8001c00 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	1dba      	adds	r2, r7, #6
 8001bc2:	8812      	ldrh	r2, [r2, #0]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d008      	beq.n	8001bda <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001bc8:	4b0d      	ldr	r3, [pc, #52]	@ (8001c00 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001bca:	1dba      	adds	r2, r7, #6
 8001bcc:	8812      	ldrh	r2, [r2, #0]
 8001bce:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001bd0:	1dbb      	adds	r3, r7, #6
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f000 f815 	bl	8001c04 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8001bda:	4b09      	ldr	r3, [pc, #36]	@ (8001c00 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	1dba      	adds	r2, r7, #6
 8001be0:	8812      	ldrh	r2, [r2, #0]
 8001be2:	4013      	ands	r3, r2
 8001be4:	d008      	beq.n	8001bf8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001be6:	4b06      	ldr	r3, [pc, #24]	@ (8001c00 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001be8:	1dba      	adds	r2, r7, #6
 8001bea:	8812      	ldrh	r2, [r2, #0]
 8001bec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001bee:	1dbb      	adds	r3, r7, #6
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	f000 f810 	bl	8001c18 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001bf8:	46c0      	nop			@ (mov r8, r8)
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	b002      	add	sp, #8
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40021800 	.word	0x40021800

08001c04 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	0002      	movs	r2, r0
 8001c0c:	1dbb      	adds	r3, r7, #6
 8001c0e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001c10:	46c0      	nop			@ (mov r8, r8)
 8001c12:	46bd      	mov	sp, r7
 8001c14:	b002      	add	sp, #8
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	0002      	movs	r2, r0
 8001c20:	1dbb      	adds	r3, r7, #6
 8001c22:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001c24:	46c0      	nop			@ (mov r8, r8)
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b002      	add	sp, #8
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e08f      	b.n	8001d5e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2241      	movs	r2, #65	@ 0x41
 8001c42:	5c9b      	ldrb	r3, [r3, r2]
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d107      	bne.n	8001c5a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2240      	movs	r2, #64	@ 0x40
 8001c4e:	2100      	movs	r1, #0
 8001c50:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	0018      	movs	r0, r3
 8001c56:	f7fe feab 	bl	80009b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2241      	movs	r2, #65	@ 0x41
 8001c5e:	2124      	movs	r1, #36	@ 0x24
 8001c60:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	438a      	bics	r2, r1
 8001c70:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	493b      	ldr	r1, [pc, #236]	@ (8001d68 <HAL_I2C_Init+0x13c>)
 8001c7c:	400a      	ands	r2, r1
 8001c7e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4938      	ldr	r1, [pc, #224]	@ (8001d6c <HAL_I2C_Init+0x140>)
 8001c8c:	400a      	ands	r2, r1
 8001c8e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d108      	bne.n	8001caa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2180      	movs	r1, #128	@ 0x80
 8001ca2:	0209      	lsls	r1, r1, #8
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	e007      	b.n	8001cba <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2184      	movs	r1, #132	@ 0x84
 8001cb4:	0209      	lsls	r1, r1, #8
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d109      	bne.n	8001cd6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2180      	movs	r1, #128	@ 0x80
 8001cce:	0109      	lsls	r1, r1, #4
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	605a      	str	r2, [r3, #4]
 8001cd4:	e007      	b.n	8001ce6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4923      	ldr	r1, [pc, #140]	@ (8001d70 <HAL_I2C_Init+0x144>)
 8001ce2:	400a      	ands	r2, r1
 8001ce4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4920      	ldr	r1, [pc, #128]	@ (8001d74 <HAL_I2C_Init+0x148>)
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68da      	ldr	r2, [r3, #12]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	491a      	ldr	r1, [pc, #104]	@ (8001d6c <HAL_I2C_Init+0x140>)
 8001d02:	400a      	ands	r2, r1
 8001d04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691a      	ldr	r2, [r3, #16]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69d9      	ldr	r1, [r3, #28]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a1a      	ldr	r2, [r3, #32]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2241      	movs	r2, #65	@ 0x41
 8001d4a:	2120      	movs	r1, #32
 8001d4c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2242      	movs	r2, #66	@ 0x42
 8001d58:	2100      	movs	r1, #0
 8001d5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	0018      	movs	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	b002      	add	sp, #8
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	46c0      	nop			@ (mov r8, r8)
 8001d68:	f0ffffff 	.word	0xf0ffffff
 8001d6c:	ffff7fff 	.word	0xffff7fff
 8001d70:	fffff7ff 	.word	0xfffff7ff
 8001d74:	02008000 	.word	0x02008000

08001d78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2241      	movs	r2, #65	@ 0x41
 8001d86:	5c9b      	ldrb	r3, [r3, r2]
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b20      	cmp	r3, #32
 8001d8c:	d138      	bne.n	8001e00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2240      	movs	r2, #64	@ 0x40
 8001d92:	5c9b      	ldrb	r3, [r3, r2]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d101      	bne.n	8001d9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d98:	2302      	movs	r3, #2
 8001d9a:	e032      	b.n	8001e02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2240      	movs	r2, #64	@ 0x40
 8001da0:	2101      	movs	r1, #1
 8001da2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2241      	movs	r2, #65	@ 0x41
 8001da8:	2124      	movs	r1, #36	@ 0x24
 8001daa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2101      	movs	r1, #1
 8001db8:	438a      	bics	r2, r1
 8001dba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4911      	ldr	r1, [pc, #68]	@ (8001e0c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001dc8:	400a      	ands	r2, r1
 8001dca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6819      	ldr	r1, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2101      	movs	r1, #1
 8001de8:	430a      	orrs	r2, r1
 8001dea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2241      	movs	r2, #65	@ 0x41
 8001df0:	2120      	movs	r1, #32
 8001df2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2240      	movs	r2, #64	@ 0x40
 8001df8:	2100      	movs	r1, #0
 8001dfa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	e000      	b.n	8001e02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e00:	2302      	movs	r3, #2
  }
}
 8001e02:	0018      	movs	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	b002      	add	sp, #8
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	46c0      	nop			@ (mov r8, r8)
 8001e0c:	ffffefff 	.word	0xffffefff

08001e10 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2241      	movs	r2, #65	@ 0x41
 8001e1e:	5c9b      	ldrb	r3, [r3, r2]
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b20      	cmp	r3, #32
 8001e24:	d139      	bne.n	8001e9a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2240      	movs	r2, #64	@ 0x40
 8001e2a:	5c9b      	ldrb	r3, [r3, r2]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d101      	bne.n	8001e34 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e30:	2302      	movs	r3, #2
 8001e32:	e033      	b.n	8001e9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2240      	movs	r2, #64	@ 0x40
 8001e38:	2101      	movs	r1, #1
 8001e3a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2241      	movs	r2, #65	@ 0x41
 8001e40:	2124      	movs	r1, #36	@ 0x24
 8001e42:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2101      	movs	r1, #1
 8001e50:	438a      	bics	r2, r1
 8001e52:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4a11      	ldr	r2, [pc, #68]	@ (8001ea4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001e60:	4013      	ands	r3, r2
 8001e62:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	021b      	lsls	r3, r3, #8
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2101      	movs	r1, #1
 8001e82:	430a      	orrs	r2, r1
 8001e84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2241      	movs	r2, #65	@ 0x41
 8001e8a:	2120      	movs	r1, #32
 8001e8c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2240      	movs	r2, #64	@ 0x40
 8001e92:	2100      	movs	r1, #0
 8001e94:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e96:	2300      	movs	r3, #0
 8001e98:	e000      	b.n	8001e9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e9a:	2302      	movs	r3, #2
  }
}
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	b004      	add	sp, #16
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	fffff0ff 	.word	0xfffff0ff

08001ea8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e1d0      	b.n	800225c <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d100      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x1e>
 8001ec4:	e069      	b.n	8001f9a <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ec6:	4bc8      	ldr	r3, [pc, #800]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	2238      	movs	r2, #56	@ 0x38
 8001ecc:	4013      	ands	r3, r2
 8001ece:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	2b08      	cmp	r3, #8
 8001ed4:	d105      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d15d      	bne.n	8001f9a <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e1bc      	b.n	800225c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	2380      	movs	r3, #128	@ 0x80
 8001ee8:	025b      	lsls	r3, r3, #9
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d107      	bne.n	8001efe <HAL_RCC_OscConfig+0x56>
 8001eee:	4bbe      	ldr	r3, [pc, #760]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	4bbd      	ldr	r3, [pc, #756]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 8001ef4:	2180      	movs	r1, #128	@ 0x80
 8001ef6:	0249      	lsls	r1, r1, #9
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	e020      	b.n	8001f40 <HAL_RCC_OscConfig+0x98>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	23a0      	movs	r3, #160	@ 0xa0
 8001f04:	02db      	lsls	r3, r3, #11
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d10e      	bne.n	8001f28 <HAL_RCC_OscConfig+0x80>
 8001f0a:	4bb7      	ldr	r3, [pc, #732]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	4bb6      	ldr	r3, [pc, #728]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 8001f10:	2180      	movs	r1, #128	@ 0x80
 8001f12:	02c9      	lsls	r1, r1, #11
 8001f14:	430a      	orrs	r2, r1
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	4bb3      	ldr	r3, [pc, #716]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	4bb2      	ldr	r3, [pc, #712]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 8001f1e:	2180      	movs	r1, #128	@ 0x80
 8001f20:	0249      	lsls	r1, r1, #9
 8001f22:	430a      	orrs	r2, r1
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	e00b      	b.n	8001f40 <HAL_RCC_OscConfig+0x98>
 8001f28:	4baf      	ldr	r3, [pc, #700]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4bae      	ldr	r3, [pc, #696]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 8001f2e:	49af      	ldr	r1, [pc, #700]	@ (80021ec <HAL_RCC_OscConfig+0x344>)
 8001f30:	400a      	ands	r2, r1
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	4bac      	ldr	r3, [pc, #688]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	4bab      	ldr	r3, [pc, #684]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 8001f3a:	49ad      	ldr	r1, [pc, #692]	@ (80021f0 <HAL_RCC_OscConfig+0x348>)
 8001f3c:	400a      	ands	r2, r1
 8001f3e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d014      	beq.n	8001f72 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f48:	f7fe ff0a 	bl	8000d60 <HAL_GetTick>
 8001f4c:	0003      	movs	r3, r0
 8001f4e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001f52:	f7fe ff05 	bl	8000d60 <HAL_GetTick>
 8001f56:	0002      	movs	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b64      	cmp	r3, #100	@ 0x64
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e17b      	b.n	800225c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f64:	4ba0      	ldr	r3, [pc, #640]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	2380      	movs	r3, #128	@ 0x80
 8001f6a:	029b      	lsls	r3, r3, #10
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d0f0      	beq.n	8001f52 <HAL_RCC_OscConfig+0xaa>
 8001f70:	e013      	b.n	8001f9a <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f72:	f7fe fef5 	bl	8000d60 <HAL_GetTick>
 8001f76:	0003      	movs	r3, r0
 8001f78:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001f7c:	f7fe fef0 	bl	8000d60 <HAL_GetTick>
 8001f80:	0002      	movs	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b64      	cmp	r3, #100	@ 0x64
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e166      	b.n	800225c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f8e:	4b96      	ldr	r3, [pc, #600]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	2380      	movs	r3, #128	@ 0x80
 8001f94:	029b      	lsls	r3, r3, #10
 8001f96:	4013      	ands	r3, r2
 8001f98:	d1f0      	bne.n	8001f7c <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d100      	bne.n	8001fa6 <HAL_RCC_OscConfig+0xfe>
 8001fa4:	e086      	b.n	80020b4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fa6:	4b90      	ldr	r3, [pc, #576]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2238      	movs	r2, #56	@ 0x38
 8001fac:	4013      	ands	r3, r2
 8001fae:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d12f      	bne.n	8002016 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e14c      	b.n	800225c <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc2:	4b89      	ldr	r3, [pc, #548]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	4a8b      	ldr	r2, [pc, #556]	@ (80021f4 <HAL_RCC_OscConfig+0x34c>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	0019      	movs	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	021a      	lsls	r2, r3, #8
 8001fd2:	4b85      	ldr	r3, [pc, #532]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d112      	bne.n	8002004 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001fde:	4b82      	ldr	r3, [pc, #520]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a85      	ldr	r2, [pc, #532]	@ (80021f8 <HAL_RCC_OscConfig+0x350>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	0019      	movs	r1, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691a      	ldr	r2, [r3, #16]
 8001fec:	4b7e      	ldr	r3, [pc, #504]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001ff2:	4b7d      	ldr	r3, [pc, #500]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	0adb      	lsrs	r3, r3, #11
 8001ff8:	2207      	movs	r2, #7
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	4a7f      	ldr	r2, [pc, #508]	@ (80021fc <HAL_RCC_OscConfig+0x354>)
 8001ffe:	40da      	lsrs	r2, r3
 8002000:	4b7f      	ldr	r3, [pc, #508]	@ (8002200 <HAL_RCC_OscConfig+0x358>)
 8002002:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002004:	4b7f      	ldr	r3, [pc, #508]	@ (8002204 <HAL_RCC_OscConfig+0x35c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	0018      	movs	r0, r3
 800200a:	f7fe fe4d 	bl	8000ca8 <HAL_InitTick>
 800200e:	1e03      	subs	r3, r0, #0
 8002010:	d050      	beq.n	80020b4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e122      	b.n	800225c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d030      	beq.n	8002080 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800201e:	4b72      	ldr	r3, [pc, #456]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a75      	ldr	r2, [pc, #468]	@ (80021f8 <HAL_RCC_OscConfig+0x350>)
 8002024:	4013      	ands	r3, r2
 8002026:	0019      	movs	r1, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691a      	ldr	r2, [r3, #16]
 800202c:	4b6e      	ldr	r3, [pc, #440]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 800202e:	430a      	orrs	r2, r1
 8002030:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8002032:	4b6d      	ldr	r3, [pc, #436]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	4b6c      	ldr	r3, [pc, #432]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 8002038:	2180      	movs	r1, #128	@ 0x80
 800203a:	0049      	lsls	r1, r1, #1
 800203c:	430a      	orrs	r2, r1
 800203e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002040:	f7fe fe8e 	bl	8000d60 <HAL_GetTick>
 8002044:	0003      	movs	r3, r0
 8002046:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800204a:	f7fe fe89 	bl	8000d60 <HAL_GetTick>
 800204e:	0002      	movs	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e0ff      	b.n	800225c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800205c:	4b62      	ldr	r3, [pc, #392]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	2380      	movs	r3, #128	@ 0x80
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	4013      	ands	r3, r2
 8002066:	d0f0      	beq.n	800204a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002068:	4b5f      	ldr	r3, [pc, #380]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	4a61      	ldr	r2, [pc, #388]	@ (80021f4 <HAL_RCC_OscConfig+0x34c>)
 800206e:	4013      	ands	r3, r2
 8002070:	0019      	movs	r1, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	021a      	lsls	r2, r3, #8
 8002078:	4b5b      	ldr	r3, [pc, #364]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 800207a:	430a      	orrs	r2, r1
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	e019      	b.n	80020b4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8002080:	4b59      	ldr	r3, [pc, #356]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4b58      	ldr	r3, [pc, #352]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 8002086:	4960      	ldr	r1, [pc, #384]	@ (8002208 <HAL_RCC_OscConfig+0x360>)
 8002088:	400a      	ands	r2, r1
 800208a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208c:	f7fe fe68 	bl	8000d60 <HAL_GetTick>
 8002090:	0003      	movs	r3, r0
 8002092:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002096:	f7fe fe63 	bl	8000d60 <HAL_GetTick>
 800209a:	0002      	movs	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e0d9      	b.n	800225c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020a8:	4b4f      	ldr	r3, [pc, #316]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	2380      	movs	r3, #128	@ 0x80
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4013      	ands	r3, r2
 80020b2:	d1f0      	bne.n	8002096 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2208      	movs	r2, #8
 80020ba:	4013      	ands	r3, r2
 80020bc:	d042      	beq.n	8002144 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80020be:	4b4a      	ldr	r3, [pc, #296]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	2238      	movs	r2, #56	@ 0x38
 80020c4:	4013      	ands	r3, r2
 80020c6:	2b18      	cmp	r3, #24
 80020c8:	d105      	bne.n	80020d6 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d138      	bne.n	8002144 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e0c2      	b.n	800225c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d019      	beq.n	8002112 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80020de:	4b42      	ldr	r3, [pc, #264]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 80020e0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80020e2:	4b41      	ldr	r3, [pc, #260]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 80020e4:	2101      	movs	r1, #1
 80020e6:	430a      	orrs	r2, r1
 80020e8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ea:	f7fe fe39 	bl	8000d60 <HAL_GetTick>
 80020ee:	0003      	movs	r3, r0
 80020f0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80020f4:	f7fe fe34 	bl	8000d60 <HAL_GetTick>
 80020f8:	0002      	movs	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e0aa      	b.n	800225c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002106:	4b38      	ldr	r3, [pc, #224]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 8002108:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800210a:	2202      	movs	r2, #2
 800210c:	4013      	ands	r3, r2
 800210e:	d0f1      	beq.n	80020f4 <HAL_RCC_OscConfig+0x24c>
 8002110:	e018      	b.n	8002144 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002112:	4b35      	ldr	r3, [pc, #212]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 8002114:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002116:	4b34      	ldr	r3, [pc, #208]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 8002118:	2101      	movs	r1, #1
 800211a:	438a      	bics	r2, r1
 800211c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211e:	f7fe fe1f 	bl	8000d60 <HAL_GetTick>
 8002122:	0003      	movs	r3, r0
 8002124:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002128:	f7fe fe1a 	bl	8000d60 <HAL_GetTick>
 800212c:	0002      	movs	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e090      	b.n	800225c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800213a:	4b2b      	ldr	r3, [pc, #172]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 800213c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800213e:	2202      	movs	r2, #2
 8002140:	4013      	ands	r3, r2
 8002142:	d1f1      	bne.n	8002128 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2204      	movs	r2, #4
 800214a:	4013      	ands	r3, r2
 800214c:	d100      	bne.n	8002150 <HAL_RCC_OscConfig+0x2a8>
 800214e:	e084      	b.n	800225a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002150:	230f      	movs	r3, #15
 8002152:	18fb      	adds	r3, r7, r3
 8002154:	2200      	movs	r2, #0
 8002156:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002158:	4b23      	ldr	r3, [pc, #140]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	2238      	movs	r2, #56	@ 0x38
 800215e:	4013      	ands	r3, r2
 8002160:	2b20      	cmp	r3, #32
 8002162:	d106      	bne.n	8002172 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d000      	beq.n	800216e <HAL_RCC_OscConfig+0x2c6>
 800216c:	e075      	b.n	800225a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e074      	b.n	800225c <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d106      	bne.n	8002188 <HAL_RCC_OscConfig+0x2e0>
 800217a:	4b1b      	ldr	r3, [pc, #108]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 800217c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800217e:	4b1a      	ldr	r3, [pc, #104]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 8002180:	2101      	movs	r1, #1
 8002182:	430a      	orrs	r2, r1
 8002184:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002186:	e01c      	b.n	80021c2 <HAL_RCC_OscConfig+0x31a>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	2b05      	cmp	r3, #5
 800218e:	d10c      	bne.n	80021aa <HAL_RCC_OscConfig+0x302>
 8002190:	4b15      	ldr	r3, [pc, #84]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 8002192:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002194:	4b14      	ldr	r3, [pc, #80]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 8002196:	2104      	movs	r1, #4
 8002198:	430a      	orrs	r2, r1
 800219a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800219c:	4b12      	ldr	r3, [pc, #72]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 800219e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021a0:	4b11      	ldr	r3, [pc, #68]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 80021a2:	2101      	movs	r1, #1
 80021a4:	430a      	orrs	r2, r1
 80021a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021a8:	e00b      	b.n	80021c2 <HAL_RCC_OscConfig+0x31a>
 80021aa:	4b0f      	ldr	r3, [pc, #60]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 80021ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021ae:	4b0e      	ldr	r3, [pc, #56]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 80021b0:	2101      	movs	r1, #1
 80021b2:	438a      	bics	r2, r1
 80021b4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021b6:	4b0c      	ldr	r3, [pc, #48]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 80021b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021ba:	4b0b      	ldr	r3, [pc, #44]	@ (80021e8 <HAL_RCC_OscConfig+0x340>)
 80021bc:	2104      	movs	r1, #4
 80021be:	438a      	bics	r2, r1
 80021c0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d028      	beq.n	800221c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ca:	f7fe fdc9 	bl	8000d60 <HAL_GetTick>
 80021ce:	0003      	movs	r3, r0
 80021d0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80021d2:	e01d      	b.n	8002210 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d4:	f7fe fdc4 	bl	8000d60 <HAL_GetTick>
 80021d8:	0002      	movs	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	4a0b      	ldr	r2, [pc, #44]	@ (800220c <HAL_RCC_OscConfig+0x364>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d915      	bls.n	8002210 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e039      	b.n	800225c <HAL_RCC_OscConfig+0x3b4>
 80021e8:	40021000 	.word	0x40021000
 80021ec:	fffeffff 	.word	0xfffeffff
 80021f0:	fffbffff 	.word	0xfffbffff
 80021f4:	ffff80ff 	.word	0xffff80ff
 80021f8:	ffffc7ff 	.word	0xffffc7ff
 80021fc:	02dc6c00 	.word	0x02dc6c00
 8002200:	20000000 	.word	0x20000000
 8002204:	20000004 	.word	0x20000004
 8002208:	fffffeff 	.word	0xfffffeff
 800220c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002210:	4b14      	ldr	r3, [pc, #80]	@ (8002264 <HAL_RCC_OscConfig+0x3bc>)
 8002212:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002214:	2202      	movs	r2, #2
 8002216:	4013      	ands	r3, r2
 8002218:	d0dc      	beq.n	80021d4 <HAL_RCC_OscConfig+0x32c>
 800221a:	e013      	b.n	8002244 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221c:	f7fe fda0 	bl	8000d60 <HAL_GetTick>
 8002220:	0003      	movs	r3, r0
 8002222:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002224:	e009      	b.n	800223a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002226:	f7fe fd9b 	bl	8000d60 <HAL_GetTick>
 800222a:	0002      	movs	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	4a0d      	ldr	r2, [pc, #52]	@ (8002268 <HAL_RCC_OscConfig+0x3c0>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e010      	b.n	800225c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800223a:	4b0a      	ldr	r3, [pc, #40]	@ (8002264 <HAL_RCC_OscConfig+0x3bc>)
 800223c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800223e:	2202      	movs	r2, #2
 8002240:	4013      	ands	r3, r2
 8002242:	d1f0      	bne.n	8002226 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002244:	230f      	movs	r3, #15
 8002246:	18fb      	adds	r3, r7, r3
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d105      	bne.n	800225a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800224e:	4b05      	ldr	r3, [pc, #20]	@ (8002264 <HAL_RCC_OscConfig+0x3bc>)
 8002250:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002252:	4b04      	ldr	r3, [pc, #16]	@ (8002264 <HAL_RCC_OscConfig+0x3bc>)
 8002254:	4905      	ldr	r1, [pc, #20]	@ (800226c <HAL_RCC_OscConfig+0x3c4>)
 8002256:	400a      	ands	r2, r1
 8002258:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	0018      	movs	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	b006      	add	sp, #24
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40021000 	.word	0x40021000
 8002268:	00001388 	.word	0x00001388
 800226c:	efffffff 	.word	0xefffffff

08002270 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0e9      	b.n	8002458 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002284:	4b76      	ldr	r3, [pc, #472]	@ (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2207      	movs	r2, #7
 800228a:	4013      	ands	r3, r2
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	429a      	cmp	r2, r3
 8002290:	d91e      	bls.n	80022d0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002292:	4b73      	ldr	r3, [pc, #460]	@ (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2207      	movs	r2, #7
 8002298:	4393      	bics	r3, r2
 800229a:	0019      	movs	r1, r3
 800229c:	4b70      	ldr	r3, [pc, #448]	@ (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022a4:	f7fe fd5c 	bl	8000d60 <HAL_GetTick>
 80022a8:	0003      	movs	r3, r0
 80022aa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022ac:	e009      	b.n	80022c2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80022ae:	f7fe fd57 	bl	8000d60 <HAL_GetTick>
 80022b2:	0002      	movs	r2, r0
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	4a6a      	ldr	r2, [pc, #424]	@ (8002464 <HAL_RCC_ClockConfig+0x1f4>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e0ca      	b.n	8002458 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022c2:	4b67      	ldr	r3, [pc, #412]	@ (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2207      	movs	r2, #7
 80022c8:	4013      	ands	r3, r2
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d1ee      	bne.n	80022ae <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2202      	movs	r2, #2
 80022d6:	4013      	ands	r3, r2
 80022d8:	d017      	beq.n	800230a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2204      	movs	r2, #4
 80022e0:	4013      	ands	r3, r2
 80022e2:	d008      	beq.n	80022f6 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80022e4:	4b60      	ldr	r3, [pc, #384]	@ (8002468 <HAL_RCC_ClockConfig+0x1f8>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	4a60      	ldr	r2, [pc, #384]	@ (800246c <HAL_RCC_ClockConfig+0x1fc>)
 80022ea:	401a      	ands	r2, r3
 80022ec:	4b5e      	ldr	r3, [pc, #376]	@ (8002468 <HAL_RCC_ClockConfig+0x1f8>)
 80022ee:	21b0      	movs	r1, #176	@ 0xb0
 80022f0:	0109      	lsls	r1, r1, #4
 80022f2:	430a      	orrs	r2, r1
 80022f4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022f6:	4b5c      	ldr	r3, [pc, #368]	@ (8002468 <HAL_RCC_ClockConfig+0x1f8>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	4a5d      	ldr	r2, [pc, #372]	@ (8002470 <HAL_RCC_ClockConfig+0x200>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	0019      	movs	r1, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68da      	ldr	r2, [r3, #12]
 8002304:	4b58      	ldr	r3, [pc, #352]	@ (8002468 <HAL_RCC_ClockConfig+0x1f8>)
 8002306:	430a      	orrs	r2, r1
 8002308:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2201      	movs	r2, #1
 8002310:	4013      	ands	r3, r2
 8002312:	d055      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8002314:	4b54      	ldr	r3, [pc, #336]	@ (8002468 <HAL_RCC_ClockConfig+0x1f8>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	221c      	movs	r2, #28
 800231a:	4393      	bics	r3, r2
 800231c:	0019      	movs	r1, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689a      	ldr	r2, [r3, #8]
 8002322:	4b51      	ldr	r3, [pc, #324]	@ (8002468 <HAL_RCC_ClockConfig+0x1f8>)
 8002324:	430a      	orrs	r2, r1
 8002326:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d107      	bne.n	8002340 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002330:	4b4d      	ldr	r3, [pc, #308]	@ (8002468 <HAL_RCC_ClockConfig+0x1f8>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	2380      	movs	r3, #128	@ 0x80
 8002336:	029b      	lsls	r3, r3, #10
 8002338:	4013      	ands	r3, r2
 800233a:	d11f      	bne.n	800237c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e08b      	b.n	8002458 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d107      	bne.n	8002358 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002348:	4b47      	ldr	r3, [pc, #284]	@ (8002468 <HAL_RCC_ClockConfig+0x1f8>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	2380      	movs	r3, #128	@ 0x80
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4013      	ands	r3, r2
 8002352:	d113      	bne.n	800237c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e07f      	b.n	8002458 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b03      	cmp	r3, #3
 800235e:	d106      	bne.n	800236e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002360:	4b41      	ldr	r3, [pc, #260]	@ (8002468 <HAL_RCC_ClockConfig+0x1f8>)
 8002362:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002364:	2202      	movs	r2, #2
 8002366:	4013      	ands	r3, r2
 8002368:	d108      	bne.n	800237c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e074      	b.n	8002458 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800236e:	4b3e      	ldr	r3, [pc, #248]	@ (8002468 <HAL_RCC_ClockConfig+0x1f8>)
 8002370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002372:	2202      	movs	r2, #2
 8002374:	4013      	ands	r3, r2
 8002376:	d101      	bne.n	800237c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e06d      	b.n	8002458 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800237c:	4b3a      	ldr	r3, [pc, #232]	@ (8002468 <HAL_RCC_ClockConfig+0x1f8>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	2207      	movs	r2, #7
 8002382:	4393      	bics	r3, r2
 8002384:	0019      	movs	r1, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	4b37      	ldr	r3, [pc, #220]	@ (8002468 <HAL_RCC_ClockConfig+0x1f8>)
 800238c:	430a      	orrs	r2, r1
 800238e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002390:	f7fe fce6 	bl	8000d60 <HAL_GetTick>
 8002394:	0003      	movs	r3, r0
 8002396:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002398:	e009      	b.n	80023ae <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800239a:	f7fe fce1 	bl	8000d60 <HAL_GetTick>
 800239e:	0002      	movs	r2, r0
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	4a2f      	ldr	r2, [pc, #188]	@ (8002464 <HAL_RCC_ClockConfig+0x1f4>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e054      	b.n	8002458 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ae:	4b2e      	ldr	r3, [pc, #184]	@ (8002468 <HAL_RCC_ClockConfig+0x1f8>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2238      	movs	r2, #56	@ 0x38
 80023b4:	401a      	ands	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	429a      	cmp	r2, r3
 80023be:	d1ec      	bne.n	800239a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023c0:	4b27      	ldr	r3, [pc, #156]	@ (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2207      	movs	r2, #7
 80023c6:	4013      	ands	r3, r2
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d21e      	bcs.n	800240c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ce:	4b24      	ldr	r3, [pc, #144]	@ (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2207      	movs	r2, #7
 80023d4:	4393      	bics	r3, r2
 80023d6:	0019      	movs	r1, r3
 80023d8:	4b21      	ldr	r3, [pc, #132]	@ (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023e0:	f7fe fcbe 	bl	8000d60 <HAL_GetTick>
 80023e4:	0003      	movs	r3, r0
 80023e6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023e8:	e009      	b.n	80023fe <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80023ea:	f7fe fcb9 	bl	8000d60 <HAL_GetTick>
 80023ee:	0002      	movs	r2, r0
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	4a1b      	ldr	r2, [pc, #108]	@ (8002464 <HAL_RCC_ClockConfig+0x1f4>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e02c      	b.n	8002458 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023fe:	4b18      	ldr	r3, [pc, #96]	@ (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2207      	movs	r2, #7
 8002404:	4013      	ands	r3, r2
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d1ee      	bne.n	80023ea <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2204      	movs	r2, #4
 8002412:	4013      	ands	r3, r2
 8002414:	d009      	beq.n	800242a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002416:	4b14      	ldr	r3, [pc, #80]	@ (8002468 <HAL_RCC_ClockConfig+0x1f8>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	4a16      	ldr	r2, [pc, #88]	@ (8002474 <HAL_RCC_ClockConfig+0x204>)
 800241c:	4013      	ands	r3, r2
 800241e:	0019      	movs	r1, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	4b10      	ldr	r3, [pc, #64]	@ (8002468 <HAL_RCC_ClockConfig+0x1f8>)
 8002426:	430a      	orrs	r2, r1
 8002428:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800242a:	f000 f82b 	bl	8002484 <HAL_RCC_GetSysClockFreq>
 800242e:	0001      	movs	r1, r0
 8002430:	4b0d      	ldr	r3, [pc, #52]	@ (8002468 <HAL_RCC_ClockConfig+0x1f8>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	0a1b      	lsrs	r3, r3, #8
 8002436:	220f      	movs	r2, #15
 8002438:	401a      	ands	r2, r3
 800243a:	4b0f      	ldr	r3, [pc, #60]	@ (8002478 <HAL_RCC_ClockConfig+0x208>)
 800243c:	0092      	lsls	r2, r2, #2
 800243e:	58d3      	ldr	r3, [r2, r3]
 8002440:	221f      	movs	r2, #31
 8002442:	4013      	ands	r3, r2
 8002444:	000a      	movs	r2, r1
 8002446:	40da      	lsrs	r2, r3
 8002448:	4b0c      	ldr	r3, [pc, #48]	@ (800247c <HAL_RCC_ClockConfig+0x20c>)
 800244a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800244c:	4b0c      	ldr	r3, [pc, #48]	@ (8002480 <HAL_RCC_ClockConfig+0x210>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	0018      	movs	r0, r3
 8002452:	f7fe fc29 	bl	8000ca8 <HAL_InitTick>
 8002456:	0003      	movs	r3, r0
}
 8002458:	0018      	movs	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	b004      	add	sp, #16
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40022000 	.word	0x40022000
 8002464:	00001388 	.word	0x00001388
 8002468:	40021000 	.word	0x40021000
 800246c:	ffff84ff 	.word	0xffff84ff
 8002470:	fffff0ff 	.word	0xfffff0ff
 8002474:	ffff8fff 	.word	0xffff8fff
 8002478:	080038c0 	.word	0x080038c0
 800247c:	20000000 	.word	0x20000000
 8002480:	20000004 	.word	0x20000004

08002484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800248a:	4b1c      	ldr	r3, [pc, #112]	@ (80024fc <HAL_RCC_GetSysClockFreq+0x78>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2238      	movs	r2, #56	@ 0x38
 8002490:	4013      	ands	r3, r2
 8002492:	d10f      	bne.n	80024b4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002494:	4b19      	ldr	r3, [pc, #100]	@ (80024fc <HAL_RCC_GetSysClockFreq+0x78>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	0adb      	lsrs	r3, r3, #11
 800249a:	2207      	movs	r2, #7
 800249c:	4013      	ands	r3, r2
 800249e:	2201      	movs	r2, #1
 80024a0:	409a      	lsls	r2, r3
 80024a2:	0013      	movs	r3, r2
 80024a4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80024a6:	6839      	ldr	r1, [r7, #0]
 80024a8:	4815      	ldr	r0, [pc, #84]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x7c>)
 80024aa:	f7fd fe2d 	bl	8000108 <__udivsi3>
 80024ae:	0003      	movs	r3, r0
 80024b0:	607b      	str	r3, [r7, #4]
 80024b2:	e01e      	b.n	80024f2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80024b4:	4b11      	ldr	r3, [pc, #68]	@ (80024fc <HAL_RCC_GetSysClockFreq+0x78>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	2238      	movs	r2, #56	@ 0x38
 80024ba:	4013      	ands	r3, r2
 80024bc:	2b08      	cmp	r3, #8
 80024be:	d102      	bne.n	80024c6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024c0:	4b10      	ldr	r3, [pc, #64]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x80>)
 80024c2:	607b      	str	r3, [r7, #4]
 80024c4:	e015      	b.n	80024f2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80024c6:	4b0d      	ldr	r3, [pc, #52]	@ (80024fc <HAL_RCC_GetSysClockFreq+0x78>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	2238      	movs	r2, #56	@ 0x38
 80024cc:	4013      	ands	r3, r2
 80024ce:	2b20      	cmp	r3, #32
 80024d0:	d103      	bne.n	80024da <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80024d2:	2380      	movs	r3, #128	@ 0x80
 80024d4:	021b      	lsls	r3, r3, #8
 80024d6:	607b      	str	r3, [r7, #4]
 80024d8:	e00b      	b.n	80024f2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80024da:	4b08      	ldr	r3, [pc, #32]	@ (80024fc <HAL_RCC_GetSysClockFreq+0x78>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	2238      	movs	r2, #56	@ 0x38
 80024e0:	4013      	ands	r3, r2
 80024e2:	2b18      	cmp	r3, #24
 80024e4:	d103      	bne.n	80024ee <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80024e6:	23fa      	movs	r3, #250	@ 0xfa
 80024e8:	01db      	lsls	r3, r3, #7
 80024ea:	607b      	str	r3, [r7, #4]
 80024ec:	e001      	b.n	80024f2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 80024f2:	687b      	ldr	r3, [r7, #4]
}
 80024f4:	0018      	movs	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	b002      	add	sp, #8
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40021000 	.word	0x40021000
 8002500:	02dc6c00 	.word	0x02dc6c00
 8002504:	007a1200 	.word	0x007a1200

08002508 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002510:	2313      	movs	r3, #19
 8002512:	18fb      	adds	r3, r7, r3
 8002514:	2200      	movs	r2, #0
 8002516:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002518:	2312      	movs	r3, #18
 800251a:	18fb      	adds	r3, r7, r3
 800251c:	2200      	movs	r2, #0
 800251e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	2380      	movs	r3, #128	@ 0x80
 8002526:	029b      	lsls	r3, r3, #10
 8002528:	4013      	ands	r3, r2
 800252a:	d100      	bne.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800252c:	e079      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800252e:	2011      	movs	r0, #17
 8002530:	183b      	adds	r3, r7, r0
 8002532:	2200      	movs	r2, #0
 8002534:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002536:	4b64      	ldr	r3, [pc, #400]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002538:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800253a:	2380      	movs	r3, #128	@ 0x80
 800253c:	055b      	lsls	r3, r3, #21
 800253e:	4013      	ands	r3, r2
 8002540:	d110      	bne.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002542:	4b61      	ldr	r3, [pc, #388]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002544:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002546:	4b60      	ldr	r3, [pc, #384]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002548:	2180      	movs	r1, #128	@ 0x80
 800254a:	0549      	lsls	r1, r1, #21
 800254c:	430a      	orrs	r2, r1
 800254e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002550:	4b5d      	ldr	r3, [pc, #372]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002552:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002554:	2380      	movs	r3, #128	@ 0x80
 8002556:	055b      	lsls	r3, r3, #21
 8002558:	4013      	ands	r3, r2
 800255a:	60bb      	str	r3, [r7, #8]
 800255c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800255e:	183b      	adds	r3, r7, r0
 8002560:	2201      	movs	r2, #1
 8002562:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002564:	4b58      	ldr	r3, [pc, #352]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002566:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002568:	23c0      	movs	r3, #192	@ 0xc0
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4013      	ands	r3, r2
 800256e:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d019      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	429a      	cmp	r2, r3
 800257e:	d014      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002580:	4b51      	ldr	r3, [pc, #324]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002584:	4a51      	ldr	r2, [pc, #324]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002586:	4013      	ands	r3, r2
 8002588:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800258a:	4b4f      	ldr	r3, [pc, #316]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800258c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800258e:	4b4e      	ldr	r3, [pc, #312]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002590:	2180      	movs	r1, #128	@ 0x80
 8002592:	0249      	lsls	r1, r1, #9
 8002594:	430a      	orrs	r2, r1
 8002596:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002598:	4b4b      	ldr	r3, [pc, #300]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800259a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800259c:	4b4a      	ldr	r3, [pc, #296]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800259e:	494c      	ldr	r1, [pc, #304]	@ (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80025a0:	400a      	ands	r2, r1
 80025a2:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 80025a4:	4b48      	ldr	r3, [pc, #288]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	2201      	movs	r2, #1
 80025ae:	4013      	ands	r3, r2
 80025b0:	d016      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b2:	f7fe fbd5 	bl	8000d60 <HAL_GetTick>
 80025b6:	0003      	movs	r3, r0
 80025b8:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80025ba:	e00c      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025bc:	f7fe fbd0 	bl	8000d60 <HAL_GetTick>
 80025c0:	0002      	movs	r2, r0
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	4a43      	ldr	r2, [pc, #268]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d904      	bls.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 80025cc:	2313      	movs	r3, #19
 80025ce:	18fb      	adds	r3, r7, r3
 80025d0:	2203      	movs	r2, #3
 80025d2:	701a      	strb	r2, [r3, #0]
          break;
 80025d4:	e004      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80025d6:	4b3c      	ldr	r3, [pc, #240]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025da:	2202      	movs	r2, #2
 80025dc:	4013      	ands	r3, r2
 80025de:	d0ed      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 80025e0:	2313      	movs	r3, #19
 80025e2:	18fb      	adds	r3, r7, r3
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10a      	bne.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025ea:	4b37      	ldr	r3, [pc, #220]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ee:	4a37      	ldr	r2, [pc, #220]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	0019      	movs	r1, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	699a      	ldr	r2, [r3, #24]
 80025f8:	4b33      	ldr	r3, [pc, #204]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025fa:	430a      	orrs	r2, r1
 80025fc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80025fe:	e005      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002600:	2312      	movs	r3, #18
 8002602:	18fb      	adds	r3, r7, r3
 8002604:	2213      	movs	r2, #19
 8002606:	18ba      	adds	r2, r7, r2
 8002608:	7812      	ldrb	r2, [r2, #0]
 800260a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800260c:	2311      	movs	r3, #17
 800260e:	18fb      	adds	r3, r7, r3
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d105      	bne.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002616:	4b2c      	ldr	r3, [pc, #176]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002618:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800261a:	4b2b      	ldr	r3, [pc, #172]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800261c:	492e      	ldr	r1, [pc, #184]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800261e:	400a      	ands	r2, r1
 8002620:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2201      	movs	r2, #1
 8002628:	4013      	ands	r3, r2
 800262a:	d009      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800262c:	4b26      	ldr	r3, [pc, #152]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800262e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002630:	2203      	movs	r2, #3
 8002632:	4393      	bics	r3, r2
 8002634:	0019      	movs	r1, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	4b23      	ldr	r3, [pc, #140]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800263c:	430a      	orrs	r2, r1
 800263e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2240      	movs	r2, #64	@ 0x40
 8002646:	4013      	ands	r3, r2
 8002648:	d009      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800264a:	4b1f      	ldr	r3, [pc, #124]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800264c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800264e:	4a23      	ldr	r2, [pc, #140]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002650:	4013      	ands	r3, r2
 8002652:	0019      	movs	r1, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68da      	ldr	r2, [r3, #12]
 8002658:	4b1b      	ldr	r3, [pc, #108]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800265a:	430a      	orrs	r2, r1
 800265c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	2380      	movs	r3, #128	@ 0x80
 8002664:	01db      	lsls	r3, r3, #7
 8002666:	4013      	ands	r3, r2
 8002668:	d008      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800266a:	4b17      	ldr	r3, [pc, #92]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800266c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	0899      	lsrs	r1, r3, #2
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	695a      	ldr	r2, [r3, #20]
 8002676:	4b14      	ldr	r3, [pc, #80]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002678:	430a      	orrs	r2, r1
 800267a:	655a      	str	r2, [r3, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	2380      	movs	r3, #128	@ 0x80
 8002682:	011b      	lsls	r3, r3, #4
 8002684:	4013      	ands	r3, r2
 8002686:	d009      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002688:	4b0f      	ldr	r3, [pc, #60]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800268a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800268c:	4a14      	ldr	r2, [pc, #80]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800268e:	4013      	ands	r3, r2
 8002690:	0019      	movs	r1, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691a      	ldr	r2, [r3, #16]
 8002696:	4b0c      	ldr	r3, [pc, #48]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002698:	430a      	orrs	r2, r1
 800269a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	da09      	bge.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 80026a4:	4b08      	ldr	r3, [pc, #32]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	22e0      	movs	r2, #224	@ 0xe0
 80026aa:	4393      	bics	r3, r2
 80026ac:	0019      	movs	r1, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	4b05      	ldr	r3, [pc, #20]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026b4:	430a      	orrs	r2, r1
 80026b6:	601a      	str	r2, [r3, #0]
  }
  return status;
 80026b8:	2312      	movs	r3, #18
 80026ba:	18fb      	adds	r3, r7, r3
 80026bc:	781b      	ldrb	r3, [r3, #0]
}
 80026be:	0018      	movs	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	b006      	add	sp, #24
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	46c0      	nop			@ (mov r8, r8)
 80026c8:	40021000 	.word	0x40021000
 80026cc:	fffffcff 	.word	0xfffffcff
 80026d0:	fffeffff 	.word	0xfffeffff
 80026d4:	00001388 	.word	0x00001388
 80026d8:	efffffff 	.word	0xefffffff
 80026dc:	ffffcfff 	.word	0xffffcfff
 80026e0:	ffff3fff 	.word	0xffff3fff

080026e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e04a      	b.n	800278c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	223d      	movs	r2, #61	@ 0x3d
 80026fa:	5c9b      	ldrb	r3, [r3, r2]
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d107      	bne.n	8002712 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	223c      	movs	r2, #60	@ 0x3c
 8002706:	2100      	movs	r1, #0
 8002708:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	0018      	movs	r0, r3
 800270e:	f7fe f9d9 	bl	8000ac4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	223d      	movs	r2, #61	@ 0x3d
 8002716:	2102      	movs	r1, #2
 8002718:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3304      	adds	r3, #4
 8002722:	0019      	movs	r1, r3
 8002724:	0010      	movs	r0, r2
 8002726:	f000 fc47 	bl	8002fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2248      	movs	r2, #72	@ 0x48
 800272e:	2101      	movs	r1, #1
 8002730:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	223e      	movs	r2, #62	@ 0x3e
 8002736:	2101      	movs	r1, #1
 8002738:	5499      	strb	r1, [r3, r2]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	223f      	movs	r2, #63	@ 0x3f
 800273e:	2101      	movs	r1, #1
 8002740:	5499      	strb	r1, [r3, r2]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2240      	movs	r2, #64	@ 0x40
 8002746:	2101      	movs	r1, #1
 8002748:	5499      	strb	r1, [r3, r2]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2241      	movs	r2, #65	@ 0x41
 800274e:	2101      	movs	r1, #1
 8002750:	5499      	strb	r1, [r3, r2]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2242      	movs	r2, #66	@ 0x42
 8002756:	2101      	movs	r1, #1
 8002758:	5499      	strb	r1, [r3, r2]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2243      	movs	r2, #67	@ 0x43
 800275e:	2101      	movs	r1, #1
 8002760:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2244      	movs	r2, #68	@ 0x44
 8002766:	2101      	movs	r1, #1
 8002768:	5499      	strb	r1, [r3, r2]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2245      	movs	r2, #69	@ 0x45
 800276e:	2101      	movs	r1, #1
 8002770:	5499      	strb	r1, [r3, r2]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2246      	movs	r2, #70	@ 0x46
 8002776:	2101      	movs	r1, #1
 8002778:	5499      	strb	r1, [r3, r2]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2247      	movs	r2, #71	@ 0x47
 800277e:	2101      	movs	r1, #1
 8002780:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	223d      	movs	r2, #61	@ 0x3d
 8002786:	2101      	movs	r1, #1
 8002788:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	0018      	movs	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	b002      	add	sp, #8
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e04a      	b.n	800283c <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	223d      	movs	r2, #61	@ 0x3d
 80027aa:	5c9b      	ldrb	r3, [r3, r2]
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d107      	bne.n	80027c2 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	223c      	movs	r2, #60	@ 0x3c
 80027b6:	2100      	movs	r1, #0
 80027b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	0018      	movs	r0, r3
 80027be:	f000 f841 	bl	8002844 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	223d      	movs	r2, #61	@ 0x3d
 80027c6:	2102      	movs	r1, #2
 80027c8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	3304      	adds	r3, #4
 80027d2:	0019      	movs	r1, r3
 80027d4:	0010      	movs	r0, r2
 80027d6:	f000 fbef 	bl	8002fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2248      	movs	r2, #72	@ 0x48
 80027de:	2101      	movs	r1, #1
 80027e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	223e      	movs	r2, #62	@ 0x3e
 80027e6:	2101      	movs	r1, #1
 80027e8:	5499      	strb	r1, [r3, r2]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	223f      	movs	r2, #63	@ 0x3f
 80027ee:	2101      	movs	r1, #1
 80027f0:	5499      	strb	r1, [r3, r2]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2240      	movs	r2, #64	@ 0x40
 80027f6:	2101      	movs	r1, #1
 80027f8:	5499      	strb	r1, [r3, r2]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2241      	movs	r2, #65	@ 0x41
 80027fe:	2101      	movs	r1, #1
 8002800:	5499      	strb	r1, [r3, r2]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2242      	movs	r2, #66	@ 0x42
 8002806:	2101      	movs	r1, #1
 8002808:	5499      	strb	r1, [r3, r2]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2243      	movs	r2, #67	@ 0x43
 800280e:	2101      	movs	r1, #1
 8002810:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2244      	movs	r2, #68	@ 0x44
 8002816:	2101      	movs	r1, #1
 8002818:	5499      	strb	r1, [r3, r2]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2245      	movs	r2, #69	@ 0x45
 800281e:	2101      	movs	r1, #1
 8002820:	5499      	strb	r1, [r3, r2]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2246      	movs	r2, #70	@ 0x46
 8002826:	2101      	movs	r1, #1
 8002828:	5499      	strb	r1, [r3, r2]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2247      	movs	r2, #71	@ 0x47
 800282e:	2101      	movs	r1, #1
 8002830:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	223d      	movs	r2, #61	@ 0x3d
 8002836:	2101      	movs	r1, #1
 8002838:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	0018      	movs	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	b002      	add	sp, #8
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800284c:	46c0      	nop			@ (mov r8, r8)
 800284e:	46bd      	mov	sp, r7
 8002850:	b002      	add	sp, #8
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e04a      	b.n	80028fc <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	223d      	movs	r2, #61	@ 0x3d
 800286a:	5c9b      	ldrb	r3, [r3, r2]
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d107      	bne.n	8002882 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	223c      	movs	r2, #60	@ 0x3c
 8002876:	2100      	movs	r1, #0
 8002878:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	0018      	movs	r0, r3
 800287e:	f7fe f8f9 	bl	8000a74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	223d      	movs	r2, #61	@ 0x3d
 8002886:	2102      	movs	r1, #2
 8002888:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3304      	adds	r3, #4
 8002892:	0019      	movs	r1, r3
 8002894:	0010      	movs	r0, r2
 8002896:	f000 fb8f 	bl	8002fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2248      	movs	r2, #72	@ 0x48
 800289e:	2101      	movs	r1, #1
 80028a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	223e      	movs	r2, #62	@ 0x3e
 80028a6:	2101      	movs	r1, #1
 80028a8:	5499      	strb	r1, [r3, r2]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	223f      	movs	r2, #63	@ 0x3f
 80028ae:	2101      	movs	r1, #1
 80028b0:	5499      	strb	r1, [r3, r2]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2240      	movs	r2, #64	@ 0x40
 80028b6:	2101      	movs	r1, #1
 80028b8:	5499      	strb	r1, [r3, r2]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2241      	movs	r2, #65	@ 0x41
 80028be:	2101      	movs	r1, #1
 80028c0:	5499      	strb	r1, [r3, r2]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2242      	movs	r2, #66	@ 0x42
 80028c6:	2101      	movs	r1, #1
 80028c8:	5499      	strb	r1, [r3, r2]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2243      	movs	r2, #67	@ 0x43
 80028ce:	2101      	movs	r1, #1
 80028d0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2244      	movs	r2, #68	@ 0x44
 80028d6:	2101      	movs	r1, #1
 80028d8:	5499      	strb	r1, [r3, r2]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2245      	movs	r2, #69	@ 0x45
 80028de:	2101      	movs	r1, #1
 80028e0:	5499      	strb	r1, [r3, r2]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2246      	movs	r2, #70	@ 0x46
 80028e6:	2101      	movs	r1, #1
 80028e8:	5499      	strb	r1, [r3, r2]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2247      	movs	r2, #71	@ 0x47
 80028ee:	2101      	movs	r1, #1
 80028f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	223d      	movs	r2, #61	@ 0x3d
 80028f6:	2101      	movs	r1, #1
 80028f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	0018      	movs	r0, r3
 80028fe:	46bd      	mov	sp, r7
 8002900:	b002      	add	sp, #8
 8002902:	bd80      	pop	{r7, pc}

08002904 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d108      	bne.n	8002926 <HAL_TIM_PWM_Start+0x22>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	223e      	movs	r2, #62	@ 0x3e
 8002918:	5c9b      	ldrb	r3, [r3, r2]
 800291a:	b2db      	uxtb	r3, r3
 800291c:	3b01      	subs	r3, #1
 800291e:	1e5a      	subs	r2, r3, #1
 8002920:	4193      	sbcs	r3, r2
 8002922:	b2db      	uxtb	r3, r3
 8002924:	e037      	b.n	8002996 <HAL_TIM_PWM_Start+0x92>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2b04      	cmp	r3, #4
 800292a:	d108      	bne.n	800293e <HAL_TIM_PWM_Start+0x3a>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	223f      	movs	r2, #63	@ 0x3f
 8002930:	5c9b      	ldrb	r3, [r3, r2]
 8002932:	b2db      	uxtb	r3, r3
 8002934:	3b01      	subs	r3, #1
 8002936:	1e5a      	subs	r2, r3, #1
 8002938:	4193      	sbcs	r3, r2
 800293a:	b2db      	uxtb	r3, r3
 800293c:	e02b      	b.n	8002996 <HAL_TIM_PWM_Start+0x92>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2b08      	cmp	r3, #8
 8002942:	d108      	bne.n	8002956 <HAL_TIM_PWM_Start+0x52>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2240      	movs	r2, #64	@ 0x40
 8002948:	5c9b      	ldrb	r3, [r3, r2]
 800294a:	b2db      	uxtb	r3, r3
 800294c:	3b01      	subs	r3, #1
 800294e:	1e5a      	subs	r2, r3, #1
 8002950:	4193      	sbcs	r3, r2
 8002952:	b2db      	uxtb	r3, r3
 8002954:	e01f      	b.n	8002996 <HAL_TIM_PWM_Start+0x92>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	2b0c      	cmp	r3, #12
 800295a:	d108      	bne.n	800296e <HAL_TIM_PWM_Start+0x6a>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2241      	movs	r2, #65	@ 0x41
 8002960:	5c9b      	ldrb	r3, [r3, r2]
 8002962:	b2db      	uxtb	r3, r3
 8002964:	3b01      	subs	r3, #1
 8002966:	1e5a      	subs	r2, r3, #1
 8002968:	4193      	sbcs	r3, r2
 800296a:	b2db      	uxtb	r3, r3
 800296c:	e013      	b.n	8002996 <HAL_TIM_PWM_Start+0x92>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	2b10      	cmp	r3, #16
 8002972:	d108      	bne.n	8002986 <HAL_TIM_PWM_Start+0x82>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2242      	movs	r2, #66	@ 0x42
 8002978:	5c9b      	ldrb	r3, [r3, r2]
 800297a:	b2db      	uxtb	r3, r3
 800297c:	3b01      	subs	r3, #1
 800297e:	1e5a      	subs	r2, r3, #1
 8002980:	4193      	sbcs	r3, r2
 8002982:	b2db      	uxtb	r3, r3
 8002984:	e007      	b.n	8002996 <HAL_TIM_PWM_Start+0x92>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2243      	movs	r2, #67	@ 0x43
 800298a:	5c9b      	ldrb	r3, [r3, r2]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	3b01      	subs	r3, #1
 8002990:	1e5a      	subs	r2, r3, #1
 8002992:	4193      	sbcs	r3, r2
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e07b      	b.n	8002a96 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d104      	bne.n	80029ae <HAL_TIM_PWM_Start+0xaa>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	223e      	movs	r2, #62	@ 0x3e
 80029a8:	2102      	movs	r1, #2
 80029aa:	5499      	strb	r1, [r3, r2]
 80029ac:	e023      	b.n	80029f6 <HAL_TIM_PWM_Start+0xf2>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b04      	cmp	r3, #4
 80029b2:	d104      	bne.n	80029be <HAL_TIM_PWM_Start+0xba>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	223f      	movs	r2, #63	@ 0x3f
 80029b8:	2102      	movs	r1, #2
 80029ba:	5499      	strb	r1, [r3, r2]
 80029bc:	e01b      	b.n	80029f6 <HAL_TIM_PWM_Start+0xf2>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d104      	bne.n	80029ce <HAL_TIM_PWM_Start+0xca>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2240      	movs	r2, #64	@ 0x40
 80029c8:	2102      	movs	r1, #2
 80029ca:	5499      	strb	r1, [r3, r2]
 80029cc:	e013      	b.n	80029f6 <HAL_TIM_PWM_Start+0xf2>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	2b0c      	cmp	r3, #12
 80029d2:	d104      	bne.n	80029de <HAL_TIM_PWM_Start+0xda>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2241      	movs	r2, #65	@ 0x41
 80029d8:	2102      	movs	r1, #2
 80029da:	5499      	strb	r1, [r3, r2]
 80029dc:	e00b      	b.n	80029f6 <HAL_TIM_PWM_Start+0xf2>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	2b10      	cmp	r3, #16
 80029e2:	d104      	bne.n	80029ee <HAL_TIM_PWM_Start+0xea>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2242      	movs	r2, #66	@ 0x42
 80029e8:	2102      	movs	r1, #2
 80029ea:	5499      	strb	r1, [r3, r2]
 80029ec:	e003      	b.n	80029f6 <HAL_TIM_PWM_Start+0xf2>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2243      	movs	r2, #67	@ 0x43
 80029f2:	2102      	movs	r1, #2
 80029f4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6839      	ldr	r1, [r7, #0]
 80029fc:	2201      	movs	r2, #1
 80029fe:	0018      	movs	r0, r3
 8002a00:	f000 fde2 	bl	80035c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a25      	ldr	r2, [pc, #148]	@ (8002aa0 <HAL_TIM_PWM_Start+0x19c>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d009      	beq.n	8002a22 <HAL_TIM_PWM_Start+0x11e>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a24      	ldr	r2, [pc, #144]	@ (8002aa4 <HAL_TIM_PWM_Start+0x1a0>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d004      	beq.n	8002a22 <HAL_TIM_PWM_Start+0x11e>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a22      	ldr	r2, [pc, #136]	@ (8002aa8 <HAL_TIM_PWM_Start+0x1a4>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d101      	bne.n	8002a26 <HAL_TIM_PWM_Start+0x122>
 8002a22:	2301      	movs	r3, #1
 8002a24:	e000      	b.n	8002a28 <HAL_TIM_PWM_Start+0x124>
 8002a26:	2300      	movs	r3, #0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d008      	beq.n	8002a3e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2180      	movs	r1, #128	@ 0x80
 8002a38:	0209      	lsls	r1, r1, #8
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a17      	ldr	r2, [pc, #92]	@ (8002aa0 <HAL_TIM_PWM_Start+0x19c>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d004      	beq.n	8002a52 <HAL_TIM_PWM_Start+0x14e>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a17      	ldr	r2, [pc, #92]	@ (8002aac <HAL_TIM_PWM_Start+0x1a8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d116      	bne.n	8002a80 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	4a15      	ldr	r2, [pc, #84]	@ (8002ab0 <HAL_TIM_PWM_Start+0x1ac>)
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2b06      	cmp	r3, #6
 8002a62:	d016      	beq.n	8002a92 <HAL_TIM_PWM_Start+0x18e>
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	2380      	movs	r3, #128	@ 0x80
 8002a68:	025b      	lsls	r3, r3, #9
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d011      	beq.n	8002a92 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2101      	movs	r1, #1
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a7e:	e008      	b.n	8002a92 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	e000      	b.n	8002a94 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a92:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	0018      	movs	r0, r3
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	b004      	add	sp, #16
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	46c0      	nop			@ (mov r8, r8)
 8002aa0:	40012c00 	.word	0x40012c00
 8002aa4:	40014400 	.word	0x40014400
 8002aa8:	40014800 	.word	0x40014800
 8002aac:	40000400 	.word	0x40000400
 8002ab0:	00010007 	.word	0x00010007

08002ab4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2202      	movs	r2, #2
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	d021      	beq.n	8002b18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	4013      	ands	r3, r2
 8002ada:	d01d      	beq.n	8002b18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2203      	movs	r2, #3
 8002ae2:	4252      	negs	r2, r2
 8002ae4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	2203      	movs	r2, #3
 8002af4:	4013      	ands	r3, r2
 8002af6:	d004      	beq.n	8002b02 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	0018      	movs	r0, r3
 8002afc:	f000 fa44 	bl	8002f88 <HAL_TIM_IC_CaptureCallback>
 8002b00:	e007      	b.n	8002b12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	0018      	movs	r0, r3
 8002b06:	f000 fa37 	bl	8002f78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f000 fa43 	bl	8002f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2204      	movs	r2, #4
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d022      	beq.n	8002b66 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2204      	movs	r2, #4
 8002b24:	4013      	ands	r3, r2
 8002b26:	d01e      	beq.n	8002b66 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2205      	movs	r2, #5
 8002b2e:	4252      	negs	r2, r2
 8002b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2202      	movs	r2, #2
 8002b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	699a      	ldr	r2, [r3, #24]
 8002b3e:	23c0      	movs	r3, #192	@ 0xc0
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4013      	ands	r3, r2
 8002b44:	d004      	beq.n	8002b50 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f000 fa1d 	bl	8002f88 <HAL_TIM_IC_CaptureCallback>
 8002b4e:	e007      	b.n	8002b60 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	0018      	movs	r0, r3
 8002b54:	f000 fa10 	bl	8002f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f000 fa1c 	bl	8002f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2208      	movs	r2, #8
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d021      	beq.n	8002bb2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2208      	movs	r2, #8
 8002b72:	4013      	ands	r3, r2
 8002b74:	d01d      	beq.n	8002bb2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2209      	movs	r2, #9
 8002b7c:	4252      	negs	r2, r2
 8002b7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2204      	movs	r2, #4
 8002b84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	2203      	movs	r2, #3
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d004      	beq.n	8002b9c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	0018      	movs	r0, r3
 8002b96:	f000 f9f7 	bl	8002f88 <HAL_TIM_IC_CaptureCallback>
 8002b9a:	e007      	b.n	8002bac <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f000 f9ea 	bl	8002f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f000 f9f6 	bl	8002f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2210      	movs	r2, #16
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	d022      	beq.n	8002c00 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2210      	movs	r2, #16
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	d01e      	beq.n	8002c00 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2211      	movs	r2, #17
 8002bc8:	4252      	negs	r2, r2
 8002bca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2208      	movs	r2, #8
 8002bd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	69da      	ldr	r2, [r3, #28]
 8002bd8:	23c0      	movs	r3, #192	@ 0xc0
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4013      	ands	r3, r2
 8002bde:	d004      	beq.n	8002bea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	0018      	movs	r0, r3
 8002be4:	f000 f9d0 	bl	8002f88 <HAL_TIM_IC_CaptureCallback>
 8002be8:	e007      	b.n	8002bfa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	0018      	movs	r0, r3
 8002bee:	f000 f9c3 	bl	8002f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f000 f9cf 	bl	8002f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2201      	movs	r2, #1
 8002c04:	4013      	ands	r3, r2
 8002c06:	d00c      	beq.n	8002c22 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d008      	beq.n	8002c22 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2202      	movs	r2, #2
 8002c16:	4252      	negs	r2, r2
 8002c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	f7fd faff 	bl	8000220 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	2280      	movs	r2, #128	@ 0x80
 8002c26:	4013      	ands	r3, r2
 8002c28:	d00c      	beq.n	8002c44 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2280      	movs	r2, #128	@ 0x80
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d008      	beq.n	8002c44 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2281      	movs	r2, #129	@ 0x81
 8002c38:	4252      	negs	r2, r2
 8002c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f000 fdf6 	bl	8003830 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	2380      	movs	r3, #128	@ 0x80
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d00b      	beq.n	8002c66 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2280      	movs	r2, #128	@ 0x80
 8002c52:	4013      	ands	r3, r2
 8002c54:	d007      	beq.n	8002c66 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a16      	ldr	r2, [pc, #88]	@ (8002cb4 <HAL_TIM_IRQHandler+0x200>)
 8002c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	0018      	movs	r0, r3
 8002c62:	f000 fded 	bl	8003840 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2240      	movs	r2, #64	@ 0x40
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d00c      	beq.n	8002c88 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2240      	movs	r2, #64	@ 0x40
 8002c72:	4013      	ands	r3, r2
 8002c74:	d008      	beq.n	8002c88 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2241      	movs	r2, #65	@ 0x41
 8002c7c:	4252      	negs	r2, r2
 8002c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	0018      	movs	r0, r3
 8002c84:	f000 f990 	bl	8002fa8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d00c      	beq.n	8002caa <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2220      	movs	r2, #32
 8002c94:	4013      	ands	r3, r2
 8002c96:	d008      	beq.n	8002caa <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2221      	movs	r2, #33	@ 0x21
 8002c9e:	4252      	negs	r2, r2
 8002ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	f000 fdbb 	bl	8003820 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002caa:	46c0      	nop			@ (mov r8, r8)
 8002cac:	46bd      	mov	sp, r7
 8002cae:	b004      	add	sp, #16
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	46c0      	nop			@ (mov r8, r8)
 8002cb4:	fffffeff 	.word	0xfffffeff

08002cb8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc4:	2317      	movs	r3, #23
 8002cc6:	18fb      	adds	r3, r7, r3
 8002cc8:	2200      	movs	r2, #0
 8002cca:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	223c      	movs	r2, #60	@ 0x3c
 8002cd0:	5c9b      	ldrb	r3, [r3, r2]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d101      	bne.n	8002cda <HAL_TIM_OC_ConfigChannel+0x22>
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	e048      	b.n	8002d6c <HAL_TIM_OC_ConfigChannel+0xb4>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	223c      	movs	r2, #60	@ 0x3c
 8002cde:	2101      	movs	r1, #1
 8002ce0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b14      	cmp	r3, #20
 8002ce6:	d835      	bhi.n	8002d54 <HAL_TIM_OC_ConfigChannel+0x9c>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	009a      	lsls	r2, r3, #2
 8002cec:	4b21      	ldr	r3, [pc, #132]	@ (8002d74 <HAL_TIM_OC_ConfigChannel+0xbc>)
 8002cee:	18d3      	adds	r3, r2, r3
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	0011      	movs	r1, r2
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	f000 f9c7 	bl	8003090 <TIM_OC1_SetConfig>
      break;
 8002d02:	e02c      	b.n	8002d5e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	0011      	movs	r1, r2
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	f000 fa3f 	bl	8003190 <TIM_OC2_SetConfig>
      break;
 8002d12:	e024      	b.n	8002d5e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68ba      	ldr	r2, [r7, #8]
 8002d1a:	0011      	movs	r1, r2
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	f000 fab5 	bl	800328c <TIM_OC3_SetConfig>
      break;
 8002d22:	e01c      	b.n	8002d5e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	0011      	movs	r1, r2
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	f000 fb2f 	bl	8003390 <TIM_OC4_SetConfig>
      break;
 8002d32:	e014      	b.n	8002d5e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68ba      	ldr	r2, [r7, #8]
 8002d3a:	0011      	movs	r1, r2
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f000 fb8b 	bl	8003458 <TIM_OC5_SetConfig>
      break;
 8002d42:	e00c      	b.n	8002d5e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68ba      	ldr	r2, [r7, #8]
 8002d4a:	0011      	movs	r1, r2
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f000 fbdd 	bl	800350c <TIM_OC6_SetConfig>
      break;
 8002d52:	e004      	b.n	8002d5e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002d54:	2317      	movs	r3, #23
 8002d56:	18fb      	adds	r3, r7, r3
 8002d58:	2201      	movs	r2, #1
 8002d5a:	701a      	strb	r2, [r3, #0]
      break;
 8002d5c:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	223c      	movs	r2, #60	@ 0x3c
 8002d62:	2100      	movs	r1, #0
 8002d64:	5499      	strb	r1, [r3, r2]

  return status;
 8002d66:	2317      	movs	r3, #23
 8002d68:	18fb      	adds	r3, r7, r3
 8002d6a:	781b      	ldrb	r3, [r3, #0]
}
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	b006      	add	sp, #24
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	08003900 	.word	0x08003900

08002d78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d84:	2317      	movs	r3, #23
 8002d86:	18fb      	adds	r3, r7, r3
 8002d88:	2200      	movs	r2, #0
 8002d8a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	223c      	movs	r2, #60	@ 0x3c
 8002d90:	5c9b      	ldrb	r3, [r3, r2]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d101      	bne.n	8002d9a <HAL_TIM_PWM_ConfigChannel+0x22>
 8002d96:	2302      	movs	r3, #2
 8002d98:	e0e5      	b.n	8002f66 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	223c      	movs	r2, #60	@ 0x3c
 8002d9e:	2101      	movs	r1, #1
 8002da0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b14      	cmp	r3, #20
 8002da6:	d900      	bls.n	8002daa <HAL_TIM_PWM_ConfigChannel+0x32>
 8002da8:	e0d1      	b.n	8002f4e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	009a      	lsls	r2, r3, #2
 8002dae:	4b70      	ldr	r3, [pc, #448]	@ (8002f70 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002db0:	18d3      	adds	r3, r2, r3
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	0011      	movs	r1, r2
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	f000 f966 	bl	8003090 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	699a      	ldr	r2, [r3, #24]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2108      	movs	r1, #8
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	699a      	ldr	r2, [r3, #24]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2104      	movs	r1, #4
 8002de0:	438a      	bics	r2, r1
 8002de2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6999      	ldr	r1, [r3, #24]
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	691a      	ldr	r2, [r3, #16]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	619a      	str	r2, [r3, #24]
      break;
 8002df6:	e0af      	b.n	8002f58 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	0011      	movs	r1, r2
 8002e00:	0018      	movs	r0, r3
 8002e02:	f000 f9c5 	bl	8003190 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	699a      	ldr	r2, [r3, #24]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2180      	movs	r1, #128	@ 0x80
 8002e12:	0109      	lsls	r1, r1, #4
 8002e14:	430a      	orrs	r2, r1
 8002e16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	699a      	ldr	r2, [r3, #24]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4954      	ldr	r1, [pc, #336]	@ (8002f74 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002e24:	400a      	ands	r2, r1
 8002e26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6999      	ldr	r1, [r3, #24]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	021a      	lsls	r2, r3, #8
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	619a      	str	r2, [r3, #24]
      break;
 8002e3c:	e08c      	b.n	8002f58 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	0011      	movs	r1, r2
 8002e46:	0018      	movs	r0, r3
 8002e48:	f000 fa20 	bl	800328c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	69da      	ldr	r2, [r3, #28]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2108      	movs	r1, #8
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	69da      	ldr	r2, [r3, #28]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2104      	movs	r1, #4
 8002e68:	438a      	bics	r2, r1
 8002e6a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	69d9      	ldr	r1, [r3, #28]
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	691a      	ldr	r2, [r3, #16]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	61da      	str	r2, [r3, #28]
      break;
 8002e7e:	e06b      	b.n	8002f58 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	0011      	movs	r1, r2
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f000 fa81 	bl	8003390 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	69da      	ldr	r2, [r3, #28]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2180      	movs	r1, #128	@ 0x80
 8002e9a:	0109      	lsls	r1, r1, #4
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	69da      	ldr	r2, [r3, #28]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4932      	ldr	r1, [pc, #200]	@ (8002f74 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002eac:	400a      	ands	r2, r1
 8002eae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	69d9      	ldr	r1, [r3, #28]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	021a      	lsls	r2, r3, #8
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	61da      	str	r2, [r3, #28]
      break;
 8002ec4:	e048      	b.n	8002f58 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	0011      	movs	r1, r2
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f000 fac2 	bl	8003458 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2108      	movs	r1, #8
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2104      	movs	r1, #4
 8002ef0:	438a      	bics	r2, r1
 8002ef2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	691a      	ldr	r2, [r3, #16]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002f06:	e027      	b.n	8002f58 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	0011      	movs	r1, r2
 8002f10:	0018      	movs	r0, r3
 8002f12:	f000 fafb 	bl	800350c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2180      	movs	r1, #128	@ 0x80
 8002f22:	0109      	lsls	r1, r1, #4
 8002f24:	430a      	orrs	r2, r1
 8002f26:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4910      	ldr	r1, [pc, #64]	@ (8002f74 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002f34:	400a      	ands	r2, r1
 8002f36:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	021a      	lsls	r2, r3, #8
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002f4c:	e004      	b.n	8002f58 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002f4e:	2317      	movs	r3, #23
 8002f50:	18fb      	adds	r3, r7, r3
 8002f52:	2201      	movs	r2, #1
 8002f54:	701a      	strb	r2, [r3, #0]
      break;
 8002f56:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	223c      	movs	r2, #60	@ 0x3c
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	5499      	strb	r1, [r3, r2]

  return status;
 8002f60:	2317      	movs	r3, #23
 8002f62:	18fb      	adds	r3, r7, r3
 8002f64:	781b      	ldrb	r3, [r3, #0]
}
 8002f66:	0018      	movs	r0, r3
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	b006      	add	sp, #24
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	46c0      	nop			@ (mov r8, r8)
 8002f70:	08003954 	.word	0x08003954
 8002f74:	fffffbff 	.word	0xfffffbff

08002f78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f80:	46c0      	nop			@ (mov r8, r8)
 8002f82:	46bd      	mov	sp, r7
 8002f84:	b002      	add	sp, #8
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f90:	46c0      	nop			@ (mov r8, r8)
 8002f92:	46bd      	mov	sp, r7
 8002f94:	b002      	add	sp, #8
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fa0:	46c0      	nop			@ (mov r8, r8)
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	b002      	add	sp, #8
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fb0:	46c0      	nop			@ (mov r8, r8)
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	b002      	add	sp, #8
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a2b      	ldr	r2, [pc, #172]	@ (8003078 <TIM_Base_SetConfig+0xc0>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d003      	beq.n	8002fd8 <TIM_Base_SetConfig+0x20>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a2a      	ldr	r2, [pc, #168]	@ (800307c <TIM_Base_SetConfig+0xc4>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d108      	bne.n	8002fea <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2270      	movs	r2, #112	@ 0x70
 8002fdc:	4393      	bics	r3, r2
 8002fde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a22      	ldr	r2, [pc, #136]	@ (8003078 <TIM_Base_SetConfig+0xc0>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d00f      	beq.n	8003012 <TIM_Base_SetConfig+0x5a>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a21      	ldr	r2, [pc, #132]	@ (800307c <TIM_Base_SetConfig+0xc4>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d00b      	beq.n	8003012 <TIM_Base_SetConfig+0x5a>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a20      	ldr	r2, [pc, #128]	@ (8003080 <TIM_Base_SetConfig+0xc8>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d007      	beq.n	8003012 <TIM_Base_SetConfig+0x5a>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a1f      	ldr	r2, [pc, #124]	@ (8003084 <TIM_Base_SetConfig+0xcc>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d003      	beq.n	8003012 <TIM_Base_SetConfig+0x5a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a1e      	ldr	r2, [pc, #120]	@ (8003088 <TIM_Base_SetConfig+0xd0>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d108      	bne.n	8003024 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	4a1d      	ldr	r2, [pc, #116]	@ (800308c <TIM_Base_SetConfig+0xd4>)
 8003016:	4013      	ands	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4313      	orrs	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2280      	movs	r2, #128	@ 0x80
 8003028:	4393      	bics	r3, r2
 800302a:	001a      	movs	r2, r3
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	4313      	orrs	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a0a      	ldr	r2, [pc, #40]	@ (8003078 <TIM_Base_SetConfig+0xc0>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d007      	beq.n	8003062 <TIM_Base_SetConfig+0xaa>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a0b      	ldr	r2, [pc, #44]	@ (8003084 <TIM_Base_SetConfig+0xcc>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d003      	beq.n	8003062 <TIM_Base_SetConfig+0xaa>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a0a      	ldr	r2, [pc, #40]	@ (8003088 <TIM_Base_SetConfig+0xd0>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d103      	bne.n	800306a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	691a      	ldr	r2, [r3, #16]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	615a      	str	r2, [r3, #20]
}
 8003070:	46c0      	nop			@ (mov r8, r8)
 8003072:	46bd      	mov	sp, r7
 8003074:	b004      	add	sp, #16
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40012c00 	.word	0x40012c00
 800307c:	40000400 	.word	0x40000400
 8003080:	40002000 	.word	0x40002000
 8003084:	40014400 	.word	0x40014400
 8003088:	40014800 	.word	0x40014800
 800308c:	fffffcff 	.word	0xfffffcff

08003090 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	2201      	movs	r2, #1
 80030a6:	4393      	bics	r3, r2
 80030a8:	001a      	movs	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4a2e      	ldr	r2, [pc, #184]	@ (8003178 <TIM_OC1_SetConfig+0xe8>)
 80030be:	4013      	ands	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2203      	movs	r2, #3
 80030c6:	4393      	bics	r3, r2
 80030c8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	2202      	movs	r2, #2
 80030d8:	4393      	bics	r3, r2
 80030da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a24      	ldr	r2, [pc, #144]	@ (800317c <TIM_OC1_SetConfig+0xec>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d007      	beq.n	80030fe <TIM_OC1_SetConfig+0x6e>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a23      	ldr	r2, [pc, #140]	@ (8003180 <TIM_OC1_SetConfig+0xf0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d003      	beq.n	80030fe <TIM_OC1_SetConfig+0x6e>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a22      	ldr	r2, [pc, #136]	@ (8003184 <TIM_OC1_SetConfig+0xf4>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d10c      	bne.n	8003118 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	2208      	movs	r2, #8
 8003102:	4393      	bics	r3, r2
 8003104:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	4313      	orrs	r3, r2
 800310e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	2204      	movs	r2, #4
 8003114:	4393      	bics	r3, r2
 8003116:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a18      	ldr	r2, [pc, #96]	@ (800317c <TIM_OC1_SetConfig+0xec>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d007      	beq.n	8003130 <TIM_OC1_SetConfig+0xa0>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a17      	ldr	r2, [pc, #92]	@ (8003180 <TIM_OC1_SetConfig+0xf0>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d003      	beq.n	8003130 <TIM_OC1_SetConfig+0xa0>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a16      	ldr	r2, [pc, #88]	@ (8003184 <TIM_OC1_SetConfig+0xf4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d111      	bne.n	8003154 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4a15      	ldr	r2, [pc, #84]	@ (8003188 <TIM_OC1_SetConfig+0xf8>)
 8003134:	4013      	ands	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	4a14      	ldr	r2, [pc, #80]	@ (800318c <TIM_OC1_SetConfig+0xfc>)
 800313c:	4013      	ands	r3, r2
 800313e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4313      	orrs	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	4313      	orrs	r3, r2
 8003152:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	621a      	str	r2, [r3, #32]
}
 800316e:	46c0      	nop			@ (mov r8, r8)
 8003170:	46bd      	mov	sp, r7
 8003172:	b006      	add	sp, #24
 8003174:	bd80      	pop	{r7, pc}
 8003176:	46c0      	nop			@ (mov r8, r8)
 8003178:	fffeff8f 	.word	0xfffeff8f
 800317c:	40012c00 	.word	0x40012c00
 8003180:	40014400 	.word	0x40014400
 8003184:	40014800 	.word	0x40014800
 8003188:	fffffeff 	.word	0xfffffeff
 800318c:	fffffdff 	.word	0xfffffdff

08003190 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	2210      	movs	r2, #16
 80031a6:	4393      	bics	r3, r2
 80031a8:	001a      	movs	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	4a2c      	ldr	r2, [pc, #176]	@ (8003270 <TIM_OC2_SetConfig+0xe0>)
 80031be:	4013      	ands	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	4a2b      	ldr	r2, [pc, #172]	@ (8003274 <TIM_OC2_SetConfig+0xe4>)
 80031c6:	4013      	ands	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	021b      	lsls	r3, r3, #8
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	2220      	movs	r2, #32
 80031da:	4393      	bics	r3, r2
 80031dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	011b      	lsls	r3, r3, #4
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a22      	ldr	r2, [pc, #136]	@ (8003278 <TIM_OC2_SetConfig+0xe8>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d10d      	bne.n	800320e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	2280      	movs	r2, #128	@ 0x80
 80031f6:	4393      	bics	r3, r2
 80031f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	011b      	lsls	r3, r3, #4
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	4313      	orrs	r3, r2
 8003204:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	2240      	movs	r2, #64	@ 0x40
 800320a:	4393      	bics	r3, r2
 800320c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a19      	ldr	r2, [pc, #100]	@ (8003278 <TIM_OC2_SetConfig+0xe8>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d007      	beq.n	8003226 <TIM_OC2_SetConfig+0x96>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a18      	ldr	r2, [pc, #96]	@ (800327c <TIM_OC2_SetConfig+0xec>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d003      	beq.n	8003226 <TIM_OC2_SetConfig+0x96>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a17      	ldr	r2, [pc, #92]	@ (8003280 <TIM_OC2_SetConfig+0xf0>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d113      	bne.n	800324e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4a16      	ldr	r2, [pc, #88]	@ (8003284 <TIM_OC2_SetConfig+0xf4>)
 800322a:	4013      	ands	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4a15      	ldr	r2, [pc, #84]	@ (8003288 <TIM_OC2_SetConfig+0xf8>)
 8003232:	4013      	ands	r3, r2
 8003234:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	4313      	orrs	r3, r2
 8003240:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	4313      	orrs	r3, r2
 800324c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	621a      	str	r2, [r3, #32]
}
 8003268:	46c0      	nop			@ (mov r8, r8)
 800326a:	46bd      	mov	sp, r7
 800326c:	b006      	add	sp, #24
 800326e:	bd80      	pop	{r7, pc}
 8003270:	feff8fff 	.word	0xfeff8fff
 8003274:	fffffcff 	.word	0xfffffcff
 8003278:	40012c00 	.word	0x40012c00
 800327c:	40014400 	.word	0x40014400
 8003280:	40014800 	.word	0x40014800
 8003284:	fffffbff 	.word	0xfffffbff
 8003288:	fffff7ff 	.word	0xfffff7ff

0800328c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	4a31      	ldr	r2, [pc, #196]	@ (8003368 <TIM_OC3_SetConfig+0xdc>)
 80032a2:	401a      	ands	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4a2d      	ldr	r2, [pc, #180]	@ (800336c <TIM_OC3_SetConfig+0xe0>)
 80032b8:	4013      	ands	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2203      	movs	r2, #3
 80032c0:	4393      	bics	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	4a27      	ldr	r2, [pc, #156]	@ (8003370 <TIM_OC3_SetConfig+0xe4>)
 80032d2:	4013      	ands	r3, r2
 80032d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	021b      	lsls	r3, r3, #8
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	4313      	orrs	r3, r2
 80032e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a23      	ldr	r2, [pc, #140]	@ (8003374 <TIM_OC3_SetConfig+0xe8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d10d      	bne.n	8003306 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	4a22      	ldr	r2, [pc, #136]	@ (8003378 <TIM_OC3_SetConfig+0xec>)
 80032ee:	4013      	ands	r3, r2
 80032f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	021b      	lsls	r3, r3, #8
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	4a1e      	ldr	r2, [pc, #120]	@ (800337c <TIM_OC3_SetConfig+0xf0>)
 8003302:	4013      	ands	r3, r2
 8003304:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a1a      	ldr	r2, [pc, #104]	@ (8003374 <TIM_OC3_SetConfig+0xe8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d007      	beq.n	800331e <TIM_OC3_SetConfig+0x92>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a1b      	ldr	r2, [pc, #108]	@ (8003380 <TIM_OC3_SetConfig+0xf4>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d003      	beq.n	800331e <TIM_OC3_SetConfig+0x92>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a1a      	ldr	r2, [pc, #104]	@ (8003384 <TIM_OC3_SetConfig+0xf8>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d113      	bne.n	8003346 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	4a19      	ldr	r2, [pc, #100]	@ (8003388 <TIM_OC3_SetConfig+0xfc>)
 8003322:	4013      	ands	r3, r2
 8003324:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	4a18      	ldr	r2, [pc, #96]	@ (800338c <TIM_OC3_SetConfig+0x100>)
 800332a:	4013      	ands	r3, r2
 800332c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	4313      	orrs	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	621a      	str	r2, [r3, #32]
}
 8003360:	46c0      	nop			@ (mov r8, r8)
 8003362:	46bd      	mov	sp, r7
 8003364:	b006      	add	sp, #24
 8003366:	bd80      	pop	{r7, pc}
 8003368:	fffffeff 	.word	0xfffffeff
 800336c:	fffeff8f 	.word	0xfffeff8f
 8003370:	fffffdff 	.word	0xfffffdff
 8003374:	40012c00 	.word	0x40012c00
 8003378:	fffff7ff 	.word	0xfffff7ff
 800337c:	fffffbff 	.word	0xfffffbff
 8003380:	40014400 	.word	0x40014400
 8003384:	40014800 	.word	0x40014800
 8003388:	ffffefff 	.word	0xffffefff
 800338c:	ffffdfff 	.word	0xffffdfff

08003390 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	4a24      	ldr	r2, [pc, #144]	@ (8003438 <TIM_OC4_SetConfig+0xa8>)
 80033a6:	401a      	ands	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4a20      	ldr	r2, [pc, #128]	@ (800343c <TIM_OC4_SetConfig+0xac>)
 80033bc:	4013      	ands	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4a1f      	ldr	r2, [pc, #124]	@ (8003440 <TIM_OC4_SetConfig+0xb0>)
 80033c4:	4013      	ands	r3, r2
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	021b      	lsls	r3, r3, #8
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	4a1b      	ldr	r2, [pc, #108]	@ (8003444 <TIM_OC4_SetConfig+0xb4>)
 80033d8:	4013      	ands	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	031b      	lsls	r3, r3, #12
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a17      	ldr	r2, [pc, #92]	@ (8003448 <TIM_OC4_SetConfig+0xb8>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d007      	beq.n	8003400 <TIM_OC4_SetConfig+0x70>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a16      	ldr	r2, [pc, #88]	@ (800344c <TIM_OC4_SetConfig+0xbc>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d003      	beq.n	8003400 <TIM_OC4_SetConfig+0x70>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a15      	ldr	r2, [pc, #84]	@ (8003450 <TIM_OC4_SetConfig+0xc0>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d109      	bne.n	8003414 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	4a14      	ldr	r2, [pc, #80]	@ (8003454 <TIM_OC4_SetConfig+0xc4>)
 8003404:	4013      	ands	r3, r2
 8003406:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	019b      	lsls	r3, r3, #6
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	4313      	orrs	r3, r2
 8003412:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	621a      	str	r2, [r3, #32]
}
 800342e:	46c0      	nop			@ (mov r8, r8)
 8003430:	46bd      	mov	sp, r7
 8003432:	b006      	add	sp, #24
 8003434:	bd80      	pop	{r7, pc}
 8003436:	46c0      	nop			@ (mov r8, r8)
 8003438:	ffffefff 	.word	0xffffefff
 800343c:	feff8fff 	.word	0xfeff8fff
 8003440:	fffffcff 	.word	0xfffffcff
 8003444:	ffffdfff 	.word	0xffffdfff
 8003448:	40012c00 	.word	0x40012c00
 800344c:	40014400 	.word	0x40014400
 8003450:	40014800 	.word	0x40014800
 8003454:	ffffbfff 	.word	0xffffbfff

08003458 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	4a21      	ldr	r2, [pc, #132]	@ (80034f4 <TIM_OC5_SetConfig+0x9c>)
 800346e:	401a      	ands	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800347e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4a1d      	ldr	r2, [pc, #116]	@ (80034f8 <TIM_OC5_SetConfig+0xa0>)
 8003484:	4013      	ands	r3, r2
 8003486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	4313      	orrs	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	4a19      	ldr	r2, [pc, #100]	@ (80034fc <TIM_OC5_SetConfig+0xa4>)
 8003496:	4013      	ands	r3, r2
 8003498:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	041b      	lsls	r3, r3, #16
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a15      	ldr	r2, [pc, #84]	@ (8003500 <TIM_OC5_SetConfig+0xa8>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d007      	beq.n	80034be <TIM_OC5_SetConfig+0x66>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a14      	ldr	r2, [pc, #80]	@ (8003504 <TIM_OC5_SetConfig+0xac>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d003      	beq.n	80034be <TIM_OC5_SetConfig+0x66>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a13      	ldr	r2, [pc, #76]	@ (8003508 <TIM_OC5_SetConfig+0xb0>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d109      	bne.n	80034d2 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	4a0c      	ldr	r2, [pc, #48]	@ (80034f4 <TIM_OC5_SetConfig+0x9c>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	021b      	lsls	r3, r3, #8
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	621a      	str	r2, [r3, #32]
}
 80034ec:	46c0      	nop			@ (mov r8, r8)
 80034ee:	46bd      	mov	sp, r7
 80034f0:	b006      	add	sp, #24
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	fffeffff 	.word	0xfffeffff
 80034f8:	fffeff8f 	.word	0xfffeff8f
 80034fc:	fffdffff 	.word	0xfffdffff
 8003500:	40012c00 	.word	0x40012c00
 8003504:	40014400 	.word	0x40014400
 8003508:	40014800 	.word	0x40014800

0800350c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	4a22      	ldr	r2, [pc, #136]	@ (80035ac <TIM_OC6_SetConfig+0xa0>)
 8003522:	401a      	ands	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4a1e      	ldr	r2, [pc, #120]	@ (80035b0 <TIM_OC6_SetConfig+0xa4>)
 8003538:	4013      	ands	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	021b      	lsls	r3, r3, #8
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	4313      	orrs	r3, r2
 8003546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	4a1a      	ldr	r2, [pc, #104]	@ (80035b4 <TIM_OC6_SetConfig+0xa8>)
 800354c:	4013      	ands	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	051b      	lsls	r3, r3, #20
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	4313      	orrs	r3, r2
 800355a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a16      	ldr	r2, [pc, #88]	@ (80035b8 <TIM_OC6_SetConfig+0xac>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d007      	beq.n	8003574 <TIM_OC6_SetConfig+0x68>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a15      	ldr	r2, [pc, #84]	@ (80035bc <TIM_OC6_SetConfig+0xb0>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d003      	beq.n	8003574 <TIM_OC6_SetConfig+0x68>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a14      	ldr	r2, [pc, #80]	@ (80035c0 <TIM_OC6_SetConfig+0xb4>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d109      	bne.n	8003588 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	4a13      	ldr	r2, [pc, #76]	@ (80035c4 <TIM_OC6_SetConfig+0xb8>)
 8003578:	4013      	ands	r3, r2
 800357a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	029b      	lsls	r3, r3, #10
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	4313      	orrs	r3, r2
 8003586:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	621a      	str	r2, [r3, #32]
}
 80035a2:	46c0      	nop			@ (mov r8, r8)
 80035a4:	46bd      	mov	sp, r7
 80035a6:	b006      	add	sp, #24
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	46c0      	nop			@ (mov r8, r8)
 80035ac:	ffefffff 	.word	0xffefffff
 80035b0:	feff8fff 	.word	0xfeff8fff
 80035b4:	ffdfffff 	.word	0xffdfffff
 80035b8:	40012c00 	.word	0x40012c00
 80035bc:	40014400 	.word	0x40014400
 80035c0:	40014800 	.word	0x40014800
 80035c4:	fffbffff 	.word	0xfffbffff

080035c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	221f      	movs	r2, #31
 80035d8:	4013      	ands	r3, r2
 80035da:	2201      	movs	r2, #1
 80035dc:	409a      	lsls	r2, r3
 80035de:	0013      	movs	r3, r2
 80035e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	43d2      	mvns	r2, r2
 80035ea:	401a      	ands	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6a1a      	ldr	r2, [r3, #32]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	211f      	movs	r1, #31
 80035f8:	400b      	ands	r3, r1
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	4099      	lsls	r1, r3
 80035fe:	000b      	movs	r3, r1
 8003600:	431a      	orrs	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	621a      	str	r2, [r3, #32]
}
 8003606:	46c0      	nop			@ (mov r8, r8)
 8003608:	46bd      	mov	sp, r7
 800360a:	b006      	add	sp, #24
 800360c:	bd80      	pop	{r7, pc}
	...

08003610 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	223c      	movs	r2, #60	@ 0x3c
 800361e:	5c9b      	ldrb	r3, [r3, r2]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003624:	2302      	movs	r3, #2
 8003626:	e04a      	b.n	80036be <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	223c      	movs	r2, #60	@ 0x3c
 800362c:	2101      	movs	r1, #1
 800362e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	223d      	movs	r2, #61	@ 0x3d
 8003634:	2102      	movs	r1, #2
 8003636:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a1e      	ldr	r2, [pc, #120]	@ (80036c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d108      	bne.n	8003664 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	4a1d      	ldr	r2, [pc, #116]	@ (80036cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003656:	4013      	ands	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	4313      	orrs	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2270      	movs	r2, #112	@ 0x70
 8003668:	4393      	bics	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	4313      	orrs	r3, r2
 8003674:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a11      	ldr	r2, [pc, #68]	@ (80036c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d004      	beq.n	8003692 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a10      	ldr	r2, [pc, #64]	@ (80036d0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d10c      	bne.n	80036ac <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2280      	movs	r2, #128	@ 0x80
 8003696:	4393      	bics	r3, r2
 8003698:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	223d      	movs	r2, #61	@ 0x3d
 80036b0:	2101      	movs	r1, #1
 80036b2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	223c      	movs	r2, #60	@ 0x3c
 80036b8:	2100      	movs	r1, #0
 80036ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	0018      	movs	r0, r3
 80036c0:	46bd      	mov	sp, r7
 80036c2:	b004      	add	sp, #16
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	46c0      	nop			@ (mov r8, r8)
 80036c8:	40012c00 	.word	0x40012c00
 80036cc:	ff0fffff 	.word	0xff0fffff
 80036d0:	40000400 	.word	0x40000400

080036d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80036de:	2300      	movs	r3, #0
 80036e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	223c      	movs	r2, #60	@ 0x3c
 80036e6:	5c9b      	ldrb	r3, [r3, r2]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d101      	bne.n	80036f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80036ec:	2302      	movs	r3, #2
 80036ee:	e079      	b.n	80037e4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	223c      	movs	r2, #60	@ 0x3c
 80036f4:	2101      	movs	r1, #1
 80036f6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	22ff      	movs	r2, #255	@ 0xff
 80036fc:	4393      	bics	r3, r2
 80036fe:	001a      	movs	r2, r3
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	4313      	orrs	r3, r2
 8003706:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4a38      	ldr	r2, [pc, #224]	@ (80037ec <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800370c:	401a      	ands	r2, r3
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	4313      	orrs	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	4a35      	ldr	r2, [pc, #212]	@ (80037f0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800371a:	401a      	ands	r2, r3
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	4313      	orrs	r3, r2
 8003722:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4a33      	ldr	r2, [pc, #204]	@ (80037f4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003728:	401a      	ands	r2, r3
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4313      	orrs	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	4a30      	ldr	r2, [pc, #192]	@ (80037f8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003736:	401a      	ands	r2, r3
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	4313      	orrs	r3, r2
 800373e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4a2e      	ldr	r2, [pc, #184]	@ (80037fc <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003744:	401a      	ands	r2, r3
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	4313      	orrs	r3, r2
 800374c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	4a2b      	ldr	r2, [pc, #172]	@ (8003800 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003752:	401a      	ands	r2, r3
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003758:	4313      	orrs	r3, r2
 800375a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4a29      	ldr	r2, [pc, #164]	@ (8003804 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003760:	401a      	ands	r2, r3
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	041b      	lsls	r3, r3, #16
 8003768:	4313      	orrs	r3, r2
 800376a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a25      	ldr	r2, [pc, #148]	@ (8003808 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d106      	bne.n	8003784 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	4a24      	ldr	r2, [pc, #144]	@ (800380c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800377a:	401a      	ands	r2, r3
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	4313      	orrs	r3, r2
 8003782:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a1f      	ldr	r2, [pc, #124]	@ (8003808 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d121      	bne.n	80037d2 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4a1f      	ldr	r2, [pc, #124]	@ (8003810 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003792:	401a      	ands	r2, r3
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003798:	051b      	lsls	r3, r3, #20
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	4a1c      	ldr	r2, [pc, #112]	@ (8003814 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 80037a2:	401a      	ands	r2, r3
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003818 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 80037b0:	401a      	ands	r2, r3
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b6:	4313      	orrs	r3, r2
 80037b8:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a12      	ldr	r2, [pc, #72]	@ (8003808 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d106      	bne.n	80037d2 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4a15      	ldr	r2, [pc, #84]	@ (800381c <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 80037c8:	401a      	ands	r2, r3
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	223c      	movs	r2, #60	@ 0x3c
 80037de:	2100      	movs	r1, #0
 80037e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	0018      	movs	r0, r3
 80037e6:	46bd      	mov	sp, r7
 80037e8:	b004      	add	sp, #16
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	fffffcff 	.word	0xfffffcff
 80037f0:	fffffbff 	.word	0xfffffbff
 80037f4:	fffff7ff 	.word	0xfffff7ff
 80037f8:	ffffefff 	.word	0xffffefff
 80037fc:	ffffdfff 	.word	0xffffdfff
 8003800:	ffffbfff 	.word	0xffffbfff
 8003804:	fff0ffff 	.word	0xfff0ffff
 8003808:	40012c00 	.word	0x40012c00
 800380c:	efffffff 	.word	0xefffffff
 8003810:	ff0fffff 	.word	0xff0fffff
 8003814:	feffffff 	.word	0xfeffffff
 8003818:	fdffffff 	.word	0xfdffffff
 800381c:	dfffffff 	.word	0xdfffffff

08003820 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003828:	46c0      	nop			@ (mov r8, r8)
 800382a:	46bd      	mov	sp, r7
 800382c:	b002      	add	sp, #8
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003838:	46c0      	nop			@ (mov r8, r8)
 800383a:	46bd      	mov	sp, r7
 800383c:	b002      	add	sp, #8
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003848:	46c0      	nop			@ (mov r8, r8)
 800384a:	46bd      	mov	sp, r7
 800384c:	b002      	add	sp, #8
 800384e:	bd80      	pop	{r7, pc}

08003850 <memset>:
 8003850:	0003      	movs	r3, r0
 8003852:	1882      	adds	r2, r0, r2
 8003854:	4293      	cmp	r3, r2
 8003856:	d100      	bne.n	800385a <memset+0xa>
 8003858:	4770      	bx	lr
 800385a:	7019      	strb	r1, [r3, #0]
 800385c:	3301      	adds	r3, #1
 800385e:	e7f9      	b.n	8003854 <memset+0x4>

08003860 <__libc_init_array>:
 8003860:	b570      	push	{r4, r5, r6, lr}
 8003862:	2600      	movs	r6, #0
 8003864:	4c0c      	ldr	r4, [pc, #48]	@ (8003898 <__libc_init_array+0x38>)
 8003866:	4d0d      	ldr	r5, [pc, #52]	@ (800389c <__libc_init_array+0x3c>)
 8003868:	1b64      	subs	r4, r4, r5
 800386a:	10a4      	asrs	r4, r4, #2
 800386c:	42a6      	cmp	r6, r4
 800386e:	d109      	bne.n	8003884 <__libc_init_array+0x24>
 8003870:	2600      	movs	r6, #0
 8003872:	f000 f819 	bl	80038a8 <_init>
 8003876:	4c0a      	ldr	r4, [pc, #40]	@ (80038a0 <__libc_init_array+0x40>)
 8003878:	4d0a      	ldr	r5, [pc, #40]	@ (80038a4 <__libc_init_array+0x44>)
 800387a:	1b64      	subs	r4, r4, r5
 800387c:	10a4      	asrs	r4, r4, #2
 800387e:	42a6      	cmp	r6, r4
 8003880:	d105      	bne.n	800388e <__libc_init_array+0x2e>
 8003882:	bd70      	pop	{r4, r5, r6, pc}
 8003884:	00b3      	lsls	r3, r6, #2
 8003886:	58eb      	ldr	r3, [r5, r3]
 8003888:	4798      	blx	r3
 800388a:	3601      	adds	r6, #1
 800388c:	e7ee      	b.n	800386c <__libc_init_array+0xc>
 800388e:	00b3      	lsls	r3, r6, #2
 8003890:	58eb      	ldr	r3, [r5, r3]
 8003892:	4798      	blx	r3
 8003894:	3601      	adds	r6, #1
 8003896:	e7f2      	b.n	800387e <__libc_init_array+0x1e>
 8003898:	080039a8 	.word	0x080039a8
 800389c:	080039a8 	.word	0x080039a8
 80038a0:	080039ac 	.word	0x080039ac
 80038a4:	080039a8 	.word	0x080039a8

080038a8 <_init>:
 80038a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038aa:	46c0      	nop			@ (mov r8, r8)
 80038ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ae:	bc08      	pop	{r3}
 80038b0:	469e      	mov	lr, r3
 80038b2:	4770      	bx	lr

080038b4 <_fini>:
 80038b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b6:	46c0      	nop			@ (mov r8, r8)
 80038b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ba:	bc08      	pop	{r3}
 80038bc:	469e      	mov	lr, r3
 80038be:	4770      	bx	lr
